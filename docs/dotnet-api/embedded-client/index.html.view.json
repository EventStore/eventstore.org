{"conceptual":"\n<h2 id=\"embeddedvnodebuilder\" sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"7\" sourceendlinenumber=\"7\">EmbeddedVNodeBuilder</h2>\n<p sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"9\" sourceendlinenumber=\"9\">The <code>EmbeddedVNodeBuilder</code> class sets up and builds an Event Store node. You can configure your node through methods provided by the <code>EmbeddedVNodeBuilder</code> class.</p>\n<div class=\"NOTE\" sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"11\" sourceendlinenumber=\"11\"><h5>Note</h5><p sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"12\" sourceendlinenumber=\"12\">The builder used for the <code>EmbeddedVNodeBuilder</code> is the same Event Store uses internally to create the <code>ClusterNode</code>, see <em>EventStore.ClusterNode.Program.cs</em> for more examples on how to use it.</p>\n</div>\n<h2 id=\"building-a-node\" sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"14\" sourceendlinenumber=\"14\">Building a node</h2>\n<p sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"16\" sourceendlinenumber=\"16\">You have two options when you start creating a node, <code>EmbeddedVNodeBuilder.AsSingleNode()</code> or <code>EmbeddedVNodeBuilder.AsClusterMember(clusterSize)</code>, which will create a single node or a cluster node respectively. After creating the builder, you can configure the node through the methods provided by the <code>EmbeddedVNodeBuilder</code>. These are listed below.</p>\n<p sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"18\" sourceendlinenumber=\"18\">Once you have configured the node, build it with <code>EmbeddedVNodeBuilder.Build()</code> which returns the configured <code>ClusterVNode</code>.</p>\n<p sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">Start the node with <code>ClusterVNode.StartAndWaitUntilReady()</code> or <code>ClusterVNode.Start()</code>. <code>ClusterVNode.StartAndWaitUntilReady()</code> returns a task that completes once the node has started and all subsystems have finished loading.</p>\n<p sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"22\" sourceendlinenumber=\"22\">For example, to build a single node with default options :</p>\n<pre sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"24\" sourceendlinenumber=\"30\"><code class=\"lang-csharp\">var nodeBuilder = EmbeddedVNodeBuilder.AsSingleNode()\n                                      .OnDefaultEndpoints()\n                                      .RunInMemory();\nvar node = nodeBuilder.Build();\nnode.StartAndWaitUntilReady().Wait();\n</code></pre><p sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"32\" sourceendlinenumber=\"32\">To build a node to be part of a cluster with custom endpoints and gossip seeds:</p>\n<pre sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"49\"><code class=\"lang-csharp\">var nodeBuilder = EmbeddedVNodeBuilder.AsClusterMember(3)\n                      .RunOnDisk(&quot;node1db&quot;)\n                      .WithInternalHttpOn(new IPEndPoint(IPAddress.Loopback, 1112))\n                      .WithExternalHttpOn(new IPEndPoint(IPAddress.Loopback, 1113))\n                      .WithExternalTcpOn(new IPEndPoint(IPAddress.Loopback, 1114))\n                      .WithInternalTcpOn(new IPEndPoint(IPAddress.Loopback, 1115))\n                      .DisableDnsDiscovery()\n                      .WithGossipSeeds(new IPEndPoint[]\n                      {\n                          new IPEndPoint(IPAddress.Loopback, 2112),\n                          new IPEndPoint(IPAddress.Loopback, 3112)\n                      });\nvar node = nodeBuilder.Build();\nnode.Start();\n</code></pre><div class=\"WARNING\" sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"51\" sourceendlinenumber=\"51\"><h5>Warning</h5><p sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"52\" sourceendlinenumber=\"52\">When running an embedded cluster, the task returned by <code>StartAndWaitUntilReady()</code> only completes on the master node.</p>\n</div>\n<h2 id=\"connecting-to-an-embedded-node\" sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"54\" sourceendlinenumber=\"54\">Connecting to an embedded node</h2>\n<p sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"56\" sourceendlinenumber=\"56\">You can connect to an embedded Event Store node with the <code>EmbeddedEventStoreConnection</code> class. Calling <code>EmbeddedEventStoreConnection.Create(ClusterVNode)</code> returns an <code>IEventStoreConnection</code> configured to connect to your embedded node. From there you can use the connection as normal in the .NET Client.</p>\n<pre sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"58\" sourceendlinenumber=\"66\"><code class=\"lang-csharp\">using(var embeddedConn = EmbeddedEventStoreConnection.Create(node))\n{\n    embeddedConn.ConnectAsync().Wait();\n    embeddedConn.AppendToStreamAsync(&quot;testStream&quot;, ExpectedVersion.Any,\n                    new EventData(Guid.NewGuid(), &quot;eventType&quot;, true,\n                    Encoding.UTF8.GetBytes(&quot;{\\&quot;Foo\\&quot;:\\&quot;Bar\\&quot;}&quot;), null)).Wait();\n}\n</code></pre><h2 id=\"logging-with-an-embedded-node\" sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"68\" sourceendlinenumber=\"68\">Logging with an embedded node</h2>\n<p sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"70\" sourceendlinenumber=\"70\">To enable logging for an embedded node, you need to initialize the <code>LogManager</code> and ensure that you configure the logger with a <code>log.config</code> file in your configuration directory.</p>\n<p sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"72\" sourceendlinenumber=\"72\">To initialize the <code>LogManager</code>, call this before building the nodes:</p>\n<pre sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"74\" sourceendlinenumber=\"76\"><code class=\"lang-csharp\">LogManager.Init(logComponentName, logDirectory, logConfigurationDirectory);\n</code></pre><h2 id=\"embeddedvnodebuilder-options\" sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"78\" sourceendlinenumber=\"78\">EmbeddedVNodeBuilder options</h2>\n<p sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"80\" sourceendlinenumber=\"80\">The following options are available when building an Embedded Node.</p>\n<h3 id=\"application-options\" sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"82\" sourceendlinenumber=\"82\">Application Options</h3>\n<table sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"84\" sourceendlinenumber=\"93\">\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>AsSingleNode()</code></td>\n<td>Returns a builder set to construct options for a single node instance</td>\n</tr>\n<tr>\n<td><code>AsClusterMember(int clusterSize)</code></td>\n<td>Returns a builder set to construct options for a cluster node instance with a cluster size</td>\n</tr>\n<tr>\n<td><code>DisableHTTPCaching()</code></td>\n<td>Disable HTTP Caching</td>\n</tr>\n<tr>\n<td><code>WithWorkerThreads(int count)</code></td>\n<td>Sets the number of worker threads to use in shared threadpool</td>\n</tr>\n<tr>\n<td><code>WithStatsPeriod(TimeSpan statsPeriod)</code></td>\n<td>Sets the period between statistics gathers</td>\n</tr>\n<tr>\n<td><code>EnableLoggingOfHttpRequests()</code></td>\n<td>Enable logging of HTTP requests and responses before they are processed</td>\n</tr>\n<tr>\n<td><code>EnableHistograms()</code></td>\n<td>Enable the tracking of histograms, typically used for debugging</td>\n</tr>\n<tr>\n<td><code>EnableTrustedAuth()</code></td>\n<td>Enable trusted authentication by an intermediary in the HTTP</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"certificate-options\" sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"95\" sourceendlinenumber=\"95\">Certificate options</h3>\n<table sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"97\" sourceendlinenumber=\"102\">\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>WithServerCertificateFromFile(string path, string password)</code></td>\n<td>Sets the Server SSL Certificate loaded from a file</td>\n</tr>\n<tr>\n<td><code>WithServerCertificate(X509Certificate2 sslCertificate)</code></td>\n<td>Sets the Server SSL Certificate</td>\n</tr>\n<tr>\n<td><code>WithServerCertificateFromStore(StoreLocation storeLocation, StoreName storeName, string certificateSubjectName, string certificateThumbprint)</code></td>\n<td>Sets the Server SSL Certificate loaded from a certificate store</td>\n</tr>\n<tr>\n<td><code>WithServerCertificateFromStore(StoreName storeName, string certificateSubjectName, string certificateThumbprint)</code></td>\n<td>Sets the Server SSL Certificate loaded from a certificate store</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"cluster-options\" sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"104\" sourceendlinenumber=\"104\">Cluster options</h3>\n<table sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"106\" sourceendlinenumber=\"119\">\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>WithClusterGossipPort(int port)</code></td>\n<td>Sets the internal gossip port (used when using cluster DNS, this should point to a known port gossip will be running on)</td>\n</tr>\n<tr>\n<td><code>WithGossipSeeds(params IPEndPoint[] endpoints)</code></td>\n<td>Sets the gossip seeds this node should talk to</td>\n</tr>\n<tr>\n<td><code>WithClusterDnsName(string name)</code></td>\n<td>Sets the DNS name used for the discovery of other cluster nodes</td>\n</tr>\n<tr>\n<td><code>DisableDnsDiscovery()</code></td>\n<td>Disable DNS discovery for the cluster</td>\n</tr>\n<tr>\n<td><code>WithGossipInterval(TimeSpan gossipInterval)</code></td>\n<td>Sets the gossip interval</td>\n</tr>\n<tr>\n<td><code>WithGossipAllowedTimeDifference(TimeSpan gossipAllowedDifference)</code></td>\n<td>Sets the allowed gossip time difference</td>\n</tr>\n<tr>\n<td><code>WithGossipTimeout(TimeSpan gossipTimeout)</code></td>\n<td>Sets the gossip timeout</td>\n</tr>\n<tr>\n<td><code>WithPrepareTimeout(TimeSpan prepareTimeout)</code></td>\n<td>Sets the prepare timeout</td>\n</tr>\n<tr>\n<td><code>WithCommitTimeout(TimeSpan commitTimeout)</code></td>\n<td>Sets the commit timeout</td>\n</tr>\n<tr>\n<td><code>WithPrepareCount(int prepareCount)</code></td>\n<td>Sets the number of nodes which must acknowledge prepares.</td>\n</tr>\n<tr>\n<td><code>WithCommitCount(int commitCount)</code></td>\n<td>Sets the number of nodes which must acknowledge commits before acknowledging to a client.</td>\n</tr>\n<tr>\n<td><code>WithNodePriority(int nodePriority)</code></td>\n<td>Sets the node priority used during master election</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"database-options\" sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"121\" sourceendlinenumber=\"121\">Database options</h3>\n<table sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"123\" sourceendlinenumber=\"139\">\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>RunInMemory()</code></td>\n<td>Sets the builder to run in memory</td>\n</tr>\n<tr>\n<td><code>RunOnDisk(string path)</code></td>\n<td>Sets the builder to write database files to the specified path</td>\n</tr>\n<tr>\n<td><code>MaximumMemoryTableSizeOf(int size)</code></td>\n<td>Sets the maximum size a memtable is allowed to reach (in count) before moved to be a ptable</td>\n</tr>\n<tr>\n<td><code>DoNotVerifyDbHashes()</code></td>\n<td>Marks that the existing database files should not be checked for checksums on startup.</td>\n</tr>\n<tr>\n<td><code>VerifyDbHashes()</code></td>\n<td>Marks that the existing database files should be checked for checksums on startup.</td>\n</tr>\n<tr>\n<td><code>WithMinFlushDelay(TimeSpan minFlushDelay)</code></td>\n<td>Sets the minimum flush delay</td>\n</tr>\n<tr>\n<td><code>DisableScavengeMerging()</code></td>\n<td>Disables the merging of chunks when scavenge is running</td>\n</tr>\n<tr>\n<td><code>WithScavengeHistoryMaxAge(int scavengeHistoryMaxAge)</code></td>\n<td>The number of days to keep scavenge history (Default: 30)</td>\n</tr>\n<tr>\n<td><code>WithIndexPath(string indexPath)</code></td>\n<td>Sets the path the index should be loaded or saved to</td>\n</tr>\n<tr>\n<td><code>WithIndexCacheDepth(int indexCacheDepth)</code></td>\n<td>Sets the depth to cache for the mid point cache in index</td>\n</tr>\n<tr>\n<td><code>WithUnsafeIgnoreHardDelete()</code></td>\n<td>Disables Hard Deletes (UNSAFE: use to remove hard deletes)</td>\n</tr>\n<tr>\n<td><code>WithUnsafeDisableFlushToDisk()</code></td>\n<td>Disables Hard Deletes (UNSAFE: use to remove hard deletes)</td>\n</tr>\n<tr>\n<td><code>WithBetterOrdering()</code></td>\n<td>Enable queue affinity on reads during write process to try to get better ordering.</td>\n</tr>\n<tr>\n<td><code>WithTfChunkSize(int chunkSize)</code></td>\n<td>Sets the transaction file chunk size. Default is <code>TFConsts.ChunkSize</code></td>\n</tr>\n<tr>\n<td><code>WithTfCachedChunks(int cachedChunks)</code></td>\n<td>The number of chunks to cache in unmanaged memory. Default is <code>TFConsts.ChunksCacheSize</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"interface-options\" sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"141\" sourceendlinenumber=\"141\">Interface options</h3>\n<table sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"143\" sourceendlinenumber=\"172\">\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>OnDefaultEndpoints()</code></td>\n<td>Sets the default endpoints on localhost (1113 tcp, 2113 http)</td>\n</tr>\n<tr>\n<td><code>AdvertiseInternalIPAs(IPAddress intIpAdvertiseAs)</code></td>\n<td>Sets up the Internal IP to advertise</td>\n</tr>\n<tr>\n<td><code>AdvertiseExternalIPAs(IPAddress extIpAdvertiseAs)</code></td>\n<td>Sets up the External IP to advertise</td>\n</tr>\n<tr>\n<td><code>AdvertiseInternalHttpPortAs(int intHttpPortAdvertiseAs)</code></td>\n<td>Sets up the Internal HTTP port to advertise</td>\n</tr>\n<tr>\n<td><code>AdvertiseExternalHttpPortAs(int extHttpPortAdvertiseAs)</code></td>\n<td>Sets up the External HTTP port to advertise</td>\n</tr>\n<tr>\n<td><code>AdvertiseInternalSecureTCPPortAs(int intSecureTcpPortAdvertiseAs)</code></td>\n<td>Sets up the Internal Secure TCP port to advertise</td>\n</tr>\n<tr>\n<td><code>AdvertiseExternalSecureTCPPortAs(int extSecureTcpPortAdvertiseAs)</code></td>\n<td>Sets up the External Secure TCP port to advertise</td>\n</tr>\n<tr>\n<td><code>AdvertiseInternalTCPPortAs(int intTcpPortAdvertiseAs)</code></td>\n<td>Sets up the Internal TCP port to advertise</td>\n</tr>\n<tr>\n<td><code>AdvertiseExternalTCPPortAs(int extTcpPortAdvertiseAs)</code></td>\n<td>Sets up the External TCP port to advertise</td>\n</tr>\n<tr>\n<td><code>WithInternalHttpOn(IPEndPoint endpoint)</code></td>\n<td>Sets the internal HTTP endpoint to the specified value</td>\n</tr>\n<tr>\n<td><code>WithExternalHttpOn(IPEndPoint endpoint)</code></td>\n<td>Sets the external HTTP endpoint to the specified value</td>\n</tr>\n<tr>\n<td><code>WithInternalTcpOn(IPEndPoint endpoint)</code></td>\n<td>Sets the internal TCP endpoint to the specified value</td>\n</tr>\n<tr>\n<td><code>WithInternalSecureTcpOn(IPEndPoint endpoint)</code></td>\n<td>Sets the internal secure TCP endpoint to the specified value</td>\n</tr>\n<tr>\n<td><code>WithExternalTcpOn(IPEndPoint endpoint)</code></td>\n<td>Sets the external TCP endpoint to the specified value</td>\n</tr>\n<tr>\n<td><code>WithExternalSecureTcpOn(IPEndPoint endpoint)</code></td>\n<td>Sets the external secure TCP endpoint to the specified value</td>\n</tr>\n<tr>\n<td><code>EnableSsl()</code></td>\n<td>Sets that SSL should be used on connections</td>\n</tr>\n<tr>\n<td><code>WithSslTargetHost(string targetHost)</code></td>\n<td>Sets the target host of the server&#39;s SSL certificate.</td>\n</tr>\n<tr>\n<td><code>ValidateSslServer()</code></td>\n<td>Sets whether to validate that the server&#39;s certificate is trusted.</td>\n</tr>\n<tr>\n<td><code>NoGossipOnPublicInterface()</code></td>\n<td>Disables gossip on the public (client) interface</td>\n</tr>\n<tr>\n<td><code>NoAdminOnPublicInterface()</code></td>\n<td>Disables the admin interface on the public (client) interface</td>\n</tr>\n<tr>\n<td><code>NoStatsOnPublicInterface()</code></td>\n<td>Disables statistics screens on the public (client) interface</td>\n</tr>\n<tr>\n<td><code>AddInternalHttpPrefix(string prefix)</code></td>\n<td>Adds a HTTP prefix for the internal HTTP endpoint</td>\n</tr>\n<tr>\n<td><code>AddExternalHttpPrefix(string prefix)</code></td>\n<td>Adds a HTTP prefix for the external HTTP endpoint</td>\n</tr>\n<tr>\n<td><code>DontAddInterfacePrefixes()</code></td>\n<td>Don&#39;t add the interface prefixes (e.g. If the External IP is set to the Loopback address, add <a href=\"http://localhost:2113/\" data-raw-source=\"&lt;http://localhost:2113/&gt;\" sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"168\" sourceendlinenumber=\"168\">http://localhost:2113/</a> as a prefix)</td>\n</tr>\n<tr>\n<td><code>WithInternalHeartbeatInterval(TimeSpan heartbeatInterval)</code></td>\n<td>Sets the heartbeat interval for the internal network interface.</td>\n</tr>\n<tr>\n<td><code>WithExternalHeartbeatInterval(TimeSpan heartbeatInterval)</code></td>\n<td>Sets the heartbeat interval for the external network interface.</td>\n</tr>\n<tr>\n<td><code>WithInternalHeartbeatTimeout(TimeSpan heartbeatTimeout)</code></td>\n<td>Sets the heartbeat timeout for the internal network interface.</td>\n</tr>\n<tr>\n<td><code>WithExternalHeartbeatTimeout(TimeSpan heartbeatTimeout)</code></td>\n<td>Sets the heartbeat timeout for the external network interface.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"projections-options\" sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"174\" sourceendlinenumber=\"174\">Projections options</h3>\n<table sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"176\" sourceendlinenumber=\"180\">\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>StartStandardProjections()</code></td>\n<td>Start standard projections.</td>\n</tr>\n<tr>\n<td><code>RunProjections(ProjectionType projectionType, int numberOfThreads = Opts.ProjectionThreadsDefault)</code></td>\n<td>Sets the mode and the number of threads on which to run projections.</td>\n</tr>\n<tr>\n<td><code>RunProjections(ClientAPI.Embedded.ProjectionsMode projectionsMode, int numberOfThreads = Opts.ProjectionThreadsDefault)</code></td>\n<td>Sets the mode and the number of threads on which to run projections.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"embeddedeventstoreconnection\" sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"182\" sourceendlinenumber=\"182\">EmbeddedEventStoreConnection</h2>\n<p sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"184\" sourceendlinenumber=\"184\">The following methods are available on <code>EmbeddedEventStoreConnection</code> for connecting to an embedded node.</p>\n<table sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"186\" sourceendlinenumber=\"189\">\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Create(ClusterVNode eventStore, string connectionName = null)</code></td>\n<td>Creates a new embedded <code>IEventStoreConnection</code> to a single node with default connection settings</td>\n</tr>\n<tr>\n<td><code>Create(ClusterVNode eventStore, ConnectionSettings connectionSettings, string connectionName = null)</code></td>\n<td>Creates a new embedded <code>IEventStoreConnection</code> to a single node using specific <code>ConnectionSettings</code></td>\n</tr>\n</tbody>\n</table>\n","type":"Conceptual","source":{"remote":{"path":"dotnet-api/embedded-client.md","branch":"feature/stats-REST","repo":"git@github.com:EventStore/docs.geteventstore.com.git"},"startLine":0.0,"endLine":0.0,"isExternal":false},"path":"dotnet-api/embedded-client.md","documentation":{"remote":{"path":"dotnet-api/embedded-client.md","branch":"feature/stats-REST","repo":"git@github.com:EventStore/docs.geteventstore.com.git"},"startLine":0.0,"endLine":0.0,"isExternal":false},"_docfxVersion":"2.43.3.0","_disableBreadcrumb":true,"_enableSearch":true,"_gitContribute":{"branch":"master"},"_appFaviconPath":"assets/favicon.ico","_appTitle":"Event Store","_appFooter":"&copy; 2019 Event Store Limited","_disableNavbar":false,"_disableToc":true,"_systemKeys":["conceptual","type","source","path","documentation","title","rawTitle","wordCount"],"title":"Embedded Client","rawTitle":"<h1 id=\"embedded-client\" sourcefile=\"dotnet-api/embedded-client.md\" sourcestartlinenumber=\"5\" sourceendlinenumber=\"5\">Embedded Client</h1>","outputFileName":"index.html","wordCount":1221.0,"_lang":"csharp","_tocPath":"toc.html","_navPath":"toc.html","_rel":"../../","_path":"dotnet-api/embedded-client/index.html","_key":"dotnet-api/embedded-client.md","_navRel":"../../toc.html","_tocRel":"../../toc.html","_navKey":"~/toc.yml","_tocKey":"~/toc.yml","__global":{"classesInSubtitle":"Classes","structsInSubtitle":"Structs","interfacesInSubtitle":"Interfaces","enumsInSubtitle":"Enums","delegatesInSubtitle":"Delegates","constructorsInSubtitle":"Constructors","fieldsInSubtitle":"Fields","propertiesInSubtitle":"Properties","methodsInSubtitle":"Methods","eventsInSubtitle":"Events","operatorsInSubtitle":"Operators","eiisInSubtitle":"Explicit Interface Implementations","functionsInSubtitle":"Functions","membersInSubtitle":"Members","improveThisDoc":"Improve this Doc","viewSource":"View Source","inheritance":"Inheritance","inheritedMembers":"Inherited Members","namespace":"Namespace","assembly":"Assembly","syntax":"Syntax","overrides":"Overrides","implements":"Implements","remarks":"Remarks","examples":"Examples","seealso":"See Also","declaration":"Declaration","parameters":"Parameters","typeParameters":"Type Parameters","type":"Type","name":"Name","description":"Description","returns":"Returns","fieldValue":"Field Value","propertyValue":"Property Value","eventType":"Event Type","exceptions":"Exceptions","condition":"Condition","extensionMethods":"Extension Methods","note":"<h5>Note</h5>","warning":"<h5>Warning</h5>","tip":"<h5>Tip</h5>","important":"<h5>Important</h5>","caution":"<h5>Caution</h5>","next":"<h5>Next Steps</h5>","_shared":{}},"docurl":"https://github.com/EventStore/docs.geteventstore.com/blob/master/dotnet-api/embedded-client.md/#L1"}