{"conceptual":"\n<p sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"7\" sourceendlinenumber=\"7\">Meta data in Event Store defines whether an event is deleted or not. You can use <a href=\"~/dotnet-api/stream-metadata.md\" data-raw-source=\"[stream metadata](~/dotnet-api/stream-metadata.md)\" sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"7\" sourceendlinenumber=\"7\">stream metadata</a> such as <code>TruncateBefore</code>, <code>MaxAge</code> and <code>MaxCount</code> to filter events considered deleted. When reading a stream, the index checks the stream&#39;s metadata to determine whether any of its events have been deleted.</p>\n<p sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"9\" sourceendlinenumber=\"9\"><code>$all</code> bypasses the index, meaning that it does not check the metadata to determine whether events exist or not. As such, events that have been deleted are still be readable until a scavenge has removed them. There are requirements for a scavenge to successfully remove events, for more information about this, read the <a href=\"~/server/scavenging.md\" data-raw-source=\"[scavenging guide](~/server/scavenging.md)\" sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"9\" sourceendlinenumber=\"9\">scavenging guide</a>.</p>\n<div class=\"WARNING\" sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"11\" sourceendlinenumber=\"11\"><h5>Warning</h5><p sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"12\" sourceendlinenumber=\"12\">The last event in a stream is always kept as a record of the last event number in the stream.</p>\n</div>\n<h3 id=\"soft-delete-and-truncatebefore\" sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"14\" sourceendlinenumber=\"14\">Soft delete and <code>TruncateBefore</code></h3>\n<p sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"16\" sourceendlinenumber=\"17\"><code>TruncateBefore</code> and <code>$tb</code> considers any event with an event number lower than its value as deleted.\nFor example, if you had the following events in a stream :</p>\n<pre sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"19\" sourceendlinenumber=\"24\"><code class=\"lang-text\">0@test-stream\n1@test-stream\n2@test-stream\n3@test-stream\n</code></pre><p sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"26\" sourceendlinenumber=\"26\">If you set the <code>TruncateBefore</code> or <code>$tb</code> value to 3, a read of the stream would result in only reading the last event:</p>\n<pre sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"28\" sourceendlinenumber=\"30\"><code class=\"lang-text\">3@test-stream\n</code></pre><p sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"32\" sourceendlinenumber=\"33\">A <strong>Soft delete</strong> makes use of <code>TruncateBefore</code> and <code>$tb</code>. When you delete a stream, its <code>TruncateBefore</code> or <code>$tb</code> is set to the streams current last event number. When you read a soft deleted stream, the read returns a <code>StreamNotFound</code> or <code>404</code> result.\nAfter deleting the stream, you are able to write to it again, continuing from where it left off.</p>\n<p sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"35\" sourceendlinenumber=\"35\">For example, if you soft deleted the above example stream, the <code>TruncateBefore</code> or <code>$tb</code> is set to 3 (the stream&#39;s current event number). If you were to write to the stream again, the next event is written with event number 4. Only events from event number 4 onwards are visible when you read this stream.</p>\n<h3 id=\"max-count-and-max-age\" sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">Max count and Max age</h3>\n<p sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"39\" sourceendlinenumber=\"39\"><strong>Max count</strong> (<code>$maxCount</code> and <code>MaxCount</code>) limits the number of events that you can read from a stream. If you try to read a stream that has a max count of 5, you are only able to read the last 5 events, regardless of how many events are in the stream.</p>\n<p sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"41\" sourceendlinenumber=\"41\"><strong>Max age</strong> (<code>$maxAge</code> and <code>MaxAge</code>) specifies the number of seconds an event can live for. The age is calculated at the time of the read. So if you read a stream with a <code>MaxAge</code> of 3 minutes and one of the events in the stream has existed for 4 minutes at the time of the read, it is not returned.</p>\n<h2 id=\"hard-delete\" sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"43\" sourceendlinenumber=\"43\">Hard delete</h2>\n<p sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"45\" sourceendlinenumber=\"45\">A <strong>hard delete</strong> writes a <code>tombstone</code> event to the stream, permanently deleting it. You cannot recreate the stream, or write to it again. Tombstone events are written with the event type <code>$streamDeleted</code>. When you read a hard deleted stream, the read returns a <code>StreamDeleted</code> or <code>410</code> result.</p>\n<p sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"47\" sourceendlinenumber=\"47\">The events in the deleted stream are liable to be removed in a scavenge, but the tombstone event remains.</p>\n<div class=\"WARNING\" sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"49\" sourceendlinenumber=\"49\"><h5>Warning</h5><p sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"50\" sourceendlinenumber=\"50\">A hard delete of a stream is permanent. You cannot write to the stream or recreate it. As such, you should generally soft delete streams unless you have a specific need to permanently delete the stream.</p>\n</div>\n<h2 id=\"deleted-events-and-projections\" sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"52\" sourceendlinenumber=\"52\">Deleted events and projections</h2>\n<p sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"54\" sourceendlinenumber=\"54\">If you are intending on using projections and deleting streams, there are some things to take into consideration:</p>\n<ul sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"56\" sourceendlinenumber=\"57\">\n<li sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"56\" sourceendlinenumber=\"56\">Due to the nature of <code>$all</code>, projections using <code>fromAll</code> read any deleted events that have not been scavenged. They also receive any tombstone events from hard deletes.</li>\n<li sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"57\" sourceendlinenumber=\"57\">Projections that read from a specific stream receive that stream&#39;s metadata events. You can filter these out by ignoring events with an event type <code>$metadata</code>.</li>\n</ul>\n","type":"Conceptual","source":{"remote":{"path":"server/deleting-streams-and-events.md","branch":"feature/stats-REST","repo":"git@github.com:EventStore/docs.geteventstore.com.git"},"startLine":0.0,"endLine":0.0,"isExternal":false},"path":"server/deleting-streams-and-events.md","documentation":{"remote":{"path":"server/deleting-streams-and-events.md","branch":"feature/stats-REST","repo":"git@github.com:EventStore/docs.geteventstore.com.git"},"startLine":0.0,"endLine":0.0,"isExternal":false},"_docfxVersion":"2.43.3.0","_disableBreadcrumb":true,"_enableSearch":true,"_gitContribute":{"branch":"master"},"_appFaviconPath":"assets/favicon.ico","_appTitle":"Event Store","_appFooter":"&copy; 2019 Event Store Limited","_disableNavbar":false,"_disableToc":true,"_systemKeys":["conceptual","type","source","path","documentation","title","rawTitle","wordCount"],"title":"Deleting streams and events","rawTitle":"<h1 id=\"deleting-streams-and-events\" sourcefile=\"server/deleting-streams-and-events.md\" sourcestartlinenumber=\"5\" sourceendlinenumber=\"5\">Deleting streams and events</h1>","outputFileName":"index.html","wordCount":593.0,"_lang":"csharp","_tocPath":"toc.html","_navPath":"toc.html","_rel":"../../","_path":"server/deleting-streams-and-events/index.html","_key":"server/deleting-streams-and-events.md","_navRel":"../../toc.html","_tocRel":"../../toc.html","_navKey":"~/toc.yml","_tocKey":"~/toc.yml","__global":{"classesInSubtitle":"Classes","structsInSubtitle":"Structs","interfacesInSubtitle":"Interfaces","enumsInSubtitle":"Enums","delegatesInSubtitle":"Delegates","constructorsInSubtitle":"Constructors","fieldsInSubtitle":"Fields","propertiesInSubtitle":"Properties","methodsInSubtitle":"Methods","eventsInSubtitle":"Events","operatorsInSubtitle":"Operators","eiisInSubtitle":"Explicit Interface Implementations","functionsInSubtitle":"Functions","membersInSubtitle":"Members","improveThisDoc":"Improve this Doc","viewSource":"View Source","inheritance":"Inheritance","inheritedMembers":"Inherited Members","namespace":"Namespace","assembly":"Assembly","syntax":"Syntax","overrides":"Overrides","implements":"Implements","remarks":"Remarks","examples":"Examples","seealso":"See Also","declaration":"Declaration","parameters":"Parameters","typeParameters":"Type Parameters","type":"Type","name":"Name","description":"Description","returns":"Returns","fieldValue":"Field Value","propertyValue":"Property Value","eventType":"Event Type","exceptions":"Exceptions","condition":"Condition","extensionMethods":"Extension Methods","note":"<h5>Note</h5>","warning":"<h5>Warning</h5>","tip":"<h5>Tip</h5>","important":"<h5>Important</h5>","caution":"<h5>Caution</h5>","next":"<h5>Next Steps</h5>","_shared":{}},"docurl":"https://github.com/EventStore/docs.geteventstore.com/blob/master/server/deleting-streams-and-events.md/#L1"}