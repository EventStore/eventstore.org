{
  "http-api/swagger.html": {
    "href": "http-api/swagger.html",
    "title": "HTTP API | Event Store",
    "keywords": "HTTP API"
  },
  "http-api/swagger/Shutdown a node.html": {
    "href": "http-api/swagger/Shutdown a node.html",
    "title": "Shutdown a node | Event Store",
    "keywords": "Shutdown a node Issues a shut down command to a node. Request POST /admin/shutdown Responses Status Code Description Samples 200 OK"
  },
  "http-api/swagger/Scavenge a node.html": {
    "href": "http-api/swagger/Scavenge a node.html",
    "title": "Scavenge a node | Event Store",
    "keywords": "Scavenge a node Scavenge reclaims disk space by rewriting database chunks, minus the events to delete, and then deleting the old chunks. Request POST /admin/scavenge[?startFromChunk&threads] Parameters Name Type Value Notes startFromChunk integer The chunk ID to start the scavenge operation from. threads integer 1 The number of threads to run the scavenge operation on (max 4). Responses Status Code Description Samples 200 OK 401 Unauthorized"
  },
  "http-api/swagger/Stop a scavenge.html": {
    "href": "http-api/swagger/Stop a scavenge.html",
    "title": "Stop a scavenge | Event Store",
    "keywords": "Stop a scavenge Stop a running scavenge operation. Request DELETE /admin/scavenge/{scavengeId} Parameters Name Type Value Notes *scavengeId integer The scavenge ID Responses Status Code Description Samples 200 OK 401 Unauthorized"
  },
  "http-api/swagger/Merge Indexes.html": {
    "href": "http-api/swagger/Merge Indexes.html",
    "title": "Merge Indexes | Event Store",
    "keywords": "Merge Indexes Manually merge indexes after a scavenge operation Request DELETE /admin/mergeindexes Responses Status Code Description Samples 200 OK 401 Unauthorized"
  },
  "http-api/swagger/Get info for node.html": {
    "href": "http-api/swagger/Get info for node.html",
    "title": "Get info for node | Event Store",
    "keywords": "Get info for node Returns information about node. Request GET /info Responses Status Code Description Samples 200 OK 401 Unauthorized"
  },
  "http-api/swagger/Get configuration for node.html": {
    "href": "http-api/swagger/Get configuration for node.html",
    "title": "Get configuration for node | Event Store",
    "keywords": "Get configuration for node Returns configuration details about node. Request GET /info/options Responses Status Code Description Samples 200 OK 401 Unauthorized"
  },
  "http-api/swagger/Read a stream.html": {
    "href": "http-api/swagger/Read a stream.html",
    "title": "Read a stream | Event Store",
    "keywords": "Read a stream Read a stream, receiving a standard AtomFeed document as a response. Request GET /streams/{stream}[?embed] Parameters Name Type Value Notes *stream string The stream ID embed string Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Write to a stream.html": {
    "href": "http-api/swagger/Write to a stream.html",
    "title": "Write to a stream | Event Store",
    "keywords": "Write to a stream Write to a stream. Request POST /streams/{stream} Parameters Name Type Value Notes *stream string The name of the stream *stream data object Name Type Notes body object Event data Stream events to create ES-ExpectedVersion integer Expected stream version ES-EventType string The event type associated to a posted body ES-EventId integer Event ID associated to a posted body ES-RequiresMaster boolean Wether to run on a master node Responses Status Code Description Samples 201 New stream created 307 Temporary Redirect 400 Write request body invalid"
  },
  "http-api/swagger/Delete a stream.html": {
    "href": "http-api/swagger/Delete a stream.html",
    "title": "Delete a stream | Event Store",
    "keywords": "Delete a stream Delete specified stream Request DELETE /streams/{stream} Parameters Name Type Value Notes *stream string The stream ID to delete Responses Status Code Description Samples 204 Stream deleted"
  },
  "http-api/swagger/Alternative stream URL.html": {
    "href": "http-api/swagger/Alternative stream URL.html",
    "title": "Alternative stream URL | Event Store",
    "keywords": "Alternative stream URL A URL generated by Event Store if you don't supply an ID when creating a stream. You then use this URL to post events to. Request POST /streams/{stream}/incoming/{guid} Parameters Name Type Value Notes *stream string The name of the stream *guid string Autogenerated UUID Responses Status Code Description Samples 200 New event created 400 Bad request"
  },
  "http-api/swagger/Read stream event.html": {
    "href": "http-api/swagger/Read stream event.html",
    "title": "Read stream event | Event Store",
    "keywords": "Read stream event Reads a single event from a stream. Request GET /streams/{stream}/{event}[?embed] Parameters Name Type Value Notes *stream string The stream ID *event string The event ID embed string Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Get {n} events.html": {
    "href": "http-api/swagger/Get {n} events.html",
    "title": "Get {n} events | Event Store",
    "keywords": "Get {n} events Paginate backwards though stream events by a specified amount. Request GET /streams/{stream}/{event}/{count}[?embed] Parameters Name Type Value Notes *stream string The stream ID *event string The event ID *count integer How many events to skip backwards from in the request. embed string Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Page back through events.html": {
    "href": "http-api/swagger/Page back through events.html",
    "title": "Page back through events | Event Store",
    "keywords": "Page back through events Paginate backwards though stream events by a specified amount. Request GET /streams/{stream}/{event}/backward/{count}[?embed] Parameters Name Type Value Notes *stream string The stream ID *event string The event ID *count integer How many events to skip backwards from in the request. embed string Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Page forward through events.html": {
    "href": "http-api/swagger/Page forward through events.html",
    "title": "Page forward through events | Event Store",
    "keywords": "Page forward through events Paginate forwards though stream events by a specified amount. Request GET /streams/{stream}/{event}/forward/{count}[?embed] Parameters Name Type Value Notes *stream string The stream ID *event string The event ID *count integer How many events to skip forwards in the request. embed string Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Read stream metadata.html": {
    "href": "http-api/swagger/Read stream metadata.html",
    "title": "Read stream metadata | Event Store",
    "keywords": "Read stream metadata Returns metadata of a stream, typically information associated with an event that is not part of the event. Request GET /streams/{stream}/metadata[?embed] Parameters Name Type Value Notes *stream string The stream ID embed string Responses Status Code Description Samples 200 OK"
  },
  "http-api/swagger/Update stream metadata.html": {
    "href": "http-api/swagger/Update stream metadata.html",
    "title": "Update stream metadata | Event Store",
    "keywords": "Update stream metadata Update the metadata of a stream. Request POST /streams/{stream}/metadata Parameters Name Type Value Notes *stream string The name of the stream streamMetadataItem object Name Type Notes eventId string Alphanumeric ID eventType string The type of event data Metadata object Responses Status Code Description Samples 201 New stream created 400 Bad request"
  },
  "http-api/swagger/Get all events.html": {
    "href": "http-api/swagger/Get all events.html",
    "title": "Get all events | Event Store",
    "keywords": "Get all events Returns all events from all streams, you must provide user details. Request GET /streams/$all[?embed] Parameters Name Type Value Notes embed string Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Get all subscriptions.html": {
    "href": "http-api/swagger/Get all subscriptions.html",
    "title": "Get all subscriptions | Event Store",
    "keywords": "Get all subscriptions Returns all subscriptions from all streams. Request GET /subscriptions Responses Status Code Description Samples 200 New persistant subscription 400 bad input parameter"
  },
  "http-api/swagger/Get subscription stream information.html": {
    "href": "http-api/swagger/Get subscription stream information.html",
    "title": "Get subscription stream information | Event Store",
    "keywords": "Get subscription stream information Needed Request GET /subscriptions/{stream} Parameters Name Type Value Notes *stream string The stream name Responses Status Code Description Samples 200 OK"
  },
  "http-api/swagger/Get subscription information.html": {
    "href": "http-api/swagger/Get subscription information.html",
    "title": "Get subscription information | Event Store",
    "keywords": "Get subscription information Needed Request GET /subscriptions/{stream}/{subscription}/info Parameters Name Type Value Notes *stream string The stream the persistent subscription is on *subscription string The name of the subscription group Responses Status Code Description Samples 200 OK"
  },
  "http-api/swagger/Get a stream.html": {
    "href": "http-api/swagger/Get a stream.html",
    "title": "Get a stream | Event Store",
    "keywords": "Get a stream Read a specified stream by a persistent subscription. Request GET /subscriptions/{stream}/{subscription}[?embed] Parameters Name Type Value Notes *stream string The stream the persistent subscription is on *subscription string The name of the subscription group embed string Needed Responses Status Code Description Samples 200 OK"
  },
  "http-api/swagger/Update subscription.html": {
    "href": "http-api/swagger/Update subscription.html",
    "title": "Update subscription | Event Store",
    "keywords": "Update subscription You can edit the settings of an existing subscription while it is running. This will drop the current subscribers and will reset the subscription internally. Request POST /subscriptions/{stream}/{subscription} Parameters Name Type Value Notes *stream string The stream the persistent subscription is on *subscription string The name of the subscription group subscriptionItem object Name Type Notes ResolveLinkTos boolean Whether to resolve link events startFrom integer Which event position in the stream the subscription should start from extraStatistics boolean Whether to track latency statistics on this subscription checkPointAfterMilliseconds integer The amount of time to try to checkpoint after liveBufferSize integer The size of the buffer (in-memory) listening to live messages as they happen before paging occurs readBatchSize integer The number of events to read per batch when reading the history bufferSize integer The number of events to cache when paging through history maxCheckPointCount integer The maximum number of messages not checkpointed before forcing a checkpoint maxRetryCount integer The maximum number of retries (due to timeout) before a message is considered to be parked maxSubscriberCount integer The maximum number of TCP subscribers allowed messageTimeoutMilliseconds integer The amount of time after which to consider a message as timedout and retried minCheckPointCount integer The minimum number of messages to write to a checkpoint namedConsumerStrategy string The strategy to use for distributing events to client consumers Subscription to create Responses Status Code Description Samples 200 Subscription updated"
  },
  "http-api/swagger/Create subscription.html": {
    "href": "http-api/swagger/Create subscription.html",
    "title": "Create subscription | Event Store",
    "keywords": "Create subscription Before interacting with a subscription group, you need to create one. You will receive an error if you attempt to create a subscription group more than once. This requires admin permissions . Request PUT /subscriptions/{stream}/{subscription} Parameters Name Type Value Notes *stream string The stream the persistent subscription is on *subscription string The name of the subscription group subscriptionItem object Name Type Notes ResolveLinkTos boolean Whether to resolve link events startFrom integer Which event position in the stream the subscription should start from extraStatistics boolean Whether to track latency statistics on this subscription checkPointAfterMilliseconds integer The amount of time to try to checkpoint after liveBufferSize integer The size of the buffer (in-memory) listening to live messages as they happen before paging occurs readBatchSize integer The number of events to read per batch when reading the history bufferSize integer The number of events to cache when paging through history maxCheckPointCount integer The maximum number of messages not checkpointed before forcing a checkpoint maxRetryCount integer The maximum number of retries (due to timeout) before a message is considered to be parked maxSubscriberCount integer The maximum number of TCP subscribers allowed messageTimeoutMilliseconds integer The amount of time after which to consider a message as timedout and retried minCheckPointCount integer The minimum number of messages to write to a checkpoint namedConsumerStrategy string The strategy to use for distributing events to client consumers Subscription to create Responses Status Code Description Samples 200 Subscription created"
  },
  "http-api/swagger/Delete subscription.html": {
    "href": "http-api/swagger/Delete subscription.html",
    "title": "Delete subscription | Event Store",
    "keywords": "Delete subscription Deletes a subscription Request DELETE /subscriptions/{stream}/{subscription} Parameters Name Type Value Notes *stream string The stream the persistent subscription is on *subscription string The name of the subscription group Responses Status Code Description Samples 200 OK"
  },
  "http-api/swagger/Get {n} subscription events.html": {
    "href": "http-api/swagger/Get {n} subscription events.html",
    "title": "Get {n} subscription events | Event Store",
    "keywords": "Get {n} subscription events Reads a stream via a persistent subscription and return a specific number of events Request GET /subscriptions/{stream}/{subscription}/{count}[?embed] Parameters Name Type Value Notes *stream string The stream the persistent subscription is on *subscription string The name of the subscription group *count integer How many events to return for the request. embed string Responses Status Code Description Samples 200 OK"
  },
  "http-api/swagger/Acknowledge a single message.html": {
    "href": "http-api/swagger/Acknowledge a single message.html",
    "title": "Acknowledge a single message | Event Store",
    "keywords": "Acknowledge a single message Clients must acknowledge (or not acknowledge) messages in the competing consumer model. If the client fails to respond in the given timeout period, the message will be retried. You should use the rel links in the feed for acknowledgements not bookmark URIs as they are subject to change in future versions. Request POST /subscriptions/{stream}/{subscription}/ack/{messageid} Parameters Name Type Value Notes *stream string The stream the persistent subscription is on *subscription string The name of the subscription group *messageid string The id of the message that needs to be acked Responses Status Code Description Samples 200 New persistant subscription 400 bad input parameter"
  },
  "http-api/swagger/Acknowledge multiple messages.html": {
    "href": "http-api/swagger/Acknowledge multiple messages.html",
    "title": "Acknowledge multiple messages | Event Store",
    "keywords": "Acknowledge multiple messages Clients must acknowledge (or not acknowledge) messages in the competing consumer model. If the client fails to respond in the given timeout period, the message will be retried. You should use the rel links in the feed for acknowledgements not bookmark URIs as they are subject to change in future versions. Request POST /subscriptions/{stream}/{subscription}/ack[?ids] Parameters Name Type Value Notes *stream string The stream the persistent subscription is on *subscription string The name of the subscription group ids string The ids of the messages that need to be acked separated by commas Responses Status Code Description Samples 200 New persistant subscription 400 bad input parameter"
  },
  "http-api/swagger/Don't acknowledge a single message.html": {
    "href": "http-api/swagger/Don't acknowledge a single message.html",
    "title": "Don't acknowledge a single message | Event Store",
    "keywords": "Don't acknowledge a single message Clients must acknowledge (or not acknowledge) messages in the competing consumer model. If the client fails to respond in the given timeout period, the message will be retried. You should use the rel links in the feed for acknowledgements not bookmark URIs as they are subject to change in future versions. Request POST /subscriptions/{stream}/{subscription}/nack/{messageid}[?action] Parameters Name Type Value Notes *stream string The stream the persistent subscription is on *subscription string The name of the subscription group *messageid string The id of the message that needs to be nacked action string Park - Don't retry the message, park it until a request is sent to reply the parked messages Retry - Retry the message Skip - Discard the message Stop - Stop the subscription Responses Status Code Description Samples 200 New persistant subscription 400 bad input parameter"
  },
  "http-api/swagger/Don't acknowledge multiple messages.html": {
    "href": "http-api/swagger/Don't acknowledge multiple messages.html",
    "title": "Don't acknowledge multiple messages | Event Store",
    "keywords": "Don't acknowledge multiple messages Clients must acknowledge (or not acknowledge) messages in the competing consumer model. If the client fails to respond in the given timeout period, the message will be retried. You should use the rel links in the feed for acknowledgements not bookmark URIs as they are subject to change in future versions. Request POST /subscriptions/{stream}/{subscription}/nack[?ids&action] Parameters Name Type Value Notes *stream string The stream the persistent subscription is on *subscription string The name of the subscription group ids string The ids of the messages that need to be nacked separated by commas action string Park - Don't retry the message, park it until a request is sent to reply the parked messages Retry - Retry the message Skip - Discard the message Stop - Stop the subscription Responses Status Code Description Samples 200 New persistant subscription 400 bad input parameter"
  },
  "http-api/swagger/Replay previously parked messages.html": {
    "href": "http-api/swagger/Replay previously parked messages.html",
    "title": "Replay previously parked messages | Event Store",
    "keywords": "Replay previously parked messages Replay any previously parked messages in a stream that were parked by a negative acknowledgement action. Request POST /subscriptions/{stream}/{subscription}/replayParked Parameters Name Type Value Notes *stream string The stream the persistent subscription is on *subscription string The name of the subscription group Responses Status Code Description Samples 200 OK"
  },
  "http-api/swagger/Get all users.html": {
    "href": "http-api/swagger/Get all users.html",
    "title": "Get all users | Event Store",
    "keywords": "Get all users Returns all users defined in Event Store. Request GET /users/ Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Create a user.html": {
    "href": "http-api/swagger/Create a user.html",
    "title": "Create a user | Event Store",
    "keywords": "Create a user Create a new user. Request POST /users/ Parameters Name Type Value Notes userItem object Name Type Notes LoginName string The new users login name. FullName string The full name for the new user. Groups array The groups the new user is a member of. Password string The password for the new user. User to create Responses Status Code Description Samples 201 New user created 400 Bad request 401 Unauthorized"
  },
  "http-api/swagger/Get a user.html": {
    "href": "http-api/swagger/Get a user.html",
    "title": "Get a user | Event Store",
    "keywords": "Get a user Returns the user currently authenticated with the API, or the user specified. Request GET /users/{login} Parameters Name Type Value Notes *login string The user passed to the API call. Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Update a user.html": {
    "href": "http-api/swagger/Update a user.html",
    "title": "Update a user | Event Store",
    "keywords": "Update a user Update the FullName of Groups of the specified user. Request PUT /users/{login} Parameters Name Type Value Notes *login string The user's name userUpdateItem object Name Type Notes FullName string The full name of the new user. Groups array The groups the new user should become a member of. User to update Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Delete a user.html": {
    "href": "http-api/swagger/Delete a user.html",
    "title": "Delete a user | Event Store",
    "keywords": "Delete a user Delete specified user. Request DELETE /users/{login} Parameters Name Type Value Notes *login string The user's name Responses Status Code Description Samples 204 User deleted"
  },
  "http-api/swagger/Enable a user.html": {
    "href": "http-api/swagger/Enable a user.html",
    "title": "Enable a user | Event Store",
    "keywords": "Enable a user Enable the acount of the specified user. Request PUT /users/{login}/command/enable Parameters Name Type Value Notes *login string The user's name Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Disable a user.html": {
    "href": "http-api/swagger/Disable a user.html",
    "title": "Disable a user | Event Store",
    "keywords": "Disable a user Disable the acount of the specified user. Request PUT /users/{login}/command/disable Parameters Name Type Value Notes *login string The user's name Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Reset password.html": {
    "href": "http-api/swagger/Reset password.html",
    "title": "Reset password | Event Store",
    "keywords": "Reset password Reset the password of the specified user. Request POST /users/{login}/command/reset-password Parameters Name Type Value Notes *login string The user's name *newPassword object Name Type Notes NewPassword string The new password for the user The new password for the user Responses Status Code Description Samples 200 OK 400 Bad request"
  },
  "http-api/swagger/Change password.html": {
    "href": "http-api/swagger/Change password.html",
    "title": "Change password | Event Store",
    "keywords": "Change password Change the password of the specified user. Request POST /users/{login}/command/change-password Parameters Name Type Value Notes *login string The user's name *newPassword object Name Type Notes CurrentPassword string The current password for the user NewPassword string The new password for the user The new password for the user Responses Status Code Description Samples 200 OK 400 Bad request"
  },
  "http-api/swagger/Get all projections.html": {
    "href": "http-api/swagger/Get all projections.html",
    "title": "Get all projections | Event Store",
    "keywords": "Get all projections Returns all projections defined in Event Store. Request GET /projections/any Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Get all non-transient projections.html": {
    "href": "http-api/swagger/Get all non-transient projections.html",
    "title": "Get all non-transient projections | Event Store",
    "keywords": "Get all non-transient projections Returns all known projections except ad-hoc projections. Request GET /projections/all-non-transient Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Get all queries.html": {
    "href": "http-api/swagger/Get all queries.html",
    "title": "Get all queries | Event Store",
    "keywords": "Get all queries Returns all queries defined in Event Store. Request GET /projections/onetime Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Create a onetime projection.html": {
    "href": "http-api/swagger/Create a onetime projection.html",
    "title": "Create a onetime projection | Event Store",
    "keywords": "Create a onetime projection Create a new onetime projection. Request POST /projections/onetime[?name&type&enabled&checkpoints&emit&trackemittedstreams] Parameters Name Type Value Notes name string Name of the projection type string The projection type enabled boolean Is the projection enabled checkpoints boolean Are checkpoints enabled emit boolean Is emit enabled trackemittedstreams boolean Should your projection create a separate stream and write any streams it emits to that stream. Responses Status Code Description Samples 201 New projection created 400 Bad request"
  },
  "http-api/swagger/Get all continious projections.html": {
    "href": "http-api/swagger/Get all continious projections.html",
    "title": "Get all continious projections | Event Store",
    "keywords": "Get all continious projections Returns all continually running projections defined in Event Store. Request GET /projections/continuous Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Create a continious projection.html": {
    "href": "http-api/swagger/Create a continious projection.html",
    "title": "Create a continious projection | Event Store",
    "keywords": "Create a continious projection Create a new continious projection. Request POST /projections/continuous[?name&enabled&checkpoints&emit&type&trackemittedstreams] Parameters Name Type Value Notes name string Name of the projection enabled boolean Is the projection enabled checkpoints boolean Are checkpoints enabled emit boolean Is emit enabled type string The projection type trackemittedstreams boolean Should your projection create a separate stream and write any streams it emits to that stream. Responses Status Code Description Samples 201 New projection created 400 Bad request"
  },
  "http-api/swagger/Read projection events based on a query.html": {
    "href": "http-api/swagger/Read projection events based on a query.html",
    "title": "Read projection events based on a query | Event Store",
    "keywords": "Read projection events based on a query Read events from projection based on a query definition, i.e. fromAll, fromStream, fromStreams Request POST /projections/read-events Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Get all transient projections.html": {
    "href": "http-api/swagger/Get all transient projections.html",
    "title": "Get all transient projections | Event Store",
    "keywords": "Get all transient projections Returns all transient projections defined in Event Store. Request GET /projections/transient Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Create a transient projection.html": {
    "href": "http-api/swagger/Create a transient projection.html",
    "title": "Create a transient projection | Event Store",
    "keywords": "Create a transient projection Create a new transient projection. Request POST /projections/transient[?name&type&enabled] Parameters Name Type Value Notes name string Name of the projection type string The projection type enabled boolean Is the projection enabled Responses Status Code Description Samples 201 New user created 400 Bad request"
  },
  "http-api/swagger/Get projection definition.html": {
    "href": "http-api/swagger/Get projection definition.html",
    "title": "Get projection definition | Event Store",
    "keywords": "Get projection definition Returns definition of the specified projection. Request GET /projection/{name}/query[?config] Parameters Name Type Value Notes *name string The name of the projection config boolean Wether to return the projection definition config. Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Update projection definition.html": {
    "href": "http-api/swagger/Update projection definition.html",
    "title": "Update projection definition | Event Store",
    "keywords": "Update projection definition Update the specified projection definition. Request PUT /projection/{name}/query[?type&emit] Parameters Name Type Value Notes *name string The name of the projection type string The projection type emit boolean Is emit enabled Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Get the projection state.html": {
    "href": "http-api/swagger/Get the projection state.html",
    "title": "Get the projection state | Event Store",
    "keywords": "Get the projection state Return the current state of the specified projection. Request GET /projection/{name}/state[?partition] Parameters Name Type Value Notes *name string The name of the projection partition string The partition name in state Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Get result of projection.html": {
    "href": "http-api/swagger/Get result of projection.html",
    "title": "Get result of projection | Event Store",
    "keywords": "Get result of projection Get the final result of a projection. Request GET /projection/{name}/result[?partition] Parameters Name Type Value Notes *name string The name of the projection partition string The partition name in state Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Get projection statistics.html": {
    "href": "http-api/swagger/Get projection statistics.html",
    "title": "Get projection statistics | Event Store",
    "keywords": "Get projection statistics Returns the statistics for a projection, such as how many events, the status etc. Request GET /projection/{name}/statistics Parameters Name Type Value Notes *name string The name of the projection Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Disable projection.html": {
    "href": "http-api/swagger/Disable projection.html",
    "title": "Disable projection | Event Store",
    "keywords": "Disable projection Disable the specified projection. Request POST /projection/{name}/command/disable[?enableRunAs] Parameters Name Type Value Notes *name string The name of the projection enableRunAs boolean Run as the user issuing the command. Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Enable projection.html": {
    "href": "http-api/swagger/Enable projection.html",
    "title": "Enable projection | Event Store",
    "keywords": "Enable projection Enable the specified projection. Request POST /projection/{name}/command/enable[?enableRunAs] Parameters Name Type Value Notes *name string The name of the projection enableRunAs boolean Run as the user issuing the command. Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Reset projection.html": {
    "href": "http-api/swagger/Reset projection.html",
    "title": "Reset projection | Event Store",
    "keywords": "Reset projection Reset the specified projection. Request POST /projection/{name}/command/reset[?enableRunAs] Parameters Name Type Value Notes *name string The name of the projection enableRunAs boolean Run as the user issuing the command. Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Abort projection.html": {
    "href": "http-api/swagger/Abort projection.html",
    "title": "Abort projection | Event Store",
    "keywords": "Abort projection Abort the specified projection. Request POST /projection/{name}/command/abort[?enableRunAs] Parameters Name Type Value Notes *name string The name of the projection enableRunAs boolean Run as the user issuing the command. Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/deleting-a-stream/index.html": {
    "href": "http-api/deleting-a-stream/index.html",
    "title": "Deleting a stream | Event Store",
    "keywords": "Deleting a stream Soft deleting To delete a stream over the Atom interface, issue a DELETE request to the resource. Request Response curl -X DELETE \"http://127.0.0.1:2113/streams/newstream\" HTTP/1.1 204 Stream deleted Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Content-Type: text/plain; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Fri, 27 Jul 2018 11:51:02 GMT Content-Length: 0 Connection: close By default when you delete a stream, Event Store soft deletes it. This means you can recreate it later by setting the $tb metadata section in the stream. If you try to GET a soft deleted stream you receive a 404 response: Request Response curl -X GET \"http://127.0.0.1:2113/streams/newstream\" -H 'Accept: application/vnd.eventstore.events+json' HTTP/1.1 410 Deleted Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Content-Type: text/plain; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Fri, 27 Jul 2018 12:04:10 GMT Content-Length: 0 Connection: close You can recreate the stream by appending new events to it (like creating a new stream): Request Response curl -i -d \"@event-append.json\" \"http://127.0.0.1:2113/streams/newstream\" -H \"Content-Type:application/vnd.eventstore.events+json\" -H \"ES-EventType: SomeEvent\" HTTP/1.1 201 Created Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER Access-Control-Allow-Origin: * Location: http://127.0.0.1:2113/streams/newstream/1 Content-Type: text/plain; charset: utf-8 Server: Mono-HTTPAPI/1.0 Date: Fri, 28 Jun 2013 12:32:18 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100 The version numbers do not start at zero but at where you soft deleted the stream from Hard deleting You can hard delete a stream. To issue a permanent delete use the ES-HardDelete header. Warning A hard delete is permanent and the stream is not removed during a scavenge. If you hard delete a stream, you cannot recreate the stream. Issue the DELETE as before but with the permanent delete header: Request Response curl -X DELETE http://127.0.0.1:2113/streams/newstream -H \"ES-HardDelete:true\" HTTP/1.1 204 Stream deleted Content-Length: 0 Content-Type: text/plain; charset=utf-8 Server: Microsoft-HTTPAPI/2.0 Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER, Authorization Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location Date: Thu, 13 Mar 2014 20:56:55 GMT The stream is now permanently deleted, and now the response is a 410 . Request Response curl -X GET \"http://127.0.0.1:2113/streams/newstream\" -H 'Accept: application/vnd.eventstore.events+json' HTTP/1.1 410 Deleted Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Content-Type: text/plain; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Fri, 27 Jul 2018 12:04:10 GMT Content-Length: 0 Connection: close If you try to recreate the stream as in the above example you also receive a 410 response. Request Response curl -i -d \"@event-append.json\" \"http://127.0.0.1:2113/streams/newstream\" -H \"Content-Type:application/vnd.eventstore.events+json\" -H \"ES-EventType: SomeEvent\" HTTP/1.1 410 Deleted Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER Access-Control-Allow-Origin: * Location: http://127.0.0.1:2113/streams/newstream/1 Content-Type: text/plain; charset: utf-8 Server: Mono-HTTPAPI/1.0 Date: Fri, 28 Jun 2013 12:32:18 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100"
  },
  "event-sourcing-basics/impendence-missmatch/index.html": {
    "href": "event-sourcing-basics/impendence-missmatch/index.html",
    "title": "Impedance mismatch | Event Store",
    "keywords": "Impedance mismatch Using events as a storage mechanism offers different properties when compared to a typical relational model, as the impedance mismatch that exists between a typical relational model and the object oriented domain model is analyzed. Scott Ambler describes the problem in an essay on agiledata.org as: Why does this impedance mismatch exist? The object-oriented paradigm is based on proven software engineering principles. The relational paradigm, however, is based on proven mathematical principles. Because the underlying paradigms are different the two technologies do not work together seamlessly. The impedance mismatch becomes apparent when you look at the preferred approach to access: With the object paradigm you traverse objects via their relationships whereas with the relational paradigm you join the data rows of tables. This fundamental difference results in a non-ideal combination of object and relational technologies, although when have you ever used two different things together without a few hitches? Ambler The impedance mismatch between the domain model and the relational database has a large cost associated with it. There are many tools that aim to help minimize the effects of the impedance mismatch such as Object Relational Mappers (ORMs). They tend to work well in most situations but there is a large cost associated to the impedance mismatch even when using tools such as ORMs. The cost is that a developer needs to be intimately familiar with both the relational model and the object oriented model. They also need to be familiar with the subtle differences between the two models. Scott identifies this with: To succeed using objects and relational databases together you need to understand both paradigms, and their differences, and then make intelligent tradeoffs based on that knowledge. Ambler You can find some of these subtle differences on Wikipedia under the \" Object-Relational Impedance Mismatch \" page but to include some of the major differences: Declarative vs. imperative interfaces Relational thinking tends to use data as interfaces, not behaviour as interfaces. It thus has a declarative tilt in design philosophy in contrast to Object-oriented programming’s behavioural tilt. (Some relational proponents propose using triggers, stored procedures, etc. to provide complex behaviour, but this is not a common viewpoint.) Object-Relational Impedance Mismatch Structure vs. behaviour - Object-oriented programming primarily focuses on ensuring that the structure of the program is reasonable (maintainable, understandable, extensible, reusable, safe), whereas relational systems focus on what kind of behaviour the resulting run-time system has (efficiency, adaptability, fault-tolerance, liveness, logical integrity, etc.). Object-oriented methods generally assume that the primary user of the object-oriented code and its interfaces are the application developers. In relational systems, the end-user’s view of the behaviour of the system is sometimes considered to be more important. However, relational queries and \"views\" are common techniques to re-represent information in application- or task-specific configurations. Further, relational does not prohibit local or application-specific structures or tables from being created, although many common development tools do not directly provide such a feature, assuming objects will be used instead. This makes it difficult to know whether the stated non-developer perspective of relational is inherent to relational, or merely a product of current practice and tObject-oriented programmingl implementation assumptions. Object-Relational Impedance Mismatch Set vs. graph relationships The relationship between different items (objects or records) tend to be handled differently between the paradigms. Relational relationships are usually based on idioms taken from set theory, while object relationships lean toward idioms adopted from graph theory (including trees). While each can represent the same information as the other, the approaches they provide to access and manage information differ. Object-Relational Impedance Mismatch There are many other subtle differences such as data types, identity, and how transactions work. The object-relational impedance mismatch can be quite a pain to deal with and it requires a very large amount of knowledge to deal with effectively. There is not an impedance mismatch between events and the domain model. The events are themselves a domain concept. The idea of replaying events to reach a given state is also a domain concept. The entire system becomes defined in domain terms. Defining everything in domain terms not only lowers the amount of knowledge that developers need to have but it also limits the number of representations of the model needed as the events are directly tied to the domain model itself."
  },
  "event-sourcing-basics/events-as-a-storage-mechanism/index.html": {
    "href": "event-sourcing-basics/events-as-a-storage-mechanism/index.html",
    "title": "Events as a storage mechanism | Event Store",
    "keywords": "Events as a storage mechanism When most people consider storage for an object they tend to think about it in a structural sense. That is when considering how to store the sale discussed above they think of it as a \"Sale\" that has \"Line Items\" and perhaps \"Shipping Information\" associated with it. This is not the only way to conceptualize the problem and other solutions offer different and often interesting architectural properties. Consider the creation of a small \"Order\" object for a web-based sale system. Most developers would envision something similar to the image below. An \"Order\" has \"n Line Items\" and \"Shipping Information\". <!-- ![A simplified structural model of an order][1] --> This is not the only way to view this data. Earlier we discussed the concept of a transaction. Developers deal with the concept of transactions regularly, you can view them as representing the change between a point and the next subsequent point, and they are often referred to as “deltas”. You can define the delta between two static states, but frequently this is an implicit concept, relegated to a framework such as Hibernate in the Java world or Entity Framework in the Microsoft world. These frameworks save the original state and then calculate the differences with the new state and update the backing data model accordingly. Making these deltas explicit can be valuable for technical and business benefits. You can see the usage of deltas in many mature business models. The canonical example of delta usage is in the field of accounting. When looking at a ledger such as below, each transaction or delta is recorded. Next to it is a denormalized total of the state of the account at the end of that delta. To calculate this value, the current delta is applied to the last known value. The last known value can be trusted because at any given point you could re-run the transactions from the \"beginning of time\" for that account to reconcile the validity of that value. A verifiable audit log always exists. Date Comment Change Current Balance 1/Jan/2000 Deposit from 1372 +10,000.00 10,000.00 3/Jan/2000 Check 1 -4,000.00 6,000.00 4/Jan/2000 Purchase Coffee -3.00 5,997.00 4/Jan/2000 Purchase Internet -5.00 5,992.00 8/Jan/2000 Deposit from 1373 +1,000.00 6,992.00 Because the transactions or deltas associated with the account exist, you can step through them, verifying the result at each stage. You can derive the “Current Balance” at any point by looking at the “Current Balance” or by adding up all the “Changes” since the beginning of time for the account. The second property is valuable in a domain such as accounting as accountants are dealing with money and the ability to check that calculations were performed correctly is invaluable. It was more valuable before computers when it was common place to have an exhausted accountant make a mistake in a calculation at 3am when they should be sleeping. There are other interesting properties to this mechanism of representing state. As an example, it's possible to go back and look at what a state was at a given. Consider for example, that the account has reached a balance below zero and there is a rule that says it's not supposed to. It is relatively easy to view the state the account was in prior to processing the transaction that put it into the invalid state. This makes it far easier to reproduce what often end up as heisenbugs in other circumstances. These types of benefits are not only limited to naturally transaction based domains. Every domain is a naturally transaction-based domain when Domain Driven Design is applied. When applying Domain Driven Design there is a heavy focus on behaviours normally coinciding with use cases, Domain Driven Design is interested in how users use the system. Returning to the order example from earlier, you could represent the same order in the form of a transactional model as below: <!-- ![Transactional view of an order][2] --> You can apply this to any type of object. By replaying through the events, you can return the object to the last known state. It is mathematically equivalent to storing the end of the equation or the equation that represents it. There is a structural representation of the object but it exists only by replaying previous transactions to return the structure to its last known state. Data is not persisted in a structure but as a series of transactions. One interesting possibility is that unlike when storing current state in a structural way, there is no coupling between the representation of current state in the domain and in storage. The representation of current state in the domain can vary without thought of the persistence mechanism. It is important to note the language in Figure 3. All of the verbs are in the past tense. These are Domain Events. Consider what would happen if the language were in the imperative tense, \"Add 2 socks item 137\", \"Create Cart\". What if there were behaviours associated with adding an item, such as reserving it from an inventory system via a webservice call? Should you include these behaviours when reconstituting an object? What if logic has changed so that this item could no longer be added given the context? This is one of many examples where dual contexts between commands and events are required, there is a contextual difference between returning to a given state and attempting to transition to a new one. There is no delete A common question that arises is how to delete information. It is not possible, as previously, to jump into the time machine and say that an event never happened (e.g. delete a previous event). As such, it is necessary to model a delete explicitly as a new transaction as shown below. Further discussion on the business value of handling deletes in this mechanism can be found in \" Business Value of the Event Log \". <!-- ![Transactional view of an order with delete][3] --> In the event stream above, the two pairs of socks were added then later removed. The end state is equivalent to not having added the two pairs of socks. However, the data was not deleted, new data was added to bring the object to the state as if the first event had not happened, this process is known as a \"Reversal Transaction\". By placing a reversal transaction in the event stream, not only is the object returned to the state as if the item had not been added, the reversal leaves a trail that shows that the object had been in that state at a given point in time."
  },
  "event-sourcing-basics/event-store-as-a-functional-database/index.html": {
    "href": "event-sourcing-basics/event-store-as-a-functional-database/index.html",
    "title": "Event Store as a functional database | Event Store",
    "keywords": "Event Store as a functional database Much of what we have discussed can be looked at through a functional programming perspective as well. For developers in functional languages such as Scala or Haskell this should feel natural to you, for C# developers it should feel familiar, and for Java developers I hear that Scala is a nice language. All kidding aside… When we “replay” an event stream we are returning a series of events. An event is essentially a serialized method call. We left fold something that redefines what those methods mean to us today in order to get our current state. This can be seen explicitly when looking at how the projections work in JavaScript. We define a function as: when([SomePatternMatch], function(state, event) { return new state; }); These functions are then chained over the event stream resulting at the end with a state object. The state is passed from one function to the next allowing each function to transform it. Said differently, Current State is a [left fold][6] of previous facts. We can further continue this to say that a snapshot is nothing but a memoization of the left fold. When looked at from this perspective one could state that an Event Store is actually a functional database."
  },
  "event-sourcing-basics/business-value-of-the-event-log/index.html": {
    "href": "event-sourcing-basics/business-value-of-the-event-log/index.html",
    "title": "Business value of the event log | Event Store",
    "keywords": "Business value of the event log Note The value of an event log is directly correlated with use cases that you would want to use Domain Driven Design in the first place. You should use Domain Driven Design in cases where the business derives competitive advantage. Domain Driven Design itself is difficult and expensive to apply, but a company will receive high ROI on the effort if the domain is complex and if they derive competitive advantage from it. Using an Event Log similarly will have high ROI when dealing with an area of competitive advantage but may have negative ROI in other places. Storing only current state limits organizations to asking certain kinds of questions about the data. For example consider orders in the stock market. They can change for a few reasons. An order can change the volume to buy/sell, the trading system can automatically adjust the volume of an order, or a trade could occur lowering the volume available on the current order. If posed with a question regarding current liquidity, such as the price for a given number of shares in the market, it does not matter which of these changes occurred. It does not matter how the data got the way it was. It matters what it is at a given point in time. A vast majority of queries even in the business world are focused on the what labels to send customers mails, how much was sold in April, how many widgets are in the warehouse. There are however other types of queries that are becoming more and more popular in business. They focus on the how. Examples can commonly be seen in the buzzword “Business Intelligence”. Perhaps there is a correlation between people having done an action and their likelihood of purchasing some product? These types of questions generally focus on how something came into being as opposed to what it came out to be. It is best to go through an example. There is a development team at a large online retailer. In an iteration planning meeting a domain expert comes up with an idea. He believes that there is a correlation between people having added then removed an item from their cart and their likelihood of responding to suggestions of that product by purchasing it at a later point. The feature is added to the following iteration. The first hypothetical team is utilizing a stereotypical current state based mechanism for storing state. They plan that in this iteration they will add tracking of items via a fact table that are removed from carts. They plan for the next iteration that they will then build a report. The business will receive after the second iteration a report that can show them information back to the previous iteration when the team released the functionality that began tracking items being removed from carts. This is a very stereotypical process. At some organizations the report and the tracking may be released simultaneously but this is a relatively small detail in the handling. From a business perspective the domain experts are happy. They made a request of the team and the team was able to quickly fulfill the request. New functionality has been added in a quick and relatively painless way. The second team will however have quite a different result. The second team has been storing events; they represent their current state by building up off of a series of events. They just like the first team go through and add tracking of items removed from carts via a fact table but they also run this handler from the beginning of the event log to back populate all of the data from the time that the business started. They release the report in the same iteration and the report has data that dates back for years. The second team can do this because they have managed to store what the system actually did as opposed to what the current state of data is. It is possible to go back and look and interpret the old data in new and interesting ways. It was never considered to track what items were removed from carts or perhaps the number of times a user removes and items from their cart was considered important. These are both examples of new and interesting ways of looking at data. As the events represent every action the system has undertaken any possible model describing the system can be built from the events. Businesses regularly come up with new and interesting ways of looking at data. It is not possible with any level of confidence to predict how a business will want to look at today’s data in five years. The ability for the business to look at the data in the way that it wants in five years is of an unknown but possibly extremely high value; it has already been stated that this should be done in areas where the business derives its competitive advantage so it is relatively easy to reason that the ability to look at today’s data in an unexpected way could be a competitive advantage for the business. How do you value the possible success or failure of a company based upon an architectural decision now? How do software teams justify looking at their Magic 8 Ball to predict what the business will need in five or even ten years? Many try to use YAGNI (You Ain’t Gonna Need It) but YAGNI only applies when you actually know that you won’t need it. How can the dynamic world of business and how they may want to look at data in five or ten years be predicted? Is it more expensive to actually model every behavior in the system? Yes. Is it more expensive in terms of disk cost and thought process to store every event in the system? Yes. Are these costs worth the ROI when the business derives a competitive advantage from the data?"
  },
  "server/system-streams/index.html": {
    "href": "server/system-streams/index.html",
    "title": "System stream and event types | Event Store",
    "keywords": "System stream and event types $persistentSubscriptionConfig $persistentSubscriptionConfig is a special paged stream that contains all configuration events, for all persistent subscriptions. It uses the following system event types: PersistentConfig : An event that records a configuration event, the event data contains: version : Version of event data updated : Updated date updatedBy : User who updated configuration maxCount : The number of configuration events to save entries : Configuration items set by event. Find more details of configuration items for the .NET API and the HTTP API . $all $all is a special paged stream for all events. You can use the same paged form of reading described above to read all events for a node by pointing the stream at /streams/$all . As it's a stream like any other, you can perform all operations, except posting to it. $settings The $settings stream has a special ACL used as the default ACL. This stream controls the default ACL for streams without an ACL and also controls who can create streams in the system, the default state of these is shown below: { \"$userStreamAcl\": { \"$r\": \"$all\", \"$w\": \"$all\", \"$d\": \"$all\", \"$mr\": \"$all\", \"$mw\": \"$all\" }, \"$systemStreamAcl\": { \"$r\": \"$admins\", \"$w\": \"$admins\", \"$d\": \"$admins\", \"$mr\": \"$admins\", \"$mw\": \"$admins\" } } You can rewrite these to the $settings stream with the following cURL command: curl -i \"http://127.0.0.1:2113/streams/%24settings\" \\ --user admin:changeit \\ -H \"Content-Type: application/vnd.eventstore.events+json\" \\ -d $'[{ \"eventId\": \"7c314750-05e1-439f-b2eb-f5b0e019be72\", \"eventType\": \"update-default-acl\", \"data\": { \"$userStreamAcl\" : { \"$r\" : [\"$admin\", \"$ops\", \"service-a\", \"service-b\"], \"$w\" : [\"$admin\", \"$ops\", \"service-a\", \"service-b\"], \"$d\" : [\"$admin\", \"$ops\"], \"$mr\" : [\"$admin\", \"$ops\"], \"$mw\" : [\"$admin\", \"$ops\"] }, \"$systemStreamAcl\" : { \"$r\" : \"$admins\", \"$w\" : \"$admins\", \"$d\" : \"$admins\", \"$mr\" : \"$admins\", \"$mw\" : \"$admins\" } } }]' The $userStreamAcl controls the default ACL for user streams, while all system streams use the $systemStreamAcl as the default. Note The $w in $userStreamAcl also applies to the ability to create a stream. Members of $admins always have access to everything, you cannot remove this permission. When you set a permission on a stream, it overrides the default values. However, it's not necessary to specify all permissions on a stream. It's only necessary to specify those which differ from the default. $stats Event Store has debug and statistics information available about a cluster in the $stats stream, find out more in the stats guide . $scavenges $scavenges is a special paged stream for all scavenge related events. It uses the following system event types: $scavengeIndexInitialized : An event that records the initialisation of the scavenge index. $scavengeStarted : An event that records the beginning of a scavenge event, the event data contains: scavengeId : Scavenge event ID nodeEndpoint : Node address $scavengeCompleted : An event that records the completion of a scavenge event, the event data contains: scavengeId : Scavenge event ID nodeEndpoint : Node address result : Success , Failed , Stopped error : Error details timeTaken : Time taken for the scavenge event in milliseconds spaceSaved : Space saved by scavenge event in bytes"
  },
  "server/users-and-access-control-lists/index.html": {
    "href": "server/users-and-access-control-lists/index.html",
    "title": "Users and access control lists | Event Store",
    "keywords": "Users and access control lists Default users Event Store provides two default users, $ops and $admin . $admin has full access to everything in Event Store. It can read and write to protected streams, which is any stream that starts with $, such as $projections-master . Protected streams are usually system streams, for example, $projections-master manages some of the projections' states. The $admin user can also run operational commands, such as scavenges and shutdowns on Event Store. An $ops user can do everything that an $admin can do except manage users and read from system streams (except for $scavenges and $scavenges-streams ). New users New users created in Event Store are standard non-authenticated users. Non-authenticated users are allowed GET access to the /info , /ping , /stats , /elections , and /gossip system streams. POST access to the /elections and /gossip system streams is only allowed on the internal HTTP service. By default, any user can read any non-protected stream unless there is an ACL preventing that. Stream ACLs Event Store keeps the ACL of a stream in the streams metadata as JSON with the below definition: { \"$acl\": { \"$w\": \"$admins\", \"$r\": \"$all\", \"$d\": \"$admins\", \"$mw\": \"$admins\", \"$mr\": \"$admins\" } } These fields represent the following: $w The permission to write to this stream. $r The permission to read from this stream. $d The permission to delete this stream. $mw The permission to write the metadata associated with this stream. $mr The permission to read the metadata associated with this stream. You can update these fields with either a single string or an array of strings representing users or groups ( $admins , $all , or custom groups). It's possible to put an empty array into one of these fields, and this has the effect of removing all users from that permission. Note We recommend you don't give people access to $mw as then they can then change the ACL. Example The ACL below gives writer read and write permission on the stream, while reader has read permission on the stream. Only users in the $admins group can delete the stream or read and write the metadata. HTTP API Response .NET API Inside a file named metadata.json : [ { \"eventId\": \"7c314750-05e1-439f-b2eb-f5b0e019be72\", \"eventType\": \"update-acl\", \"metadata\": { \"$acl\": { \"$w\": \"writer\", \"$r\": [ \"reader\", \"also-reader\" ], \"$d\": \"$admins\", \"$mw\": \"$admins\", \"$mr\": \"$admins\" } } } ] curl -i -d @metadata.json http://127.0.0.1:2113/streams/newstream/metadata --user admin:changeit -H \"Content-Type: application/vnd.eventstore.events+json\" HTTP/1.1 201 Created Access-Control-Allow-Methods: GET, POST, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Location: http://127.0.0.1:2113/streams/%24%24newstream/0 Content-Type: text/plain; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Tue, 18 Sep 2018 09:38:56 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100 <!-- TODO: Refactor into demo application --> StreamMetadata metadata = StreamMetadata.Build() .SetCustomPropertyWithValueAsRawJsonString(\"customRawJson\", @\"{ \"\"$acl\"\": { \"\"$w\"\": \"\"writer\"\", \"\"$r\"\": [ \"\"reader\"\", \"\"also-reader\"\" ], \"\"$d\"\": \"\"$admins\"\", \"\"$mw\"\": \"\"$admins\"\", \"\"$mr\"\": \"\"$admins\"\" }}\"); conn.SetStreamMetadataAsync(streamName, ExpectedVersion.Any, metadata, adminCredentials); Default ACL The $settings stream has a special ACL used as the default ACL. This stream controls the default ACL for streams without an ACL and also controls who can create streams in the system, the default state of these is shown below: { \"$userStreamAcl\": { \"$r\": \"$all\", \"$w\": \"$all\", \"$d\": \"$all\", \"$mr\": \"$all\", \"$mw\": \"$all\" }, \"$systemStreamAcl\": { \"$r\": \"$admins\", \"$w\": \"$admins\", \"$d\": \"$admins\", \"$mr\": \"$admins\", \"$mw\": \"$admins\" } } You can rewrite these to the $settings stream with the following cURL command: curl -i \"http://127.0.0.1:2113/streams/%24settings\" \\ --user admin:changeit \\ -H \"Content-Type: application/vnd.eventstore.events+json\" \\ -d $'[{ \"eventId\": \"7c314750-05e1-439f-b2eb-f5b0e019be72\", \"eventType\": \"update-default-acl\", \"data\": { \"$userStreamAcl\" : { \"$r\" : [\"$admin\", \"$ops\", \"service-a\", \"service-b\"], \"$w\" : [\"$admin\", \"$ops\", \"service-a\", \"service-b\"], \"$d\" : [\"$admin\", \"$ops\"], \"$mr\" : [\"$admin\", \"$ops\"], \"$mw\" : [\"$admin\", \"$ops\"] }, \"$systemStreamAcl\" : { \"$r\" : \"$admins\", \"$w\" : \"$admins\", \"$d\" : \"$admins\", \"$mr\" : \"$admins\", \"$mw\" : \"$admins\" } } }]' The $userStreamAcl controls the default ACL for user streams, while all system streams use the $systemStreamAcl as the default. Note The $w in $userStreamAcl also applies to the ability to create a stream. Members of $admins always have access to everything, you cannot remove this permission. When you set a permission on a stream, it overrides the default values. However, it's not necessary to specify all permissions on a stream. It's only necessary to specify those which differ from the default. Example Note All these examples assume you have created a user named ouro . The examples also assume the password is ouroboros . { \"$userStreamAcl\": { \"$r\": \"$all\", \"$w\": \"ouro\", \"$d\": \"ouro\", \"$mr\": \"ouro\", \"$mw\": \"ouro\" }, \"$systemStreamAcl\": { \"$r\": \"$admins\", \"$w\": \"$admins\", \"$d\": \"$admins\", \"$mr\": \"$admins\", \"$mw\": \"$admins\" } } This default ACL gives ouro and $admins create and write permissions on all streams, while everyone else can read from them. Be careful allowing default access to system streams to non-admins as they would also have access to $settings unless you specifically override it. Request Response .NET API [ { \"eventId\": \"7c314750-05e1-439f-b2eb-f5b0e019be72\", \"eventType\": \"update-default-acl\", \"data\": { \"$userStreamAcl\": { \"$r\": \"$all\", \"$w\": \"ouro\", \"$d\": \"ouro\", \"$mr\": \"ouro\", \"$mw\": \"ouro\" }, \"$systemStreamAcl\": { \"$r\": \"$admins\", \"$w\": \"$admins\", \"$d\": \"$admins\", \"$mr\": \"$admins\", \"$mw\": \"$admins\" } } } ] curl -i -d @override-default.json http://127.0.0.1:2113/streams/%24settings/metadata --user admin:changeit -H \"Content-Type: application/vnd.eventstore.events+json\" Warning You should not copy/paste the UUID in the command line above but generate a new one or not provide one (you will be redirected to a URI with one as described in writing events in the HTTP API). HTTP/1.1 201 Created Access-Control-Allow-Methods: GET, POST, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Location: http://127.0.0.1:2113/streams/%24%24%24users/0 Content-Type: text/plain; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Thu, 23 Aug 2018 10:35:19 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100 <!-- TODO: Refactor into demo application --> StreamMetadata metadata = StreamMetadata.Build() .SetCustomPropertyWithValueAsRawJsonString(\"customRawJson\", @\"{ \"\"$userStreamAcl\"\": { \"\"$r\"\": \"\"$all\"\", \"\"$w\"\": \"\"ouro\"\", \"\"$d\"\": \"\"ouro\"\", \"\"$mr\"\": \"\"ouro\"\", \"\"$mw\"\": \"\"ouro\"\" }, \"\"$systemStreamAcl\"\": { \"\"$r\"\": \"\"$admins\"\", \"\"$w\"\": \"\"$admins\"\", \"\"$d\"\": \"\"$admins\"\", \"\"$mr\"\": \"\"$admins\"\", \"\"$mw\"\": \"\"$admins\"\" } }}\"); conn.SetStreamMetadataAsync(\"%24settings\", ExpectedVersion.Any, metadata, adminCredentials); If you try to access the $settings stream as an unauthorized user, Event Store returns a 401 response. Request Response curl -i http://127.0.0.1:2113/streams/%24settings -u ouro:ouroboros HTTP/1.1 401 Unauthorized Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTo, ES-ExpectedVersion Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position WWW-Authenticate: Basic realm=\"ES\" Content-Type: text/plain; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Mon, 02 Mar 2015 15:21:27 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100 If you wanted to give ouro access by default to system streams, POST the following JSON: { \"$userStreamAcl\": { \"$r\": \"$all\", \"$w\": \"ouro\", \"$d\": \"ouro\", \"$mr\": \"ouro\", \"$mw\": \"ouro\" }, \"$systemStreamAcl\": { \"$r\": [\"$admins\", \"ouro\"], \"$w\": \"$admins\", \"$d\": \"$admins\", \"$mr\": \"$admins\", \"$mw\": \"$admins\" } } At which point ouro can read system streams by default: Request Response curl -i http://127.0.0.1:2113/streams/%24settings -u ouro:ouroboros HTTP/1.1 200 OK Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTo, ES-ExpectedVersion Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position Cache-Control: max-age=0, no-cache, must-revalidate Vary: Accept ETag: \"1;-1296467268\" Content-Type: application/atom+xml; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Mon, 02 Mar 2015 15:25:17 GMT Content-Length: 1286 Keep-Alive: timeout=15,max=100 You can also limit ACLs on particular streams which are then merged with the default ACLs. { \"$acl\": { \"$r\": [\"reader\", \"also-reader\"] } } If you add the above to a stream's ACL, then it overrides the read permission on that stream to allow reader and also-reader to read streams, but not ouro , resulting in the effective ACL below. { \"$acl\": { \"$r\": [\"reader\", \"also-reader\"], \"$w\": \"ouro\", \"$d\": \"ouro\", \"$mr\": \"ouro\", \"$mw\": \"ouro\" } } Warning Caching is allowed on a stream if you have enabled it to be visible to $all . This is as a performance optimization to avoid having to set cache=private on all data. If people are bookmarking your URIs and they were cached by an intermediary then they may still be accessible after you change the permissions from $all . While clients should not be bookmarking URIs in this way, it's an important consideration."
  },
  "server/setting-up-varnish-in-linux/index.html": {
    "href": "server/setting-up-varnish-in-linux/index.html",
    "title": "Setting up Varnish in Linux | Event Store",
    "keywords": "Setting up Varnish in Linux Note This guide uses the latest Ubuntu LTS (18.04) You use a reverse proxy to limit access to Event Store without breaking HTTP caching (authenticate to the proxy not to Event Store itself). Since Event Store runs HTTP only on the loopback adapter, users must enter through the reverse proxy to reach Event Store. This document provides a brief guide on how to install Event Store with the varnish reverse proxy in a Linux environment. For more information on how to properly configure varnish for your requirements, read the Varnish documentation . Ben Clark's Gist contains a varnish configuration that includes basic authentication as well as some other niceties such as adding headers for hits/misses. Install Varnish sudo apt-get update sudo apt-get install varnish Configure Varnish Open /etc/default/varnish and edit the section that looks like the below to the port with the port you want to run on: DAEMON_OPTS=\"-a :80 \\ -T localhost:6082 \\ -f /etc/varnish/default.vcl \\ -S /etc/varnish/secret \\ -s malloc,256m\" Open /etc/varnish/default.vcl and edit the backend section to match Event Store: backend default { .host = \"127.0.0.1\"; .port = \"2114\"; } Finally use sudo service varnish restart to restart varnish and Event Store should be running with a reverse proxy in front of it. If you want to check the status of varnish, use varnishstat ."
  },
  "server/stats-debug/index.html": {
    "href": "server/stats-debug/index.html",
    "title": "Stats and debug information | Event Store",
    "keywords": "Stats and debug information Event Store has a lot of debug and statistics information available about a cluster you can find with the following request: HTTP API Response curl -i -X GET \"http://127.0.0.1:2113/stats\" -u \"admin:changeit\" HTTP/1.1 200 OK Access-Control-Allow-Methods: GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Cache-Control: max-age=1, public Vary: Accept Content-Type: application/json; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Thu, 06 Dec 2018 09:39:21 GMT Content-Length: 12664 Keep-Alive: timeout=15,max=100 { \"proc\": { \"startTime\": \"2018-12-06T09:33:13.0000000Z\", \"id\": 1, \"mem\": 84639744, \"cpu\": 9.739911, \"cpuScaled\": 4.86995554, \"threadsCount\": 25, \"contentionsRate\": 57.86452, \"thrownExceptionsRate\": 0.0, \"gc\": { \"allocationSpeed\": 0.0, \"gen0ItemsCount\": 14, \"gen0Size\": 0, \"gen1ItemsCount\": 1, \"gen1Size\": 0, \"gen2ItemsCount\": 0, \"gen2Size\": 0, \"largeHeapSize\": 0, \"timeInGc\": 0.0, \"totalBytesInHeaps\": 0 }, \"diskIo\": { \"readBytes\": 30879744, \"writtenBytes\": 987136, \"readOps\": 75895, \"writeOps\": 726 }, \"tcp\": { \"connections\": 0, \"receivingSpeed\": 0.0, \"sendingSpeed\": 0.0, \"inSend\": 0, \"measureTime\": \"00:00:29.5561630\", \"pendingReceived\": 0, \"pendingSend\": 0, \"receivedBytesSinceLastRun\": 0, \"receivedBytesTotal\": 0, \"sentBytesSinceLastRun\": 0, \"sentBytesTotal\": 0 } }, \"sys\": { \"cpu\": 8.282546, \"freeMem\": 375517184, \"drive\": { \"/var/lib/eventstore\": { \"availableBytes\": 13525999616, \"totalBytes\": 15679725568, \"usage\": \"13%\", \"usedBytes\": 2153725952 } } }, \"es\": { \"checksum\": 205117, \"checksumNonFlushed\": 205117, \"queue\": { \"index Committer\": { \"queueName\": \"Index Committer\", \"groupName\": \"\", \"avgItemsPerSecond\": 0, \"avgProcessingTime\": 29590.349000000002, \"currentIdleTime\": null, \"currentItemProcessingTime\": \"0:00:06:06.3938445\", \"idleTimePercent\": 0.0, \"length\": 0, \"lengthCurrentTryPeak\": 0, \"lengthLifetimePeak\": 0, \"totalItemsProcessed\": 60, \"inProgressMessage\": \"<none>\", \"lastProcessedMessage\": \"CommitAck\" }, \"mainQueue\": { \"queueName\": \"MainQueue\", \"groupName\": \"\", \"avgItemsPerSecond\": 13, \"avgProcessingTime\": 0.012954452926208651, \"currentIdleTime\": \"0:00:00:00.0290638\", \"currentItemProcessingTime\": null, \"idleTimePercent\": 99.982804190417681, \"length\": 0, \"lengthCurrentTryPeak\": 5, \"lengthLifetimePeak\": 14, \"totalItemsProcessed\": 6366, \"inProgressMessage\": \"<none>\", \"lastProcessedMessage\": \"Schedule\" }, \"monitoringQueue\": { \"queueName\": \"MonitoringQueue\", \"groupName\": \"\", \"avgItemsPerSecond\": 0, \"avgProcessingTime\": 584.2229, \"currentIdleTime\": null, \"currentItemProcessingTime\": \"0:00:00:00.5484086\", \"idleTimePercent\": 98.025629883927763, \"length\": 0, \"lengthCurrentTryPeak\": 0, \"lengthLifetimePeak\": 1, \"totalItemsProcessed\": 25, \"inProgressMessage\": \"GetFreshStats\", \"lastProcessedMessage\": \"GetFreshStats\" }, \"projection Core #0\": { \"queueName\": \"Projection Core #0\", \"groupName\": \"Projection Core\", \"avgItemsPerSecond\": 0, \"avgProcessingTime\": 0.00966, \"currentIdleTime\": \"0:00:00:29.5815685\", \"currentItemProcessingTime\": null, \"idleTimePercent\": 99.999673204215767, \"length\": 0, \"lengthCurrentTryPeak\": 2, \"lengthLifetimePeak\": 22, \"totalItemsProcessed\": 871, \"inProgressMessage\": \"<none>\", \"lastProcessedMessage\": \"EventReaderIdle\" }, \"projection Core #1\": { \"queueName\": \"Projection Core #1\", \"groupName\": \"Projection Core\", \"avgItemsPerSecond\": 0, \"avgProcessingTime\": 0.01033, \"currentIdleTime\": \"0:00:00:29.5815941\", \"currentItemProcessingTime\": null, \"idleTimePercent\": 99.999651237588822, \"length\": 0, \"lengthCurrentTryPeak\": 2, \"lengthLifetimePeak\": 15, \"totalItemsProcessed\": 505, \"inProgressMessage\": \"<none>\", \"lastProcessedMessage\": \"EventReaderIdle\" }, \"projection Core #2\": { \"queueName\": \"Projection Core #2\", \"groupName\": \"Projection Core\", \"avgItemsPerSecond\": 0, \"avgProcessingTime\": 0.010700000000000001, \"currentIdleTime\": \"0:00:00:29.5816107\", \"currentItemProcessingTime\": null, \"idleTimePercent\": 99.999638057613979, \"length\": 0, \"lengthCurrentTryPeak\": 2, \"lengthLifetimePeak\": 53, \"totalItemsProcessed\": 2897, \"inProgressMessage\": \"<none>\", \"lastProcessedMessage\": \"EventReaderIdle\" }, \"projections Master\": { \"queueName\": \"Projections Master\", \"groupName\": \"\", \"avgItemsPerSecond\": 19, \"avgProcessingTime\": 0.0076020905923344945, \"currentIdleTime\": \"0:00:00:00.0398806\", \"currentItemProcessingTime\": null, \"idleTimePercent\": 99.9850336301286, \"length\": 0, \"lengthCurrentTryPeak\": 0, \"lengthLifetimePeak\": 12, \"totalItemsProcessed\": 7285, \"inProgressMessage\": \"<none>\", \"lastProcessedMessage\": \"Schedule\" }, \"storage Chaser\": { \"queueName\": \"Storage Chaser\", \"groupName\": \"\", \"avgItemsPerSecond\": 104, \"avgProcessingTime\": 0.00693448498546981, \"currentIdleTime\": \"0:00:00:00.0012769\", \"currentItemProcessingTime\": null, \"idleTimePercent\": 99.926313794228051, \"length\": 0, \"lengthCurrentTryPeak\": 0, \"lengthLifetimePeak\": 0, \"totalItemsProcessed\": 38228, \"inProgressMessage\": \"<none>\", \"lastProcessedMessage\": \"ChaserCheckpointFlush\" }, \"storageReaderQueue #1\": { \"queueName\": \"StorageReaderQueue #1\", \"groupName\": \"StorageReaderQueue\", \"avgItemsPerSecond\": 0, \"avgProcessingTime\": 0.19243333333333335, \"currentIdleTime\": \"0:00:00:00.5597500\", \"currentItemProcessingTime\": null, \"idleTimePercent\": 99.994147076653874, \"length\": 0, \"lengthCurrentTryPeak\": 0, \"lengthLifetimePeak\": 1, \"totalItemsProcessed\": 274, \"inProgressMessage\": \"<none>\", \"lastProcessedMessage\": \"ReadStreamEventsBackward\" }, \"storageReaderQueue #2\": { \"queueName\": \"StorageReaderQueue #2\", \"groupName\": \"StorageReaderQueue\", \"avgItemsPerSecond\": 0, \"avgProcessingTime\": 0.11274545454545454, \"currentIdleTime\": \"0:00:00:00.0290949\", \"currentItemProcessingTime\": null, \"idleTimePercent\": 99.995787138839844, \"length\": 0, \"lengthCurrentTryPeak\": 0, \"lengthLifetimePeak\": 1, \"totalItemsProcessed\": 280, \"inProgressMessage\": \"<none>\", \"lastProcessedMessage\": \"ReadStreamEventsForward\" }, \"storageReaderQueue #3\": { \"queueName\": \"StorageReaderQueue #3\", \"groupName\": \"StorageReaderQueue\", \"avgItemsPerSecond\": 0, \"avgProcessingTime\": 0.0953888888888889, \"currentIdleTime\": \"0:00:00:02.0327931\", \"currentItemProcessingTime\": null, \"idleTimePercent\": 99.9970993914555, \"length\": 0, \"lengthCurrentTryPeak\": 0, \"lengthLifetimePeak\": 1, \"totalItemsProcessed\": 262, \"inProgressMessage\": \"<none>\", \"lastProcessedMessage\": \"ReadStreamEventsForward\" }, \"storageReaderQueue #4\": { \"queueName\": \"StorageReaderQueue #4\", \"groupName\": \"StorageReaderQueue\", \"avgItemsPerSecond\": 0, \"avgProcessingTime\": 0.087377777777777776, \"currentIdleTime\": \"0:00:00:01.0318977\", \"currentItemProcessingTime\": null, \"idleTimePercent\": 99.997328182310355, \"length\": 0, \"lengthCurrentTryPeak\": 0, \"lengthLifetimePeak\": 1, \"totalItemsProcessed\": 282, \"inProgressMessage\": \"<none>\", \"lastProcessedMessage\": \"ReadStreamEventsForward\" }, \"storageWriterQueue\": { \"queueName\": \"StorageWriterQueue\", \"groupName\": \"\", \"avgItemsPerSecond\": 0, \"avgProcessingTime\": 4.42, \"currentIdleTime\": \"0:00:00:29.5843498\", \"currentItemProcessingTime\": null, \"idleTimePercent\": 99.985062693918209, \"length\": 0, \"lengthCurrentTryPeak\": 0, \"lengthLifetimePeak\": 2, \"totalItemsProcessed\": 65, \"inProgressMessage\": \"<none>\", \"lastProcessedMessage\": \"WritePrepares\" }, \"subscriptions\": { \"queueName\": \"Subscriptions\", \"groupName\": \"\", \"avgItemsPerSecond\": 1, \"avgProcessingTime\": 0.022990322580645161, \"currentIdleTime\": \"0:00:00:00.0293309\", \"currentItemProcessingTime\": null, \"idleTimePercent\": 99.997594823346091, \"length\": 0, \"lengthCurrentTryPeak\": 0, \"lengthLifetimePeak\": 10, \"totalItemsProcessed\": 436, \"inProgressMessage\": \"<none>\", \"lastProcessedMessage\": \"CheckPollTimeout\" }, \"timer\": { \"queueName\": \"Timer\", \"groupName\": \"\", \"avgItemsPerSecond\": 32, \"avgProcessingTime\": 0.024676409185803758, \"currentIdleTime\": \"0:00:00:00.0093879\", \"currentItemProcessingTime\": null, \"idleTimePercent\": 99.918283810581556, \"length\": 9, \"lengthCurrentTryPeak\": 15, \"lengthLifetimePeak\": 614, \"totalItemsProcessed\": 12915, \"inProgressMessage\": \"<none>\", \"lastProcessedMessage\": \"ExecuteScheduledTasks\" }, \"worker #1\": { \"queueName\": \"Worker #1\", \"groupName\": \"Workers\", \"avgItemsPerSecond\": 1, \"avgProcessingTime\": 0.18848333333333334, \"currentIdleTime\": \"0:00:00:00.0295425\", \"currentItemProcessingTime\": null, \"idleTimePercent\": 99.973144953850138, \"length\": 0, \"lengthCurrentTryPeak\": 1, \"lengthLifetimePeak\": 1, \"totalItemsProcessed\": 520, \"inProgressMessage\": \"<none>\", \"lastProcessedMessage\": \"PurgeTimedOutRequests\" }, \"worker #2\": { \"queueName\": \"Worker #2\", \"groupName\": \"Workers\", \"avgItemsPerSecond\": 1, \"avgProcessingTime\": 0.2823279069767442, \"currentIdleTime\": \"0:00:00:00.0295030\", \"currentItemProcessingTime\": null, \"idleTimePercent\": 99.958977493122433, \"length\": 0, \"lengthCurrentTryPeak\": 1, \"lengthLifetimePeak\": 1, \"totalItemsProcessed\": 516, \"inProgressMessage\": \"<none>\", \"lastProcessedMessage\": \"PurgeTimedOutRequests\" }, \"worker #3\": { \"queueName\": \"Worker #3\", \"groupName\": \"Workers\", \"avgItemsPerSecond\": 1, \"avgProcessingTime\": 0.018606976744186047, \"currentIdleTime\": \"0:00:00:00.0294627\", \"currentItemProcessingTime\": null, \"idleTimePercent\": 99.997299118709734, \"length\": 0, \"lengthCurrentTryPeak\": 1, \"lengthLifetimePeak\": 1, \"totalItemsProcessed\": 517, \"inProgressMessage\": \"<none>\", \"lastProcessedMessage\": \"PurgeTimedOutRequests\" }, \"worker #4\": { \"queueName\": \"Worker #4\", \"groupName\": \"Workers\", \"avgItemsPerSecond\": 1, \"avgProcessingTime\": 0.013951162790697674, \"currentIdleTime\": \"0:00:00:00.0292979\", \"currentItemProcessingTime\": null, \"idleTimePercent\": 99.997871940733575, \"length\": 0, \"lengthCurrentTryPeak\": 1, \"lengthLifetimePeak\": 1, \"totalItemsProcessed\": 517, \"inProgressMessage\": \"<none>\", \"lastProcessedMessage\": \"PurgeTimedOutRequests\" }, \"worker #5\": { \"queueName\": \"Worker #5\", \"groupName\": \"Workers\", \"avgItemsPerSecond\": 1, \"avgProcessingTime\": 0.00796046511627907, \"currentIdleTime\": \"0:00:00:00.0290928\", \"currentItemProcessingTime\": null, \"idleTimePercent\": 99.998844217454163, \"length\": 0, \"lengthCurrentTryPeak\": 1, \"lengthLifetimePeak\": 1, \"totalItemsProcessed\": 517, \"inProgressMessage\": \"<none>\", \"lastProcessedMessage\": \"ReadStreamEventsForwardCompleted\" } }, \"writer\": { \"lastFlushSize\": 17025, \"lastFlushDelayMs\": 4.2292, \"meanFlushSize\": 4018, \"meanFlushDelayMs\": 2.6562450980392156, \"maxFlushSize\": 17025, \"maxFlushDelayMs\": 6.9021, \"queuedFlushMessages\": 0 }, \"readIndex\": { \"cachedRecord\": 306, \"notCachedRecord\": 0, \"cachedStreamInfo\": 3012, \"notCachedStreamInfo\": 90, \"cachedTransInfo\": 0, \"notCachedTransInfo\": 0 } } }% This returns a lot of information that you can filter using the sub-path of the stat: HTTP API Response curl -i -X GET \"http://127.0.0.1:2113/stats/proc/tcp\" -u \"admin:changeit\" HTTP/1.1 200 OK Access-Control-Allow-Methods: GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Cache-Control: max-age=1, public Vary: Accept Content-Type: application/json; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Thu, 06 Dec 2018 10:03:55 GMT Content-Length: 280 Keep-Alive: timeout=15,max=100 { \"connections\": 0, \"receivingSpeed\": 0.0, \"sendingSpeed\": 0.0, \"inSend\": 0, \"measureTime\": \"00:00:05.0223780\", \"pendingReceived\": 0, \"pendingSend\": 0, \"receivedBytesSinceLastRun\": 0, \"receivedBytesTotal\": 0, \"sentBytesSinceLastRun\": 0, \"sentBytesTotal\": 0 }% You can find more information on what each stat returns by searching for it in the reference code documentation under .NET API -> Code Documentation . <!-- TODO: Make this better, embed -->"
  },
  "server/metadata-and-reserved-names/index.html": {
    "href": "server/metadata-and-reserved-names/index.html",
    "title": "Metadata and reserved names | Event Store",
    "keywords": "Metadata and reserved names Stream metadata Every stream in Event Store has metadata stream associated with it, prefixed by $$ , so the metadata stream from a stream called foo is $$foo . Event Store allows you to change some values in the metadata, and you can write your own data into stream metadata that you can refer to in your code. Reserved names All internal data used by Event Store is prefixed with a $ character (for example $maxCount on a stream's metadata). Because of this you should not use names with a $ prefix as event names, metadata keys, or stream names, except where detailed below. The supported internal settings are: Name Description $maxAge Sets a sliding window based on dates. When data reaches a certain age it disappears automatically from the stream and is considered eligible for scavenging. This value is set as an integer representing the number of seconds. This value must be >=1. $maxCount Sets a sliding window based on the number of items in the stream. When data reaches a certain length it disappears automatically from the stream and is considered eligible for scavenging. This value is set as an integer representing the count of items. This value must be >= 1. $cacheControl This controls the cache of the head of a stream. Most URIs in a stream are infinitely cacheable but the head by default will not cache. It may be preferable in some situations to set a small amount of caching on the head to allow intermediaries to handle polls (say 10 seconds). The argument is an integer representing the seconds to cache. This value must be >= 1. Note If you set both $maxAge and $maxCount then events will become eligible for scavenging when either criteria is met. For example, if you set $maxAge to 10 and $maxCount to 50,000, events will be marked as eligible for scavenging after either 10 seconds, or 50,000 events, have passed. Deleted items will only be removed once the scavenge process runs. Security access control lists are also included in the $acl section of the stream metadata. Name Description $r The list of users with read permissions $w The list of users with write permissions $d The list of users with delete permissions $mw The list of users with write permissions to stream metadata $mr The list of users with read permissions to stream metadata You can find more details on access control lists can here . Event metadata Every event in Event Store has metadata associated with it. Event Store allows you to change some values in the metadata, and you can write your own data into event metadata that you can refer to in your code. All names starting with $ are reserved space for internal use. The currently supported reserved internal names are: $correlationId The application level correlation ID associated with this message. $causationId The application level causation ID associated with this message. Projections honor both the correlationId and causationId patterns for any events it produces internally (linkTo/emit/etc)."
  },
  "server/index.html": {
    "href": "server/index.html",
    "title": "Running Event Store | Event Store",
    "keywords": "Running Event Store Event Store runs as a server that clients can connect to either over HTTP or using one of the client APIs . You can run both the open source and commercial versions as either a single node or a highly available cluster of nodes. We distribute an open source version of Event Store as a console application. There are separate distributions for Windows on .NET and Linux/macOS on Mono. Install and run Event Store Note Unless you pass a database option with --db , Event Store writes to a new database created in the host system's temporary files path each time it is started. For more information on Command Line Arguments read this guide . Windows Linux Docker Kubernetes macOS The prerequisites for installing on Windows are: NET Framework 4.0+ Event Store has Chocolatey packages available that you can install with the following command in an elevated terminal: choco install eventstore-oss You can also download a binary, unzip the archive and run from the folder location with an administrator console. The following command starts Event Store with the database stored at the path ./db and the logs in ./logs . You can view further command line arguments in the server docs . EventStore.ClusterNode.exe --db ./db --log ./logs Event Store runs in an administration context because it starts an HTTP server through http.sys . For permanent or production instances you need to provide an ACL such as: netsh http add urlacl url=http://+:2113/ user=DOMAIN\\username For more information, refer to Microsoft's add urlacl documentation . To build Event Store from source, refer to the Event Store README . The prerequisites for installing on Linux are: We recommend Mono 5.16.0 , but other versions may also work. Event Store has pre-built packages available for Debian-based distributions , manual instructions for distributions that use RPM , or you can build from source . The final package name to install is eventstore-oss . If you installed from a pre-built package, start Event Store with: sudo systemctl start eventstore When you install the Event Store package, the service doesn't start by default. This is to allow you to change the configuration, located at /etc/eventstore/eventstore.conf and to prevent creating a default database. Tip To start Event Store on port 80 as a service, refer to Configuring your installation Tip We recommend that when using Linux you set the 'open file limit' to a high number. The precise value depends on your use case, but at least between 30,000 and 60,000 . Event Store has a Docker image available for any platform that supports Docker. Pull the Docker image: docker pull eventstore/eventstore Run the container: docker run --name eventstore-node -it -p 2113:2113 -p 1113:1113 eventstore/eventstore Refer to the image overview for more information. Event Store has a Helm chart available for installing Event Store on Kubernetes clusters: helm repo add eventstore https://eventstore.github.io/EventStore.Charts helm repo update helm install -n eventstore eventstore/eventstore Note Read this guide for more details on how to use the helm chart. Read this guide for more details on using Kubernetes with AKS and this guide for more details on using Kubernetes with GKE. Event Store has a macOS package you can download and install, and we maintain a Homebrew Cask formula you can install: brew cask install eventstore In each case you can run Event Store with the eventstore command, and stop it with Ctrl+c . To use the default database location you need to use sudo , or you can change the location with the --db parameter. To build Event Store from source, refer to the Event Store README . Solving 503 errors from the Admin UI There is a known issue with the .NET HTTPListener class (which Event Store uses) and bad URL ACL registrations, which can cause servers to return 503 errors for every request. If you see this, you can issue the following commands: netsh http show urlacl Look for an entry on the port you're trying to use ( 2113 unless you've specified a custom port), then issue: netsh http delete urlacl <the entry you just found> For example: netsh http delete urlacl http://+:2113/ These steps should resolve the issue. Shutting down an Event Store node Event Store is designed to be safe by default, and it is expected that it will be shut down using kill -9 . It is also possible to initiate a shutdown via the Admin UI, by clicking on the Shutdown Server button located on the Admin page. This may be useful if you do not have console access to the node or need to script initiating a shutdown. Securing Event Store To secure Event Store, you can bind the server to the localhost interface and install a reverse proxy such as nginx or Varnish on the public IP. Read this guide for an example of setting up Event Store with Varnish. The reverse proxy is your public interface. Internally it handles the authentication and route requests to Event Store. Event Store is only accessible through the localhost adapter and is not exposed publicly. The locally running reverse proxy is allowed to cache responses, and because of this, reverse proxies are more performant than calling Event Store directly. Even if you use a reverse proxy, you can support external authentication from Event Store itself. You do this by enabling the ES-TrustedAuth trusted intermediary option in your configuration. This allows the intermediary to write a header with the user information that Event Store uses."
  },
  "server/default-directories/index.html": {
    "href": "server/default-directories/index.html",
    "title": "Default directories | Event Store",
    "keywords": "Default directories The default directories used by Event Store vary by platform to fit with the common practices each platform. Note Paths beginning with \".\" are relative to the directory in which eventstored or EventStore.ClusterNode.exe are located. Absolute paths are as written. Linux Application: /usr/bin Content: /usr/share/eventstore Configuration: /etc/eventstore/ Data: /var/lib/eventstore Application Logs: /var/log/eventstore Test Client Logs: ./testclientlog Web Content: ./clusternode-web then {Content}/clusternode-web Projections: ./projections then {Content}/projections Prelude: ./Prelude then {Content}/Prelude Windows and macOS Content: ./ Configuration: ./ Data: ./data Application Logs: ./logs Test Client Log: ./testclientlogs Web Content: ./clusternode-web then {Content}/clusternode-web Projections: ./projections then {Content}/projections Prelude: ./Prelude then {Content}/Prelude"
  },
  "server/database-backup/index.html": {
    "href": "server/database-backup/index.html",
    "title": "Database backup | Event Store",
    "keywords": "Database backup Backing up an Event Store database is straightforward, but relies on you carrying out the steps below in the correct order. Backing up a database Copy all *.chk files to your backup location. Copy the remaining files and directories to your backup location. For example: rsync -a /data/eventstore/db/*.chk /backup/eventstore/db/ rsync -a /data/eventstore/db/index /backup/eventstore/db/ rsync -a /data/eventstore/db/*.0* /backup/eventstore/db/ Restoring a database Ensure your Event Store database is stopped. Restoring a database on running instance is not possible and in most cases will lead to data corruption. Copy all files to the desired location. Create a copy of chaser.chk and call it truncate.chk (which override already existing truncate.chk ). Note Many people do not rely on hot backups in a highly available cluster but instead increase their node counts to keep further copies of data. Differential backup Event Store keep most data in chunk files , named chunkX.Y , where X is the chunk number, and Y is the version of that chunk file. As Event Store scavenges, it creates new versions of scavenged chunks which are interchangeable with older versions (but for the removed data). It's only necessary to keep the file whose name has the highest Y for each X , as well as the checkpoint files and the index directory (to avoid expensive index rebuilding). Other options There are many other options available for backing up an Event Store database. For example, you can set up a durable subscription that writes all events to another storage mechanism such as a key/value or column store. These methods would require a manual set up for restoring back to a cluster group. You can expand upon this option to use a second Event Store node/cluster as a back up. This is commonly known as a primary/secondary back up scheme. The primary cluster runs and asynchronously pushes data to a second cluster as described above. The second cluster/node is available in case of disaster on the primary cluster. If you are using this strategy then we recommend you only support manual failover from Primary to Secondary as automated strategies risk causing a split brain problem."
  },
  "server/cluster-without-manager-nodes/index.html": {
    "href": "server/cluster-without-manager-nodes/index.html",
    "title": "Setting up a cluster using only database nodes (OSS) | Event Store",
    "keywords": "Setting up a cluster using only database nodes (OSS) <!-- TODO: Needs Linux instructions --> High availability Event Store allows you to run more than one node as a cluster. There are two modes available for clustering: With database nodes only (open source and commercial) With manager nodes and database nodes (commercial only) This document covers setting up Event Store with only database nodes. Tip When setting up a cluster, you generally want an odd number of nodes as Event Store uses a quorum based algorithm to handle high availability. We recommended you define an odd number of nodes to avoid split brain problems. Common values for the ‘ClusterSize’ setting are three or five (to have a majority of two nodes and a majority of three nodes). Next Steps Read here for more information on the roles available for nodes in an Event Store cluster. Running on the same machine To start, set up three nodes running on a single machine. Run each of the commands below in its own console window. You either need admin privileges or have ACLs setup with IIS if running under Windows. Unix-like operating systems need no configuration. Replace \"127.0.0.1\" with whatever IP address you want to run on. EventStore.ClusterNode.exe --mem-db --log .\\logs\\log1 --int-ip 127.0.0.1 --ext-ip 127.0.0.1 --int-tcp-port=1111 --ext-tcp-port=1112 --int-http-port=1113 --ext-http-port=1114 --cluster-size=3 --discover-via-dns=false --gossip-seed=127.0.0.1:2113,127.0.0.1:3113 EventStore.ClusterNode.exe --mem-db --log .\\logs\\log2 --int-ip 127.0.0.1 --ext-ip 127.0.0.1 --int-tcp-port=2111 --ext-tcp-port=2112 --int-http-port=2113 --ext-http-port=2114 --cluster-size=3 --discover-via-dns=false --gossip-seed=127.0.0.1:1113,127.0.0.1:3113 EventStore.ClusterNode.exe --mem-db --log .\\logs\\log3 --int-ip 127.0.0.1 --ext-ip 127.0.0.1 --int-tcp-port=3111 --ext-tcp-port=3112 --int-http-port=3113 --ext-http-port=3114 --cluster-size=3 --discover-via-dns=false --gossip-seed=127.0.0.1:1113,127.0.0.1:2113 You should now have three nodes running together in a cluster. If you kill one of the nodes, it continues running. This binds to the loopback interface. To access Event Store from outside your machine, specify a different IP address for the --ext-ip parameter. Running on separate machines Most important is to understand the \"gossip seeds\". You are instructing seed locations for when the node first starts and needs to begin gossiping. Any node can be a seed. By giving each node the other nodes you ensure that there is always another node to gossip with, if a quorum can be built. If you want to move this to run on three machines, change the IPs on the command line to something like this: EventStore.ClusterNode.exe --mem-db --log c:\\dbs\\cluster\\log1 --int-ip 192.168.0.1 --ext-ip 192.168.0.1 --int-tcp-port=1111 --ext-tcp-port=1112 --int-http-port=2113 --ext-http-port=2114 --cluster-size=3 --discover-via-dns=false --gossip-seed=192.168.0.2:2113,192.168.0.3:2113 EventStore.ClusterNode.exe --mem-db --log c:\\dbs\\cluster\\log2 --int-ip 192.168.0.2 --ext-ip 192.168.0.2 --int-tcp-port=1111 --ext-tcp-port=1112 --int-http-port=2113 --ext-http-port=2114 --cluster-size=3 --discover-via-dns=false --gossip-seed=192.168.0.1:2113,192.168.0.3:2113 EventStore.ClusterNode.exe --mem-db --log c:\\dbs\\cluster\\log3 --int-ip 192.168.0.3 --ext-ip 192.168.0.3 --int-tcp-port=1111 --ext-tcp-port=1112 --int-http-port=2113 --ext-http-port=2114 --cluster-size=3 --discover-via-dns=false --gossip-seed=192.168.0.1:2113,192.168.0.2:2113 Using DNS Entering the commands above into each node is tedious and error-prone (especially as the replica set counts change). Another configuration option is to create a DNS entry that points to all the nodes in the cluster and then specify that DNS entry with the appropriate port: EventStore.ClusterNode.exe --log c:\\dbs\\cluster\\log1 --int-ip 192.168.0.1 --ext-ip 192.168.0.1 --int-tcp-port=1111 --ext-tcp-port=1112 --int-http-port=2113 --ext-http-port=2114 --cluster-size=3 --cluster-dns mydomain.com --cluster-gossip-port=2113 EventStore.ClusterNode.exe --mem-db --log c:\\dbs\\cluster\\log2 --int-ip 192.168.0.2 --ext-ip 192.168.0.2 --int-tcp-port=1111 --ext-tcp-port=1112 --int-http-port=2113 --ext-http-port=2114 --cluster-size=3 --cluster-dns mydomain.com --cluster-gossip-port=2113 EventStore.ClusterNode.exe --mem-db --log c:\\dbs\\cluster\\log3 --int-ip 192.168.0.3 --ext-ip 192.168.0.3 --int-tcp-port=1111 --ext-tcp-port=1112 --int-http-port=2113 --ext-http-port=2114 --cluster-size=3 --cluster-dns mydomain.com --cluster-gossip-port=2113 Note You can also use the method above for HTTP clients to avoid using a load balancer and fall back to round robin DNS for many deployments. Internal vs. external networks You can optionally segregate all Event Store communications to different networks. For example, internal networks for tasks like replication, and external networks for communication between clients. You can place these communications on segregated networks which is often a good idea for both performance and security purposes. To setup an internal network, use the command line parameters provided above, but prefixed with int- . All communications channels also support enabling SSL for the connections. HTTP clients If you want to use the HTTP API, then you should add a load balancer in front of the three nodes. It does not matter which node receives a request as the requests the node are forwarded to the request internally. With this setup, you can lose any one machine with no data loss. Native TCP clients You can connect to the cluster using the native TCP interface. The client APIs support switching between nodes internally. As such if you have a master failover the connection automatically handle retries on another node. To set up a connection as above, provide gossip seeds to the connection. The client then uses the gossip seeds to begin gossiping information about the cluster. EventStoreConnection.Create( ConnectionSettings.Create().KeepReconnecting(), ClusterSettings.Create() .WithGossipTimeoutOf(TimeSpan.FromMilliseconds(500)) .WithGossipSeeds(new [] { new IPEndPoint(IPAddress.Parse(\"192.168.0.1\"), 2113), new IPEndPoint(IPAddress.Parse(\"192.168.0.2\"), 2113), new IPEndPoint(IPAddress.Parse(\"192.168.0.3\"), 2113) })); As in the example above, you can also use DNS to avoid manually specifying the seeds. You add the nodes to a DNS record and then specify that DNS entry to the connection to locate nodes. EventStoreConnection.Create(ConnectionSettings.Create() .KeepReconnecting(), ClusterSettings.Create() .SetClusterDns(\"mycluster.com\")) .SetGossipPort(2113) The connection automatically reconnects during node failures. You can control this behaviour with options on the ConnectionSettings such as limiting retry attempts or frequency. The connection and durable subscription even manage a subscription during node failures, you will not receive duplicated messages over your durable subscription. Tip For those using the closed source version of Event Store GossipPort is an alias for ManagerPort as the closed source version includes a node manager on each physical node. This allows for controlling many virtual nodes on a machine with easy configuration. The manager also acts as a supervisor for the nodes."
  },
  "server/cluster-with-manager-nodes/index.html": {
    "href": "server/cluster-with-manager-nodes/index.html",
    "title": "Setting up a cluster with manager nodes | Event Store",
    "keywords": "Setting up a cluster with manager nodes <!-- TODO: How much of this is also relevant to OSS? --> High availability Event Store allows you to run more than one node as a cluster. There are two modes available for clustering: With database nodes only (open source and commercial) With manager nodes and database nodes (commercial only) This document covers setting up Event Store with manager nodes and database nodes. Tip When setting up a cluster, you generally want an odd number of nodes as Event Store uses a quorum based algorithm to handle high availability. We recommended you define an odd number of nodes to avoid split brain problems. Common values for the ‘ClusterSize’ setting are three or five (to have a majority of two nodes and a majority of three nodes). Next Steps Read here for more information on the roles available for nodes in an Event Store cluster. Manager nodes Each physical (or virtual) machine in an Event Store cluster typically runs one manager node and one database node. It's also possible to have multiple database nodes per physical machine, running under one manager node. Manager nodes have a number of responsibilities: They are responsible for starting the database nodes and supervising them to ensure they rest in case of a crash or termination owing to abnormal circumstances. Event Store calls this the watchdog service. They communicate with other manager nodes to find cluster state, and relay that information to the database nodes under management. They provide a known endpoint for clients to connect to and discover cluster information. When running on Windows, manager nodes run as Windows services. Configuring nodes Each database or manager node can have a variety of configuration sources . Each source has a priority and determines running configuration by evaluating each source and applying the option from the source with the highest priority. From lowest to highest priority, the sources of configuration are: Default settings. Settings specified in a configuration file written using YAML. Settings specified in environment variables. Settings specified as command line options to the node. You can check the configuration of a node by passing the -WhatIf flag to the process. Typical deployment topologies Event Store clusters follow a \"shared nothing\" philosophy, meaning that clustering requires no shared disks for clustering to work. Instead, several database nodes store your data to ensure it isn't lost in case of a drive failure or a node crashing. Event Store uses a quorum-based replication model, in which a majority of nodes in the cluster must acknowledge that they committed a write to disk before acknowledging the write to the client. This means that to be able to tolerate the failure of n nodes, the cluster must be of size (2n + 1) . A three-database-node cluster can continue to accept writes if one node is unavailable. A five-database-node cluster can continue to accept writes if two nodes are unavailable, and so forth. A typical deployment topology consists of three physical machines, each running one manager node and one database node. Each of the physical machines may have two network interfaces, one for communicating with other cluster members, and one for serving clients. Although it may be preferable in some situations to run over two separate networks. It's also possible to use different TCP ports on one interface. Cluster gossip Event Store uses a quorum-based replication model. When working normally, a cluster has one database node known as a master, and the remaining nodes are slaves. The master node is responsible for coordinating writes while it is the master. Database nodes use a consensus algorithm to determine which database node should be master and which should be slaves. Event Store bases the decision as to which node should be the master on a number of factors ( some of which are configurable ). For database nodes to have this information available to them, the nodes gossip with other nodes in the cluster. Gossip runs over the internal (and optionally the external) HTTP interfaces of database nodes, and over both internal and external interfaces of manager nodes. Discovering cluster members Manager and database nodes need to know about one another to gossip. To start this process, you provide gossip seeds or the addresses where it can find other nodes, to each node. When running with manager nodes, it normally uses the following approach: On each physical machine, configure the database node(s) with a gossip seed of the internal HTTP interface of the manager running on the same physical machine. Configure the managers to discover other managers in one of two ways: via a DNS entry and a well-known gossip port. via a list of other managers' addresses. The preferred method is via a DNS entry. To set this up, create a DNS entry for the cluster with an A record pointing to each member of the cluster. Each manager looks up other nodes in the cluster during the startup process based on the DNS name. Since DNS only provides information about addresses, you need to use a consistent TCP port across the cluster for gossip. <!-- TODO: Should this be more practical? --> Example 1 - a three-machine cluster This example shows the configuration for a three node cluster, running in the typical setup of one manager node and one database node per physical machine, with cluster discovery via DNS. Each machine has one network interface, therefore uses different ports for the internal and external traffic. All nodes, in this case, are running Windows, so the manager nodes run as Windows services. The important points for writing configuration files are: Node IP Addresses: 192.168.1.11, 192.168.1.12 and 192.168.13 TCP ports: (defaults): Manager Nodes: Internal HTTP: 30777 External HTTP: 30778 Database Nodes: Internal TCP: 1112 External TCP: 1113 Internal HTTP: 2112 External HTTP: 2113 DNS Entry Name: cluster1.eventstore.local To configure the cluster correctly, there are a number of steps to follow: Set up a DNS entry named cluster1.eventstore.local with an A record for each node. Write the database node configuration file for each machine. Write the manager node configuration file for each machine. Write the watchdog configuration file for each machine. Deploy Event Store and the configuration files to each machine. ( Windows-specific ) Add HTTP URL ACL entries to allow starting HTTP servers on the required HTTP ports. ( Windows-specific ) Install the manager as a service and start the service. ( Linux-specific ) Configure the manager as a daemon. DNS entry It depends on which DNS server you use, but the eventual lookup should read: $ nslookup cluster1.eventstore.local Server: 192.168.1.2 Address: 192.168.1.2#53 Name: cluster.eventstore.local Address: 192.168.1.11 Name: cluster.eventstore.local Address: 192.168.1.12 Name: cluster.eventstore.local Address: 192.168.1.13 Database node configuration All three nodes are similar in configuration. The important configuration points are the: IP Addresses for internal and external interfaces. The ports for each endpoint. The location of the database file. The size of the cluster The endpoints from which to seed gossip (in this case the local manager). We assume that Event Store stores data on the _D:_ drive. You write the configuration files in YAML, and is the following for the first node: Filename: database.yaml Db: d:\\es-data IntIp: 192.168.1.11 ExtIp: 192.168.1.11 IntTcpPort: 1112 IntHttpPort: 2112 ExtTcpPort: 1113 ExtHttpPort: 2113 DiscoverViaDns: false GossipSeed: ['192.168.1.11:30777'] ClusterSize: 3 For each following node, the IP Addresses change, as does the gossip seed, since it is the manager running on the same physical machine as each node. Manager configuration Again, all three nodes are similar in configuration. The important configuration points are the: IP addresses for the internal and external interfaces. The ports for the HTTP endpoints. The log location. The DNS information about other nodes. Another important configuration item is which database nodes the manager is responsible for starting. You define this in a separate file (the watchdog configuration), the path to which you specify as WatchdogConfig in the manager configuration. You write the configuration files in YAML, and is the following for the first node: Filename: manager.yaml IntIp: 192.168.1.11 ExtIp: 192.168.1.11 IntHttpPort: 30777 ExtHttpPort: 30778 DiscoverViaDns: true ClusterDns: cluster1.eventstore.local ClusterGossipPort: 30777 EnableWatchdog: true WatchdogConfig: c:\\EventStore-Config\\watchdog.esconfig Log: d:\\manager-log Watchdog configuration The watchdog configuration file details which database nodes the manager is responsible for starting and supervising. Unlike the other configuration files, the manager configuration uses a custom format instead of YAML. Each node for which the manager is responsible has one line in the file, which starts with a # symbol and then details the command line options given to the database node when it starts it. Under normal circumstances, this is the path to the database node's configuration file. For the first node in the example cluster, the watchdog configuration file reads as follows: # --config c:\\EventStore-Config\\database.yaml Deploying Event Store software and configuration With configuration files for each node written, you can now deploy Event Store and the configuration. Although it's possible to use relative paths when writing configuration files, it's preferable to use absolute paths to reduce the potential for confusion. In this example, Event Store is deployed on each node in _c:\\EventStore-HA-v_, and the configuration files for that node are deployed into _C:\\EventStore-Config_. No installation process is necessary, you unzip the packaged distribution into your preferred location. Adding HTTP ACL entries for HTTP servers (Windows-specific) <!-- TODO: Check this --> To allow for non-elevated users to run HTTP servers on Windows, you must add entries to the access control list using netsh . By default, the manager node runs as NT AUTHORITY\\Local Service , so this is the user who must have permission to run the HTTP server. The commands used to add these entries on node one are as follows (Run as an elevated user): # Database Node Internal HTTP Interface netsh http add urlacl url=http://192.168.1.11:2112/ user=\"NT AUTHORITY\\LOCAL SERVICE\" # Database Node External HTTP Interface netsh http add urlacl url=http://192.168.1.11:2113/ user=\"NT AUTHORITY\\LOCAL SERVICE\" # Manager Node Internal HTTP Interface netsh http add urlacl url=http://192.168.1.11:30777/ user=\"NT AUTHORITY\\LOCAL SERVICE\" # Manager Node External HTTP Interface netsh http add urlacl url=http://192.168.1.11:30778/ user=\"NT AUTHORITY\\LOCAL SERVICE\" Configure the manager node as a service (Windows-specific) You can install manager nodes as a Windows service so they can start on boot rather than running in interactive mode. Each manager service is given an instance name, which becomes the name of the service (and part of the description for easy identification). The service is installed by default with a startup type of \"Automatic (Delayed Start)\". Installing the service To install the manager node on machine 1, use the following command: C:\\EventStore-HA-v\\> EventStore.WindowsManager.exe install -InstanceName es-cluster1 -ManagerConfig C:\\EventStore-Config\\manager.yaml The service is then visible in the services list, with a description of \"Event Store Manager (es-cluster1)\". Uninstalling the service To uninstall the manager node service, use the following command (where the instance name matches the name used during installation). C:\\EventStore-HA-v\\> EventStore.WindowsManager.exe uninstall -InstanceName es-cluster1 Manually starting and stopping the service To start the manager node use the net start es-cluster1 command. To stop the manager node use the net stop es-cluster1 command."
  },
  "server/indexing/index.html": {
    "href": "server/indexing/index.html",
    "title": "Indexing | Event Store",
    "keywords": "Indexing Event Store stores indexes separately from the main data files, accessing records by stream name. Overview Event Store creates index entries as it processes commit events. It holds these in memory (called memtables ) until it reaches the MaxMemTableSize and then persisted on disk in the index folder along with an index map file. The index files are uniquely named, and the index map file called indexmap . The index map describes the order and the level of the index file as well as containing the data checkpoint for the last written file, the version of the index map file and a checksum for the index map file. The logs refer to the index files as a PTable . Indexes are sorted lists based on the hashes of stream names. To speed up seeking the correct location in the file of an entry for a stream, Event Store keeps midpoints to relate the stream hash to the physical offset in the file. As Event Store saves more files, they are automatically merged together whenever there are more than 2 files at the same level into a single file at the next level. Each index entry is 24 bytes and the index file size is approximately 24Mb per 1M events. Level 0 is the level of the memtable that is kept in memory. Generally there is only 1 level 0 table unless an ongoing merge operation produces multiple level 0 tables. Assuming the default MaxMemTableSize of 1M, the index files by level are: Level Number of entries Size 1 1M 24MB 2 2M 48MB 3 4M 96MB 4 8M 192MB 5 16M 384MB 6 32M 768MB 7 64M 1536MB 8 128M 3072MB n (2^n) * 1M (2^n-1) * 24Mb Each index entry is 24 bytes and the index file size is approximately 24Mb per M events. Configuration Options The configuration options that effect indexing are: Index : where the indexes are stored MaxMemTableSize : how many entries to have in memory before writing out to disk IndexCacheDepth : sets the minimum number of midpoints to calculate for an index file SkipIndexVerify : skips reading and verification of PTables during start-up MaxAutoMergeIndexLevel : the maximum level of index file to merge automatically before manual merge OptimizeIndexMerge : Bypasses the checking of file hashes of indexes during startup and after index merges (allows for faster startup and less disk pressure after merges) See Command line arguments for how to specify these options. Index Index effects the location of the index files. We recommend you place index files on a separate drive to avoid competition for IO between the data, index and log files. MaxMemTableSize MaxMemTableSize effects disk IO when Event Store writes files to disk, index seek time and database startup time. The default size is a good tradeoff between low disk IO and startup time. Increasing the MaxMemTableSize results in longer database startup time because a node has to read through the data files from the last position in the indexmap file and rebuild the in memory index table before it starts. <!-- TODO: Polish a little more --> Increasing MaxMemTableSize also decreases the number of times Event Store writes index files to disk and how often it merges them together, which increases IO operations. It also reduces the number of seek operations when stream entries span multiple files as Event Store needs to search each file for the stream entries. This affects streams written to over longer periods of time more than streams written to over a shorter time, where time is measured by the number of events created, not time passed. This is because streams written to over longer time periods are more likely to have entries in multiple index files. IndexCacheDepth IndexCacheDepth effects the how many midpoints Event Store calculates for an index file which effects file size slightly, but can effect lookup times significantly. Looking up a stream entry in a file requires a binary search on the midpoints to find the nearest midpoint, and then a seek through the entries to find the entry or entries that match. Increasing this value decreases the second part of the operation and increase the first for extremely large indexes. The default value of 16 results in files up to about 1.5GB in size being fully searchable through midpoints. After that a maximum distance between midpoints of 4096 bytes for the seek, which is buffered from disk, up to a maximum level of 2TB where the seek distance starts to grow. Reducing this value can relieve a small amount of memory pressure in highly constrained environments. Increasing it causes index files larger than 1.5GB, and less than 2TB to have more dense midpoint populations which means the binary search is not used for long before switching back to scanning the entries between. The maximum number of entries scanned in this way is distance/24b , so with the default setting and a 2TB index file this is approximately 170 entries. Most clusters should not need to change this setting. SkipIndexVerify SkipIndexVerify skips reading and verification of index file hashes during startup. Instead of recalculating midpoints when Event Store reads the file, it reads the midpoints directly from the footer of the index file. You can set SkipIndexVerify to true to reduce startup time in exchange for the acceptance of a small risk that the index file becomes corrupted. This corruption could lead to a failure if you read the corrupted entries, and a message saying the index needs to be rebuilt. You can safely disable this setting for ZFS on Linux as the filesystem takes care of file checksums. In the event of corruption indexes will be rebuilt by reading through all the chunk files and recreating the indexes from scratch. MaxAutoMergeIndexLevel MaxAutoMergeIndexLevel allows you to specify the maximum index file level to automatically merge. By default Event Store merges all levels. Depending on the specification of the host running Event Store, at some point index merges will use a large amount of disk IO. For example: Merging 2 level 7 files results in at least 3072MB reads (2 * 1536MB), and 3072MB writes while merging 2 level 8 files together results in at least 6144MB reads (2 * 3072MB) and 6144MB writes. Setting MaxAutoMergeLevel to 7 allows all levels up to and including level 7 to be automatically merged, but to merge the level 8 files together, you need to trigger a manual merge. This manual merge allows better control over when these larger merges happen and which nodes they happen on. Due to the replication process, all nodes tend to merge at about the same time. OptimizeIndexMerge OptimizeIndexMerge allows faster merging of indexes when Event Store has scavenged a chunk. This option has no effect on unscavenged chunks. When Event Store has scavenged a chunk, and this option is set to true , it uses a bloom filter before reading the chunk to see if the value exists before reading the chunk to make sure that it still exists. Indexing in depth For general operation of Event Store the following information is not critical but useful for developers wanting to make changes in the indexing subsystem and for understanding crash recovery and tuning scenarios. Index map files Indexmap files are text files made up of line delimited values. The line delimiter varies based on operating system, so while you can consider indexmap files valid when transferred between operating systems, if you make changes to fix an issue (for example, disk corruption) it is best to make them on the same operating system as the cluster. The indexmap structure is as follows: hash - an md5 hash of the rest of the file version - the version of the indexmap file checkpoint - the maximum prepare/commit position of the persisted ptables maxAutoMergeLevel - either the value of MaxAutoMergeLevel or int32.MaxValue if it was not set. This is primarily used to detect increases in MaxAutoMergeLevel , which is not supported. ptable , level , index - List of all the ptables used by this index map with the level of the ptable and it's order. Event Store writes indexmap files to a temporary file and then deletes the original and renames the temporary file. Event Store attempts this 5 times before failing. Because of the order, this operation can only fail if there is an issue with the underlying file system or the disk is full. This is a 2 phase process, and in the unlikely event of a crash during this process, Event Store recovers by rebuilding the indexes using the same process used if it detects corrupted files during startup. Writing and Merging of index files Merging ptables , updating the indexmap and persisting memtable operations happen on a background thread. These operations are performed on a single thread with any additional operations queued and completed later. Event Store runs these operations on a thread pool thread rather than a dedicated thread. Generally there is only one operation queued at a time, but if merging to ptables at one level causes 2 tables to be available at the next level, then the next merge operation is immediately queued. While merge operations are in progress, if Event Store is writing large numbers of events, it may queue 1 or more memtables for persistence. The number of pending operations is logged. For safety ptables Event Store is currently merging are only deleted after the new ptable has persisted and the indexmap updated. In the event of a crash, Event Store recovers by deleting any files not in the indexmap and reindexing from the prepare/commit position stored in the indexmap file. Manual Merging If you have set the maximum level ( MaxAutoMergeIndexLevel ) for automatically merging indexes, then you need to trigger merging indexes above this level manually by using the [/admin/mergeindexes](xref:eventstore.org%2FHTTP%20API%2F5.0.4%2FMerge%20Indexes) endpoint, or the ES-CLI tool that is available with commercial support. Triggering a manual merge causes Event Store to merge all tables that have a level equal to the maximum merge level or above into a single table. If there is only 1 table at the maximum level or above, no merge is performed. Tuning For most Event Store clusters, the default settings are enough to give consistent and good performance. For clusters with larger numbers of events, or those that run in constrained environments the configuration options allow for some tuning to meet operational constraints. The most common optimization needed is to set a MaxAutoMergeLevel to avoid large merges occurring across all nodes at approximately the same time. Large index merges use a lot of IOPS and in IOPS constrained environments it is often desirable to have better control over when these happen. Because increasing this value requires an index rebuild you should start with a higher value and decrease until the desired balance between triggering manual merges (operational cost) and automatic merges (IOPS) cost. The exact value to set this varies between environments due to IOPS generated by other operations such as read and write load on the cluster. For example: A cluster with 3000 256b IOPS can read/write about 0.73Gb/sec (This level of IOPS represents a small cloud instance). Assuming sustained read/write throughput of 0.73Gb/s. When an index merge of level 7 or above starts, it consumes as many IOPS up to all on the node until it completes. Because Event Store has a shared nothing architecture for clustering this operation is likely to cause all nodes to appear to stall simultaneously as they all try and perform an index merge at the same time. By setting MaxAutoMergeLevel to 6 or below you can avoid this, and you can run the merge on each node individually keeping read/write latency in the cluster consistent. <!-- TODO: the 64 bit index bits should probably come under this indexing doc -->"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.StreamPositionTagger.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.StreamPositionTagger.html",
    "title": "Class StreamPositionTagger | Event Store",
    "keywords": "Class StreamPositionTagger Inheritance System.Object PositionTagger StreamPositionTagger Inherited Members PositionTagger.Phase Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class StreamPositionTagger : PositionTagger Constructors StreamPositionTagger(Int32, String) Declaration public StreamPositionTagger(int phase, string stream) Parameters Type Name System.Int32 phase System.String stream Methods AdjustTag(CheckpointTag) Declaration public override CheckpointTag AdjustTag(CheckpointTag tag) Parameters Type Name CheckpointTag tag Returns Type Description CheckpointTag Overrides PositionTagger.AdjustTag(CheckpointTag) IsCompatible(CheckpointTag) Declaration public override bool IsCompatible(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag Returns Type Description System.Boolean Overrides PositionTagger.IsCompatible(CheckpointTag) IsMessageAfterCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public override bool IsMessageAfterCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.CommittedEventDistributed committedEvent Returns Type Description System.Boolean Overrides PositionTagger.IsMessageAfterCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.CommittedEventDistributed committedEvent Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionDeleted) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.EventReaderPartitionDeleted partitionDeleted) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.EventReaderPartitionDeleted partitionDeleted Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionDeleted) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionEof) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.EventReaderPartitionEof partitionEof) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.EventReaderPartitionEof partitionEof Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionEof) MakeZeroCheckpointTag() Declaration public override CheckpointTag MakeZeroCheckpointTag() Returns Type Description CheckpointTag Overrides PositionTagger.MakeZeroCheckpointTag()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Management.ProjectionStateHandlerFactory.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Management.ProjectionStateHandlerFactory.html",
    "title": "Class ProjectionStateHandlerFactory | Event Store",
    "keywords": "Class ProjectionStateHandlerFactory Inheritance System.Object ProjectionStateHandlerFactory Namespace : EventStore.Projections.Core.Services.Management Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionStateHandlerFactory : object Methods Create(String, String, Action<Int32, Action>, Action<String, Object[]>) Declaration public IProjectionStateHandler Create(string factoryType, string source, Action<int, Action> cancelCallbackFactory = null, Action<string, object[]> logger = null) Parameters Type Name System.String factoryType System.String source Action < System.Int32 , Action > cancelCallbackFactory Action < System.String , System.Object []> logger Returns Type Description IProjectionStateHandler"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.FeedPage.ErrorStatus.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.FeedPage.ErrorStatus.html",
    "title": "Enum FeedReaderMessage.FeedPage.ErrorStatus | Event Store",
    "keywords": "Enum FeedReaderMessage.FeedPage.ErrorStatus Namespace : EventStore.Projections.Core.Messages.EventReaders.Feeds Assembly : EventStore.Projections.Core.dll Syntax public enum ErrorStatus : int Fields Name Description NotAuthorized Success Extension Methods EnumExtensions.EnumValueName<FeedReaderMessage.FeedPage.ErrorStatus>()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Conflict.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Conflict.html",
    "title": "Class ProjectionManagementMessage.Conflict | Event Store",
    "keywords": "Class ProjectionManagementMessage.Conflict Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.OperationFailed ProjectionManagementMessage.Conflict Inherited Members ProjectionManagementMessage.OperationFailed.Reason EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Conflict : ProjectionManagementMessage.OperationFailed Constructors Conflict(String) Declaration public Conflict(string reason) Parameters Type Name System.String reason Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ProjectionManagementMessage.OperationFailed.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.EnableCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.EnableCommand.html",
    "title": "Class EnableCommand | Event Store",
    "keywords": "Class EnableCommand Inheritance System.Object EnableCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class EnableCommand : object Fields Name Declaration public string Name Field Value Type System.String RunAs Declaration public SerializedRunAs RunAs Field Value Type SerializedRunAs"
  },
  "dotnet-api/code/EventStore.ClientAPI.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.html",
    "title": "Namespace EventStore.ClientAPI | Event Store",
    "keywords": "Namespace EventStore.ClientAPI Classes AllCheckpoint This class contains constants to be used when setting up subscriptions using the IEventStoreConnection.SubscribeToAllFrom method on IEventStoreConnection . AllEventsSlice The result of a read operation from the $all stream. CatchUpSubscriptionFilteredSettings Settings for EventStoreCatchUpSubscription . CatchUpSubscriptionSettings Settings for EventStoreCatchUpSubscription . ClientApiConstants Various constant values that may be useful when working with the ClientAPI. ClientAuthenticationFailedEventArgs Event Arguments for the event raised when an IEventStoreConnection fails to authenticate against an Event Store server. ClientClosedEventArgs Event Arguments for the event raised when an IEventStoreConnection is disconnected from an Event Store server. ClientConnectionEventArgs Event Arguments for the event raised when an IEventStoreConnection is connected to or disconnected from an Event Store server. ClientErrorEventArgs Event Arguments for the event raised when an error occurs on an IEventStoreConnection . ClientReconnectingEventArgs Event Arguments for the event raised when an IEventStoreConnection is about to reconnect to an Event Store server. ClusterSettings Contains settings relating to a connection to a cluster. ClusterSettingsBuilder Builder used for creating instances of ClusterSettings. ConnectionSettings A ConnectionSettings object is an immutable representation of the settings for an IEventStoreConnection . You can build a ConnectionSettings object using a ConnectionSettingsBuilder , either via the Create() method, or via the constructor of ConnectionSettingsBuilder . ConnectionSettingsBuilder Used to build a connection settings (fluent API) ConnectionString Methods for dealing with connection strings. DnsClusterSettingsBuilder Fluent builder used to configure ClusterSettings for connecting to a cluster using DNS discovery. EventData Represents an event to be written. EventReadResult A event read result is the result of a single event read operation to Event Store. EventStoreAllCatchUpSubscription A catch-up subscription to all events in the Event Store. EventStoreAllFilteredCatchUpSubscription A catch-up subscription to all events in the Event Store with an applied filter. EventStoreCatchUpSubscription Base class representing catch-up subscriptions. EventStoreConnection Contains factory methods for building connections to an Event Store server. EventStorePersistentSubscription Represents a persistent subscription connection. EventStorePersistentSubscriptionBase Represents a persistent subscription connection. EventStoreStreamCatchUpSubscription A catch-up subscription to a single stream in the Event Store. EventStoreSubscription Represents a subscription to a single stream or to the stream of all events in the Event Store. EventStoreTransaction Represents a multi-request transaction with the Event Store ExpectedVersion Constants used for expected version control Filter A Filter, used to filter events when reading from the $all stream. FilterContext A filter context. GossipSeed Represents a source of cluster gossip. GossipSeedClusterSettingsBuilder Fluent builder used to configure ClusterSettings for connecting to a cluster using gossip seeds. IEventStoreConnectionExtensions Extensions for IEventStoreConnection PersistentSubscriptionSettings Represents the settings for a EventStore.ClientAPI.PersistentEventStoreSubscription . You should not use this directly, but instead created via a PersistentSubscriptionSettingsBuilder . PersistentSubscriptionSettingsBuilder Builds a PersistentSubscriptionSettings object. RecordedEvent Represents a previously written event StreamAcl Represents an access control list for a stream StreamCheckpoint This class contains constants to be used when setting up subscriptions using the IEventStoreConnection.SubscribeToStreamFrom method on IEventStoreConnection . StreamEventsSlice A stream events slice represents the result of a single read operation to Event Store. StreamMetadata A class representing stream metadata with strongly typed properties for system values and a dictionary-like interface for custom values. StreamMetadataBuilder Builder for StreamMetadata . StreamPosition Constants for stream positions SystemSettings Represents global settings for an Event Store server. Structs ConditionalWriteResult Result type returned after conditionally writing to a stream. DeleteResult Result type returned after deleting a stream. NodeEndPoints Represents a node and its possible endpoints Position A structure referring to a potential logical record position in the Event Store transaction file. RawStreamMetadataResult Represents stream metadata as a series of properties for system data and a byte array for user metadata. ResolvedEvent A structure representing a single event or an resolved link event. StreamMetadataResult Represents stream metadata as a series of properties for system data and a StreamMetadata object for user metadata. WriteResult Result type returned after writing to a stream. Interfaces IEndPointDiscoverer Represents a way of discovering cluster endpoints. This could be through gossip, consul, text files, etc IEventStoreConnection Maintains a full duplex connection to Event Store. ILogger Simple abstraction of a logger. Enums ConditionalWriteStatus The reason why a conditional write fails EventReadStatus Enumeration representing the status of a single event read operation. NodePreference Indicates which order of preferred nodes for connecting to. PersistentSubscriptionNakEventAction Actions to be taken by server in the case of a client NAK ReadDirection Represents the direction of read operation (both from $all and usual streams) SliceReadStatus Enumeration detailing the possible outcomes of reading a slice of a stream. SubscriptionDropReason Represents the reason subscription drop happened"
  },
  "dotnet-api/code/EventStore.ClientAPI.NodeEndPoints.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.NodeEndPoints.html",
    "title": "Struct NodeEndPoints | Event Store",
    "keywords": "Struct NodeEndPoints Represents a node and its possible endpoints Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public struct NodeEndPoints Constructors NodeEndPoints(IPEndPoint, IPEndPoint) Called to create a new NodeEndPoints Declaration public NodeEndPoints(IPEndPoint tcpEndPoint, IPEndPoint secureTcpEndPoint) Parameters Type Name System.Net.IPEndPoint tcpEndPoint System.Net.IPEndPoint secureTcpEndPoint Fields SecureTcpEndPoint The ssl endpoint of the node Declaration public readonly IPEndPoint SecureTcpEndPoint Field Value Type System.Net.IPEndPoint TcpEndPoint The tcp endpoint of the node. Declaration public readonly IPEndPoint TcpEndPoint Field Value Type System.Net.IPEndPoint Methods ToString() Formats the endpoints as a string Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Extension Methods EnumExtensions.EnumValueName<T>(T)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.html",
    "title": "Class UnwrapEnvelopeHandler | Event Store",
    "keywords": "Class UnwrapEnvelopeHandler Inheritance System.Object UnwrapEnvelopeHandler Implements EventStore.Core.Bus.IHandle < UnwrapEnvelopeMessage > Namespace : EventStore.Projections.Core.Messaging Assembly : EventStore.Projections.Core.dll Syntax public class UnwrapEnvelopeHandler : object, IHandle<UnwrapEnvelopeMessage> Methods Handle(UnwrapEnvelopeMessage) Declaration public void Handle(UnwrapEnvelopeMessage message) Parameters Type Name UnwrapEnvelopeMessage message Implements EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.NoResultException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.NoResultException.html",
    "title": "Class NoResultException | Event Store",
    "keywords": "Class NoResultException Exception thrown if there is no result for an operation for which one is expected. Inheritance System.Object System.Exception EventStoreConnectionException NoResultException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class NoResultException : EventStoreConnectionException, ISerializable Constructors NoResultException() Constructs a new NoResultException . Declaration public NoResultException() NoResultException(SerializationInfo, StreamingContext) Constructs a new NoResultException . Declaration protected NoResultException(SerializationInfo info, StreamingContext context) Parameters Type Name System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context NoResultException(String) Constructs a new NoResultException . Declaration public NoResultException(string message) Parameters Type Name System.String message NoResultException(String, Exception) Constructs a new NoResultException . Declaration public NoResultException(string message, Exception innerException) Parameters Type Name System.String message System.Exception innerException Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.PostBatch.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.PostBatch.html",
    "title": "Class ProjectionManagementMessage.Command.PostBatch | Event Store",
    "keywords": "Class ProjectionManagementMessage.Command.PostBatch Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Command.ControlMessage ProjectionManagementMessage.Command.PostBatch Inherited Members ProjectionManagementMessage.Command.ControlMessage.RunAs ProjectionManagementMessage.Command.ControlMessage.Envelope EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class PostBatch : ProjectionManagementMessage.Command.ControlMessage Constructors PostBatch(IEnvelope, ProjectionManagementMessage.RunAs, ProjectionManagementMessage.Command.PostBatch.ProjectionPost[]) Declaration public PostBatch(IEnvelope envelope, ProjectionManagementMessage.RunAs runAs, ProjectionManagementMessage.Command.PostBatch.ProjectionPost[] projections) Parameters Type Name EventStore.Core.Messaging.IEnvelope envelope ProjectionManagementMessage.RunAs runAs ProjectionManagementMessage.Command.PostBatch.ProjectionPost [] projections Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ProjectionManagementMessage.Command.ControlMessage.MsgTypeId Projections Declaration public ProjectionManagementMessage.Command.PostBatch.ProjectionPost[] Projections { get; } Property Value Type ProjectionManagementMessage.Command.PostBatch.ProjectionPost []"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Management.TimeoutScheduler.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Management.TimeoutScheduler.html",
    "title": "Class TimeoutScheduler | Event Store",
    "keywords": "Class TimeoutScheduler Inheritance System.Object TimeoutScheduler Implements ISingletonTimeoutScheduler Namespace : EventStore.Projections.Core.Services.Management Assembly : EventStore.Projections.Core.dll Syntax public class TimeoutScheduler : object, ISingletonTimeoutScheduler Methods Schedule(Int32, Action) Declaration public void Schedule(int timeout, Action action) Parameters Type Name System.Int32 timeout Action action Tick() Declaration public void Tick() Implements ISingletonTimeoutScheduler"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.Prepared.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.Prepared.html",
    "title": "Class Prepared | Event Store",
    "keywords": "Class Prepared Inheritance System.Object Prepared Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class Prepared : object Properties Id Declaration public string Id { get; set; } Property Value Type System.String SourceDefinition Declaration public ProjectionSourceDefinition SourceDefinition { get; set; } Property Value Type ProjectionSourceDefinition"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IProjectionPhaseStateManager.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IProjectionPhaseStateManager.html",
    "title": "Interface IProjectionPhaseStateManager | Event Store",
    "keywords": "Interface IProjectionPhaseStateManager Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public interface IProjectionPhaseStateManager Properties LastProcessedEventPosition Declaration CheckpointTag LastProcessedEventPosition { get; } Property Value Type CheckpointTag Methods BeginGetPartitionStateAt(String, CheckpointTag, Action<PartitionState>, Boolean) Declaration void BeginGetPartitionStateAt(string statePartition, CheckpointTag at, Action<PartitionState> loadCompleted, bool lockLoaded) Parameters Type Name System.String statePartition CheckpointTag at Action < PartitionState > loadCompleted System.Boolean lockLoaded UnlockAndForgetBefore(CheckpointTag) Declaration void UnlockAndForgetBefore(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.MultiStreamEventReader.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.MultiStreamEventReader.html",
    "title": "Class MultiStreamEventReader | Event Store",
    "keywords": "Class MultiStreamEventReader Inheritance System.Object EventReader MultiStreamEventReader Implements IEventReader IDisposable EventStore.Core.Bus.IHandle < EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Internal.ReadTimeout > Inherited Members EventReader.EventReaderCorrelationId EventReader._publisher EventReader._stopOnEof EventReader._disposed EventReader.PauseRequested EventReader.Paused EventReader.ReadAs EventReader.Resume() EventReader.Pause() EventReader.Dispose() EventReader.SendEof() EventReader.SendPartitionEof(String, CheckpointTag) EventReader.SendPartitionDeleted_WhenReadingDataStream(String, Nullable<Int64>, Nullable<TFPos>, Nullable<TFPos>, String, Nullable<Int32>, CheckpointTag) EventReader.SendNotAuthorized() EventReader.GetLastCommitPositionFrom(ClientMessage.ReadStreamEventsForwardCompleted) EventReader.PauseOrContinueProcessing() EventReader.NotifyIfStarting(Int64) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class MultiStreamEventReader : EventReader, IEventReader, IDisposable, IHandle<ClientMessage.ReadStreamEventsForwardCompleted>, IHandle<ProjectionManagementMessage.Internal.ReadTimeout> Constructors MultiStreamEventReader(IODispatcher, IPublisher, Guid, IPrincipal, Int32, String[], Dictionary<String, Int64>, Boolean, ITimeProvider, Boolean, Nullable<Int32>) Declaration public MultiStreamEventReader(IODispatcher ioDispatcher, IPublisher publisher, Guid eventReaderCorrelationId, IPrincipal readAs, int phase, string[] streams, Dictionary<string, long> fromPositions, bool resolveLinkTos, ITimeProvider timeProvider, bool stopOnEof = false, int? stopAfterNEvents = null) Parameters Type Name EventStore.Core.Helpers.IODispatcher ioDispatcher EventStore.Core.Bus.IPublisher publisher Guid eventReaderCorrelationId IPrincipal readAs System.Int32 phase System.String [] streams Dictionary < System.String , System.Int64 > fromPositions System.Boolean resolveLinkTos EventStore.Core.Services.TimerService.ITimeProvider timeProvider System.Boolean stopOnEof System.Nullable < System.Int32 > stopAfterNEvents Methods AreEventsRequested() Declaration protected override bool AreEventsRequested() Returns Type Description System.Boolean Overrides EventReader.AreEventsRequested() Handle(ClientMessage.ReadStreamEventsForwardCompleted) Declaration public void Handle(ClientMessage.ReadStreamEventsForwardCompleted message) Parameters Type Name EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted message Handle(ProjectionManagementMessage.Internal.ReadTimeout) Declaration public void Handle(ProjectionManagementMessage.Internal.ReadTimeout message) Parameters Type Name ProjectionManagementMessage.Internal.ReadTimeout message RequestEvents() Declaration protected override void RequestEvents() Overrides EventReader.RequestEvents() Implements IEventReader IDisposable EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.ClientAPI.EventStoreCatchUpSubscription.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.EventStoreCatchUpSubscription.html",
    "title": "Class EventStoreCatchUpSubscription | Event Store",
    "keywords": "Class EventStoreCatchUpSubscription Base class representing catch-up subscriptions. Inheritance System.Object EventStoreCatchUpSubscription EventStoreAllCatchUpSubscription EventStoreAllFilteredCatchUpSubscription EventStoreStreamCatchUpSubscription Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public abstract class EventStoreCatchUpSubscription Constructors EventStoreCatchUpSubscription(IEventStoreConnection, ILogger, String, UserCredentials, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, CatchUpSubscriptionSettings) Constructs state for EventStoreCatchUpSubscription. Declaration protected EventStoreCatchUpSubscription(IEventStoreConnection connection, ILogger log, string streamId, UserCredentials userCredentials, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task> eventAppeared, Action<EventStoreCatchUpSubscription> liveProcessingStarted, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception> subscriptionDropped, CatchUpSubscriptionSettings settings) Parameters Type Name IEventStoreConnection connection ILogger log System.String streamId UserCredentials userCredentials System.Func < EventStoreCatchUpSubscription , ResolvedEvent , System.Threading.Tasks.Task > eventAppeared System.Action < EventStoreCatchUpSubscription > liveProcessingStarted System.Action < EventStoreCatchUpSubscription , SubscriptionDropReason , System.Exception > subscriptionDropped CatchUpSubscriptionSettings settings Fields AllowProcessing Whether or not to process events. Declaration protected volatile bool AllowProcessing Field Value Type System.Boolean Connection The IEventStoreConnection . Declaration protected readonly IEventStoreConnection Connection Field Value Type IEventStoreConnection EventAppeared Action invoked when a new event appears on the subscription. Declaration protected readonly Func<EventStoreCatchUpSubscription, ResolvedEvent, Task> EventAppeared Field Value Type System.Func < EventStoreCatchUpSubscription , ResolvedEvent , System.Threading.Tasks.Task > Log The ILogger to use for the subscription. Declaration protected readonly ILogger Log Field Value Type ILogger MaxPushQueueSize The maximum number of events to buffer before the subscription drops. Declaration protected readonly int MaxPushQueueSize Field Value Type System.Int32 ReadBatchSize The batch size to use during the read phase of the subscription. Declaration protected readonly int ReadBatchSize Field Value Type System.Int32 ResolveLinkTos Whether to resolve LinkTo events automatically Declaration protected readonly bool ResolveLinkTos Field Value Type System.Boolean ShouldStop stop has been called. Declaration protected volatile bool ShouldStop Field Value Type System.Boolean Subscription The underlying EventStoreSubscription . Declaration protected EventStoreSubscription Subscription Field Value Type EventStoreSubscription UserCredentials The UserCredentials associated with the subscription. Declaration protected readonly UserCredentials UserCredentials Field Value Type UserCredentials Verbose Whether or not to use verbose logging (useful during debugging). Declaration protected readonly bool Verbose Field Value Type System.Boolean Properties IsSubscribedToAll Indicates whether the subscription is to all events or to a specific stream. Declaration public bool IsSubscribedToAll { get; } Property Value Type System.Boolean StreamId The name of the stream to which the subscription is subscribed (empty if subscribed to all). Declaration public string StreamId { get; } Property Value Type System.String SubscriptionName The name of subscription. Declaration public string SubscriptionName { get; } Property Value Type System.String Methods EnqueueAction(Func<Task>) Places an action on the queue. Declaration protected void EnqueueAction(Func<Task> action) Parameters Type Name System.Func < System.Threading.Tasks.Task > action EnqueuePushedEvent(EventStoreSubscription, ResolvedEvent) Enqueues a pushed event. Declaration protected Task EnqueuePushedEvent(EventStoreSubscription subscription, ResolvedEvent e) Parameters Type Name EventStoreSubscription subscription ResolvedEvent e Returns Type Description System.Threading.Tasks.Task EnqueueSubscriptionDropNotification(SubscriptionDropReason, Exception) Enqueues a dropped notification for later processing. Declaration protected void EnqueueSubscriptionDropNotification(SubscriptionDropReason reason, Exception error) Parameters Type Name SubscriptionDropReason reason System.Exception error EnsureProcessingPushQueue() Forces the subscription to process the queue if necessary. Declaration protected void EnsureProcessingPushQueue() LiveProcessingStarted(EventStoreCatchUpSubscription, Position) The callback invoked when the subscription switches to push notifications. Declaration protected abstract Task LiveProcessingStarted(EventStoreCatchUpSubscription eventStoreCatchUpSubscription, Position lastPosition) Parameters Type Name EventStoreCatchUpSubscription eventStoreCatchUpSubscription Position lastPosition Returns Type Description System.Threading.Tasks.Task ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>) Read events until the given position or event number async. Declaration protected abstract Task<Position> ReadEventsTillAsync(IEventStoreConnection connection, bool resolveLinkTos, UserCredentials userCredentials, long? lastCommitPosition, long? lastEventNumber) Parameters Type Name IEventStoreConnection connection System.Boolean resolveLinkTos UserCredentials userCredentials System.Nullable < System.Int64 > lastCommitPosition System.Nullable < System.Int64 > lastEventNumber Returns Type Description System.Threading.Tasks.Task < Position > ReadMissedHistoricEventsAsync() Declaration protected Task ReadMissedHistoricEventsAsync() Returns Type Description System.Threading.Tasks.Task ServerSubscriptionDropped(EventStoreSubscription, SubscriptionDropReason, Exception) Invoked when the subscription is dropped. Declaration protected void ServerSubscriptionDropped(EventStoreSubscription subscription, SubscriptionDropReason reason, Exception exc) Parameters Type Name EventStoreSubscription subscription SubscriptionDropReason reason System.Exception exc Stop() Attempts to stop the subscription without blocking for completion of stop Declaration public void Stop() Stop(TimeSpan) Attempts to stop the subscription blocking for completion of stop. Declaration public void Stop(TimeSpan timeout) Parameters Type Name System.TimeSpan timeout Exceptions Type Condition System.TimeoutException Thrown if the subscription fails to stop within it's timeout period. SubscribeToStreamAsync() Subscribes to the stream. Declaration protected abstract Task SubscribeToStreamAsync() Returns Type Description System.Threading.Tasks.Task TryProcessAsync(ResolvedEvent) Try to process a single ResolvedEvent . Declaration protected abstract Task TryProcessAsync(ResolvedEvent e) Parameters Type Name ResolvedEvent e Returns Type Description System.Threading.Tasks.Task"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionSubsystemMessage.RestartSubsystem.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionSubsystemMessage.RestartSubsystem.html",
    "title": "Class ProjectionSubsystemMessage.RestartSubsystem | Event Store",
    "keywords": "Class ProjectionSubsystemMessage.RestartSubsystem Inheritance System.Object EventStore.Core.Messaging.Message ProjectionSubsystemMessage.RestartSubsystem Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class RestartSubsystem : Message Constructors RestartSubsystem(IEnvelope) Declaration public RestartSubsystem(IEnvelope replyEnvelope) Parameters Type Name EventStore.Core.Messaging.IEnvelope replyEnvelope Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId ReplyEnvelope Declaration public IEnvelope ReplyEnvelope { get; } Property Value Type EventStore.Core.Messaging.IEnvelope"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.CommandNotExpectedException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.CommandNotExpectedException.html",
    "title": "Class CommandNotExpectedException | Event Store",
    "keywords": "Class CommandNotExpectedException Exception thrown if an unexpected command is received. Inheritance System.Object System.Exception EventStoreConnectionException CommandNotExpectedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class CommandNotExpectedException : EventStoreConnectionException, ISerializable Constructors CommandNotExpectedException(String) Constructs a new CommandNotExpectedException . Declaration public CommandNotExpectedException(string unexpectedCommand) Parameters Type Name System.String unexpectedCommand CommandNotExpectedException(String, String) Constructs a new CommandNotExpectedException . Declaration public CommandNotExpectedException(string expected, string actual) Parameters Type Name System.String expected System.String actual Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.RetriesLimitReachedException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.RetriesLimitReachedException.html",
    "title": "Class RetriesLimitReachedException | Event Store",
    "keywords": "Class RetriesLimitReachedException Exception thrown if the number of retries for an operation is reached. To change the number of retries attempted for an operation, use the methods LimitRetriesForOperationTo(Int32) or KeepRetrying() and pass the resulting ConnectionSettings into the constructor of the connection. Inheritance System.Object System.Exception EventStoreConnectionException RetriesLimitReachedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class RetriesLimitReachedException : EventStoreConnectionException, ISerializable Constructors RetriesLimitReachedException(Int32) Constructs a new instance of RetriesLimitReachedException . Declaration public RetriesLimitReachedException(int retries) Parameters Type Name System.Int32 retries RetriesLimitReachedException(String, Int32) Constructs a new instance of RetriesLimitReachedException . Declaration public RetriesLimitReachedException(string item, int retries) Parameters Type Name System.String item System.Int32 retries Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ContinuousProjectionProcessingStrategy.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ContinuousProjectionProcessingStrategy.html",
    "title": "Class ContinuousProjectionProcessingStrategy | Event Store",
    "keywords": "Class ContinuousProjectionProcessingStrategy Inheritance System.Object ProjectionProcessingStrategy EventReaderBasedProjectionProcessingStrategy DefaultProjectionProcessingStrategy ContinuousProjectionProcessingStrategy Inherited Members DefaultProjectionProcessingStrategy.CreateFirstProcessingPhase(IPublisher, IPublisher, Guid, PartitionStateCache, Action, CoreProjection, ReaderSubscriptionDispatcher, CheckpointTag, ICoreProjectionCheckpointManager, IReaderStrategy, IResultWriter, IEmittedStreamsTracker) DefaultProjectionProcessingStrategy.CreateStatePartitionSelector() EventReaderBasedProjectionProcessingStrategy._projectionConfig EventReaderBasedProjectionProcessingStrategy._sourceDefinition EventReaderBasedProjectionProcessingStrategy.CreateProcessingPhases(IPublisher, IPublisher, Guid, PartitionStateCache, Action, CoreProjection, ProjectionNamesBuilder, ITimeProvider, IODispatcher, CoreProjectionCheckpointWriter) EventReaderBasedProjectionProcessingStrategy.CreateReaderStrategy(ITimeProvider) EventReaderBasedProjectionProcessingStrategy.GetSourceDefinition() EventReaderBasedProjectionProcessingStrategy.GetRequiresRootPartition() EventReaderBasedProjectionProcessingStrategy.EnrichStatistics(ProjectionStatistics) EventReaderBasedProjectionProcessingStrategy.CreateCheckpointManager(Guid, IPublisher, IODispatcher, ProjectionNamesBuilder, CoreProjectionCheckpointWriter, Boolean, IReaderStrategy) EventReaderBasedProjectionProcessingStrategy.CreateFirstPhaseResultWriter(IEmittedEventWriter, CheckpointTag, ProjectionNamesBuilder) ProjectionProcessingStrategy._name ProjectionProcessingStrategy._projectionVersion ProjectionProcessingStrategy._logger ProjectionProcessingStrategy.Create(Guid, IPublisher, Guid, IPrincipal, IPublisher, IODispatcher, ReaderSubscriptionDispatcher, ITimeProvider) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class ContinuousProjectionProcessingStrategy : DefaultProjectionProcessingStrategy Constructors ContinuousProjectionProcessingStrategy(String, ProjectionVersion, IProjectionStateHandler, ProjectionConfig, IQuerySources, ILogger, ReaderSubscriptionDispatcher) Declaration public ContinuousProjectionProcessingStrategy(string name, ProjectionVersion projectionVersion, IProjectionStateHandler stateHandler, ProjectionConfig projectionConfig, IQuerySources sourceDefinition, ILogger logger, ReaderSubscriptionDispatcher subscriptionDispatcher) Parameters Type Name System.String name ProjectionVersion projectionVersion IProjectionStateHandler stateHandler ProjectionConfig projectionConfig IQuerySources sourceDefinition EventStore.Common.Log.ILogger logger ReaderSubscriptionDispatcher subscriptionDispatcher Methods CreateFirstPhaseResultEmitter(ProjectionNamesBuilder) Declaration protected override IResultEventEmitter CreateFirstPhaseResultEmitter(ProjectionNamesBuilder namingBuilder) Parameters Type Name ProjectionNamesBuilder namingBuilder Returns Type Description IResultEventEmitter Overrides EventReaderBasedProjectionProcessingStrategy.CreateFirstPhaseResultEmitter(ProjectionNamesBuilder) CreateProjectionProcessingPhases(IPublisher, IPublisher, Guid, ProjectionNamesBuilder, PartitionStateCache, CoreProjection, IODispatcher, IProjectionProcessingPhase) Declaration protected override IProjectionProcessingPhase[] CreateProjectionProcessingPhases(IPublisher publisher, IPublisher inputQueue, Guid projectionCorrelationId, ProjectionNamesBuilder namingBuilder, PartitionStateCache partitionStateCache, CoreProjection coreProjection, IODispatcher ioDispatcher, IProjectionProcessingPhase firstPhase) Parameters Type Name EventStore.Core.Bus.IPublisher publisher EventStore.Core.Bus.IPublisher inputQueue Guid projectionCorrelationId ProjectionNamesBuilder namingBuilder PartitionStateCache partitionStateCache CoreProjection coreProjection EventStore.Core.Helpers.IODispatcher ioDispatcher IProjectionProcessingPhase firstPhase Returns Type Description IProjectionProcessingPhase [] Overrides EventReaderBasedProjectionProcessingStrategy.CreateProjectionProcessingPhases(IPublisher, IPublisher, Guid, ProjectionNamesBuilder, PartitionStateCache, CoreProjection, IODispatcher, IProjectionProcessingPhase) GetProducesRunningResults() Declaration public override bool GetProducesRunningResults() Returns Type Description System.Boolean Overrides ProjectionProcessingStrategy.GetProducesRunningResults() GetStopOnEof() Declaration public override bool GetStopOnEof() Returns Type Description System.Boolean Overrides ProjectionProcessingStrategy.GetStopOnEof() GetUseCheckpoints() Declaration public override bool GetUseCheckpoints() Returns Type Description System.Boolean Overrides ProjectionProcessingStrategy.GetUseCheckpoints()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Management.ProjectionManager.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Management.ProjectionManager.html",
    "title": "Class ProjectionManager | Event Store",
    "keywords": "Class ProjectionManager Inheritance System.Object ProjectionManager Implements EventStore.Core.Bus.IHandle < EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted > EventStore.Core.Bus.IHandle < EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted > EventStore.Core.Bus.IHandle < EventStore.Core.Messages.ClientMessage.WriteEventsCompleted > EventStore.Core.Bus.IHandle < EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.Post > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.PostBatch > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.UpdateQuery > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.GetQuery > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.Delete > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.GetStatistics > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.GetState > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.GetResult > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.Disable > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.Enable > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.Abort > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.SetRunAs > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.Reset > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.GetConfig > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.UpdateConfig > EventStore.Core.Bus.IHandle < ProjectionSubsystemMessage.StartComponents > EventStore.Core.Bus.IHandle < ProjectionSubsystemMessage.StopComponents > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Internal.CleanupExpired > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Internal.Deleted > EventStore.Core.Bus.IHandle < CoreProjectionStatusMessage.Started > EventStore.Core.Bus.IHandle < CoreProjectionStatusMessage.Stopped > EventStore.Core.Bus.IHandle < CoreProjectionStatusMessage.Faulted > EventStore.Core.Bus.IHandle < CoreProjectionStatusMessage.Prepared > EventStore.Core.Bus.IHandle < CoreProjectionStatusMessage.StateReport > EventStore.Core.Bus.IHandle < CoreProjectionStatusMessage.ResultReport > EventStore.Core.Bus.IHandle < CoreProjectionStatusMessage.StatisticsReport > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.ReaderReady > Namespace : EventStore.Projections.Core.Services.Management Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionManager : IDisposable, IHandle<ClientMessage.ReadStreamEventsBackwardCompleted>, IHandle<ClientMessage.ReadStreamEventsForwardCompleted>, IHandle<ClientMessage.WriteEventsCompleted>, IHandle<ClientMessage.DeleteStreamCompleted>, IHandle<ProjectionManagementMessage.Command.Post>, IHandle<ProjectionManagementMessage.Command.PostBatch>, IHandle<ProjectionManagementMessage.Command.UpdateQuery>, IHandle<ProjectionManagementMessage.Command.GetQuery>, IHandle<ProjectionManagementMessage.Command.Delete>, IHandle<ProjectionManagementMessage.Command.GetStatistics>, IHandle<ProjectionManagementMessage.Command.GetState>, IHandle<ProjectionManagementMessage.Command.GetResult>, IHandle<ProjectionManagementMessage.Command.Disable>, IHandle<ProjectionManagementMessage.Command.Enable>, IHandle<ProjectionManagementMessage.Command.Abort>, IHandle<ProjectionManagementMessage.Command.SetRunAs>, IHandle<ProjectionManagementMessage.Command.Reset>, IHandle<ProjectionManagementMessage.Command.GetConfig>, IHandle<ProjectionManagementMessage.Command.UpdateConfig>, IHandle<ProjectionSubsystemMessage.StartComponents>, IHandle<ProjectionSubsystemMessage.StopComponents>, IHandle<ProjectionManagementMessage.Internal.CleanupExpired>, IHandle<ProjectionManagementMessage.Internal.Deleted>, IHandle<CoreProjectionStatusMessage.Started>, IHandle<CoreProjectionStatusMessage.Stopped>, IHandle<CoreProjectionStatusMessage.Faulted>, IHandle<CoreProjectionStatusMessage.Prepared>, IHandle<CoreProjectionStatusMessage.StateReport>, IHandle<CoreProjectionStatusMessage.ResultReport>, IHandle<CoreProjectionStatusMessage.StatisticsReport>, IHandle<ProjectionManagementMessage.ReaderReady> Constructors ProjectionManager(IPublisher, IPublisher, IDictionary<Guid, IPublisher>, ITimeProvider, ProjectionType, IODispatcher, TimeSpan, Boolean) Declaration public ProjectionManager(IPublisher inputQueue, IPublisher publisher, IDictionary<Guid, IPublisher> queueMap, ITimeProvider timeProvider, ProjectionType runProjections, IODispatcher ioDispatcher, TimeSpan projectionQueryExpiry, bool initializeSystemProjections = true) Parameters Type Name EventStore.Core.Bus.IPublisher inputQueue EventStore.Core.Bus.IPublisher publisher IDictionary < Guid , EventStore.Core.Bus.IPublisher > queueMap EventStore.Core.Services.TimerService.ITimeProvider timeProvider EventStore.Common.Options.ProjectionType runProjections EventStore.Core.Helpers.IODispatcher ioDispatcher TimeSpan projectionQueryExpiry System.Boolean initializeSystemProjections Fields ProjectionCreationRetryCount Declaration public const int ProjectionCreationRetryCount = null Field Value Type System.Int32 ProjectionQueryId Declaration public const int ProjectionQueryId = null Field Value Type System.Int32 ServiceName Declaration public const string ServiceName = null Field Value Type System.String Methods Dispose() Declaration public void Dispose() Handle(ClientMessage.DeleteStreamCompleted) Declaration public void Handle(ClientMessage.DeleteStreamCompleted message) Parameters Type Name EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted message Handle(ClientMessage.ReadStreamEventsBackwardCompleted) Declaration public void Handle(ClientMessage.ReadStreamEventsBackwardCompleted message) Parameters Type Name EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted message Handle(ClientMessage.ReadStreamEventsForwardCompleted) Declaration public void Handle(ClientMessage.ReadStreamEventsForwardCompleted message) Parameters Type Name EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted message Handle(ClientMessage.WriteEventsCompleted) Declaration public void Handle(ClientMessage.WriteEventsCompleted message) Parameters Type Name EventStore.Core.Messages.ClientMessage.WriteEventsCompleted message Handle(CoreProjectionStatusMessage.Faulted) Declaration public void Handle(CoreProjectionStatusMessage.Faulted message) Parameters Type Name CoreProjectionStatusMessage.Faulted message Handle(CoreProjectionStatusMessage.Prepared) Declaration public void Handle(CoreProjectionStatusMessage.Prepared message) Parameters Type Name CoreProjectionStatusMessage.Prepared message Handle(CoreProjectionStatusMessage.ResultReport) Declaration public void Handle(CoreProjectionStatusMessage.ResultReport message) Parameters Type Name CoreProjectionStatusMessage.ResultReport message Handle(CoreProjectionStatusMessage.Started) Declaration public void Handle(CoreProjectionStatusMessage.Started message) Parameters Type Name CoreProjectionStatusMessage.Started message Handle(CoreProjectionStatusMessage.StateReport) Declaration public void Handle(CoreProjectionStatusMessage.StateReport message) Parameters Type Name CoreProjectionStatusMessage.StateReport message Handle(CoreProjectionStatusMessage.StatisticsReport) Declaration public void Handle(CoreProjectionStatusMessage.StatisticsReport message) Parameters Type Name CoreProjectionStatusMessage.StatisticsReport message Handle(CoreProjectionStatusMessage.Stopped) Declaration public void Handle(CoreProjectionStatusMessage.Stopped message) Parameters Type Name CoreProjectionStatusMessage.Stopped message Handle(ProjectionManagementMessage.Command.Abort) Declaration public void Handle(ProjectionManagementMessage.Command.Abort message) Parameters Type Name ProjectionManagementMessage.Command.Abort message Handle(ProjectionManagementMessage.Command.Delete) Declaration public void Handle(ProjectionManagementMessage.Command.Delete message) Parameters Type Name ProjectionManagementMessage.Command.Delete message Handle(ProjectionManagementMessage.Command.Disable) Declaration public void Handle(ProjectionManagementMessage.Command.Disable message) Parameters Type Name ProjectionManagementMessage.Command.Disable message Handle(ProjectionManagementMessage.Command.Enable) Declaration public void Handle(ProjectionManagementMessage.Command.Enable message) Parameters Type Name ProjectionManagementMessage.Command.Enable message Handle(ProjectionManagementMessage.Command.GetConfig) Declaration public void Handle(ProjectionManagementMessage.Command.GetConfig message) Parameters Type Name ProjectionManagementMessage.Command.GetConfig message Handle(ProjectionManagementMessage.Command.GetQuery) Declaration public void Handle(ProjectionManagementMessage.Command.GetQuery message) Parameters Type Name ProjectionManagementMessage.Command.GetQuery message Handle(ProjectionManagementMessage.Command.GetResult) Declaration public void Handle(ProjectionManagementMessage.Command.GetResult message) Parameters Type Name ProjectionManagementMessage.Command.GetResult message Handle(ProjectionManagementMessage.Command.GetState) Declaration public void Handle(ProjectionManagementMessage.Command.GetState message) Parameters Type Name ProjectionManagementMessage.Command.GetState message Handle(ProjectionManagementMessage.Command.GetStatistics) Declaration public void Handle(ProjectionManagementMessage.Command.GetStatistics message) Parameters Type Name ProjectionManagementMessage.Command.GetStatistics message Handle(ProjectionManagementMessage.Command.Post) Declaration public void Handle(ProjectionManagementMessage.Command.Post message) Parameters Type Name ProjectionManagementMessage.Command.Post message Handle(ProjectionManagementMessage.Command.PostBatch) Declaration public void Handle(ProjectionManagementMessage.Command.PostBatch message) Parameters Type Name ProjectionManagementMessage.Command.PostBatch message Handle(ProjectionManagementMessage.Command.Reset) Declaration public void Handle(ProjectionManagementMessage.Command.Reset message) Parameters Type Name ProjectionManagementMessage.Command.Reset message Handle(ProjectionManagementMessage.Command.SetRunAs) Declaration public void Handle(ProjectionManagementMessage.Command.SetRunAs message) Parameters Type Name ProjectionManagementMessage.Command.SetRunAs message Handle(ProjectionManagementMessage.Command.UpdateConfig) Declaration public void Handle(ProjectionManagementMessage.Command.UpdateConfig message) Parameters Type Name ProjectionManagementMessage.Command.UpdateConfig message Handle(ProjectionManagementMessage.Command.UpdateQuery) Declaration public void Handle(ProjectionManagementMessage.Command.UpdateQuery message) Parameters Type Name ProjectionManagementMessage.Command.UpdateQuery message Handle(ProjectionManagementMessage.Internal.CleanupExpired) Declaration public void Handle(ProjectionManagementMessage.Internal.CleanupExpired message) Parameters Type Name ProjectionManagementMessage.Internal.CleanupExpired message Handle(ProjectionManagementMessage.Internal.Deleted) Declaration public void Handle(ProjectionManagementMessage.Internal.Deleted message) Parameters Type Name ProjectionManagementMessage.Internal.Deleted message Handle(ProjectionManagementMessage.ReaderReady) Declaration public void Handle(ProjectionManagementMessage.ReaderReady message) Parameters Type Name ProjectionManagementMessage.ReaderReady message Handle(ProjectionSubsystemMessage.StartComponents) Declaration public void Handle(ProjectionSubsystemMessage.StartComponents message) Parameters Type Name ProjectionSubsystemMessage.StartComponents message Handle(ProjectionSubsystemMessage.StopComponents) Declaration public void Handle(ProjectionSubsystemMessage.StopComponents message) Parameters Type Name ProjectionSubsystemMessage.StopComponents message Implements EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.ClientAPI.Transport.Http.IHttpClient.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Transport.Http.IHttpClient.html",
    "title": "Interface IHttpClient | Event Store",
    "keywords": "Interface IHttpClient An IHttpClient. Namespace : EventStore.ClientAPI.Transport.Http Assembly : EventStore.ClientAPI.dll Syntax public interface IHttpClient Methods Delete(String, UserCredentials, Action<HttpResponse>, Action<Exception>) Invokes a DELETE request. Declaration void Delete(string url, UserCredentials userCredentials, Action<HttpResponse> onSuccess, Action<Exception> onException) Parameters Type Name System.String url UserCredentials userCredentials System.Action < HttpResponse > onSuccess System.Action < System.Exception > onException Get(String, UserCredentials, Action<HttpResponse>, Action<Exception>, String) Invokes a GET request. Declaration void Get(string url, UserCredentials userCredentials, Action<HttpResponse> onSuccess, Action<Exception> onException, string hostHeader = \"\") Parameters Type Name System.String url UserCredentials userCredentials System.Action < HttpResponse > onSuccess System.Action < System.Exception > onException System.String hostHeader Post(String, String, String, UserCredentials, Action<HttpResponse>, Action<Exception>) Invokes a POST request. Declaration void Post(string url, string body, string contentType, UserCredentials userCredentials, Action<HttpResponse> onSuccess, Action<Exception> onException) Parameters Type Name System.String url System.String body System.String contentType UserCredentials userCredentials System.Action < HttpResponse > onSuccess System.Action < System.Exception > onException Put(String, String, String, UserCredentials, Action<HttpResponse>, Action<Exception>) Invokes a PUT request. Declaration void Put(string url, string body, string contentType, UserCredentials userCredentials, Action<HttpResponse> onSuccess, Action<Exception> onException) Parameters Type Name System.String url System.String body System.String contentType UserCredentials userCredentials System.Action < HttpResponse > onSuccess System.Action < System.Exception > onException"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CheckpointWorkItemBase.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CheckpointWorkItemBase.html",
    "title": "Class CheckpointWorkItemBase | Event Store",
    "keywords": "Class CheckpointWorkItemBase Inheritance System.Object StagedTask WorkItem CheckpointWorkItemBase CheckpointSuggestedWorkItem Inherited Members WorkItem._requiresRunning WorkItem.Queue WorkItem.Process(Int32, Action<Int32, Object>) WorkItem.RecordEventOrder() WorkItem.GetStatePartition() WorkItem.Load(CheckpointTag) WorkItem.ProcessEvent() WorkItem.WriteOutput() WorkItem.CompleteItem() WorkItem.NextStage(Object) WorkItem.SetCheckpointTag(CheckpointTag) WorkItem.SetProjectionQueue(CoreProjectionQueue) StagedTask.InitialCorrelationId Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class CheckpointWorkItemBase : WorkItem Constructors CheckpointWorkItemBase() Declaration protected CheckpointWorkItemBase() CheckpointWorkItemBase(Object) Declaration protected CheckpointWorkItemBase(object correlation) Parameters Type Name System.Object correlation"
  },
  "dotnet-api/code/EventStore.ClientAPI.GossipSeedClusterSettingsBuilder.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.GossipSeedClusterSettingsBuilder.html",
    "title": "Class GossipSeedClusterSettingsBuilder | Event Store",
    "keywords": "Class GossipSeedClusterSettingsBuilder Fluent builder used to configure ClusterSettings for connecting to a cluster using gossip seeds. Inheritance System.Object GossipSeedClusterSettingsBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class GossipSeedClusterSettingsBuilder Methods Build() Builds a ClusterSettings object from a GossipSeedClusterSettingsBuilder . Declaration public ClusterSettings Build() Returns Type Description ClusterSettings KeepDiscovering() Allows infinite nodes discovery attempts. Declaration public GossipSeedClusterSettingsBuilder KeepDiscovering() Returns Type Description GossipSeedClusterSettingsBuilder PreferRandomNode() Whether to randomly choose a node that's alive from the known nodes. Declaration public GossipSeedClusterSettingsBuilder PreferRandomNode() Returns Type Description GossipSeedClusterSettingsBuilder A DnsClusterSettingsBuilder for further configuration. PreferReadOnlyReplica() Whether to prioritize choosing a read only replica that's alive from the known nodes. Declaration public GossipSeedClusterSettingsBuilder PreferReadOnlyReplica() Returns Type Description GossipSeedClusterSettingsBuilder A DnsClusterSettingsBuilder for further configuration. PreferSlaveNode() Whether to prioritize choosing a slave node that's alive from the known nodes. Declaration public GossipSeedClusterSettingsBuilder PreferSlaveNode() Returns Type Description GossipSeedClusterSettingsBuilder A DnsClusterSettingsBuilder for further configuration. SetGossipSeedEndPoints(GossipSeed[]) Sets gossip seed endpoints for the client. Declaration public GossipSeedClusterSettingsBuilder SetGossipSeedEndPoints(params GossipSeed[] gossipSeeds) Parameters Type Name GossipSeed [] gossipSeeds Returns Type Description GossipSeedClusterSettingsBuilder A ClusterSettingsBuilder for further configuration. Exceptions Type Condition System.ArgumentException If no gossip seeds are specified. SetGossipSeedEndPoints(Boolean, IPEndPoint[]) Sets gossip seed endpoints for the client. TODO: This was a note. This should be the external HTTP endpoint of the server, as it is required for the client to exchange gossip with the server. The standard port is 2113. If the server requires a specific Host header to be sent as part of the gossip request, use the overload of this method taking GossipSeed instead. Declaration public GossipSeedClusterSettingsBuilder SetGossipSeedEndPoints(bool tlsTerminatedEndpoints, params IPEndPoint[] gossipSeeds) Parameters Type Name System.Boolean tlsTerminatedEndpoints System.Net.IPEndPoint [] gossipSeeds Returns Type Description GossipSeedClusterSettingsBuilder A ClusterSettingsBuilder for further configuration. Exceptions Type Condition System.ArgumentException If no gossip seeds are specified. SetGossipSeedEndPoints(IPEndPoint[]) Sets gossip seed endpoints for the client. TODO: This was a note. This should be the external HTTP endpoint of the server, as it is required for the client to exchange gossip with the server. The standard port is 2113. If the server requires a specific Host header to be sent as part of the gossip request, use the overload of this method taking GossipSeed instead. Declaration public GossipSeedClusterSettingsBuilder SetGossipSeedEndPoints(params IPEndPoint[] gossipSeeds) Parameters Type Name System.Net.IPEndPoint [] gossipSeeds Returns Type Description GossipSeedClusterSettingsBuilder A ClusterSettingsBuilder for further configuration. Exceptions Type Condition System.ArgumentException If no gossip seeds are specified. SetGossipTimeout(TimeSpan) Sets the period after which gossip times out if none is received. Declaration public GossipSeedClusterSettingsBuilder SetGossipTimeout(TimeSpan timeout) Parameters Type Name System.TimeSpan timeout Returns Type Description GossipSeedClusterSettingsBuilder A GossipSeedClusterSettingsBuilder for further configuration. SetMaxDiscoverAttempts(Int32) Sets the maximum number of attempts for discovery. Declaration public GossipSeedClusterSettingsBuilder SetMaxDiscoverAttempts(int maxDiscoverAttempts) Parameters Type Name System.Int32 maxDiscoverAttempts Returns Type Description GossipSeedClusterSettingsBuilder A GossipSeedClusterSettingsBuilder for further configuration. Exceptions Type Condition System.ArgumentOutOfRangeException If maxDiscoverAttempts is less than or equal to 0. Operators Implicit(GossipSeedClusterSettingsBuilder to ClusterSettings) Builds a ClusterSettings object from a GossipSeedClusterSettingsBuilder . Declaration public static implicit operator ClusterSettings(GossipSeedClusterSettingsBuilder builder) Parameters Type Name GossipSeedClusterSettingsBuilder builder Returns Type Description ClusterSettings"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderStarting.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderStarting.html",
    "title": "Class ReaderSubscriptionMessage.EventReaderStarting | Event Store",
    "keywords": "Class ReaderSubscriptionMessage.EventReaderStarting Inheritance System.Object EventStore.Core.Messaging.Message ReaderSubscriptionMessage.SubscriptionMessage ReaderSubscriptionMessage.EventReaderStarting Inherited Members ReaderSubscriptionMessage.SubscriptionMessage.CorrelationId ReaderSubscriptionMessage.SubscriptionMessage.PreTagged ReaderSubscriptionMessage.SubscriptionMessage.Source EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public sealed class EventReaderStarting : ReaderSubscriptionMessage.SubscriptionMessage Constructors EventReaderStarting(Guid, Int64, Object) Declaration public EventReaderStarting(Guid correlationId, long lastCommitPosition, object source = null) Parameters Type Name Guid correlationId System.Int64 lastCommitPosition System.Object source Properties LastCommitPosition Declaration public long LastCommitPosition { get; } Property Value Type System.Int64 MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ReaderSubscriptionMessage.SubscriptionMessage.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedDataEvent.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedDataEvent.html",
    "title": "Class EmittedDataEvent | Event Store",
    "keywords": "Class EmittedDataEvent Inheritance System.Object EmittedEvent EmittedDataEvent Inherited Members EmittedEvent.StreamId EmittedEvent.EventId EmittedEvent.EventType EmittedEvent.CausedByTag EmittedEvent.ExpectedTag EmittedEvent.OnCommitted EmittedEvent.CausedBy EmittedEvent.CorrelationId EmittedEvent.SetCausedBy(Guid) EmittedEvent.SetCorrelationId(String) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class EmittedDataEvent : EmittedEvent Constructors EmittedDataEvent(String, Guid, String, Boolean, String, ExtraMetaData, CheckpointTag, CheckpointTag, Action<Int64>) Declaration public EmittedDataEvent(string streamId, Guid eventId, string eventType, bool isJson, string data, ExtraMetaData metadata, CheckpointTag causedByTag, CheckpointTag expectedTag, Action<long> onCommitted = null) Parameters Type Name System.String streamId Guid eventId System.String eventType System.Boolean isJson System.String data ExtraMetaData metadata CheckpointTag causedByTag CheckpointTag expectedTag Action < System.Int64 > onCommitted Properties Data Declaration public override string Data { get; } Property Value Type System.String Overrides EmittedEvent.Data IsJson Declaration public override bool IsJson { get; } Property Value Type System.Boolean Overrides EmittedEvent.IsJson Metadata Declaration public ExtraMetaData Metadata { get; } Property Value Type ExtraMetaData Methods ExtraMetaData() Declaration public override IEnumerable<KeyValuePair<string, string>> ExtraMetaData() Returns Type Description IEnumerable < KeyValuePair < System.String , System.String >> Overrides EmittedEvent.ExtraMetaData() IsReady() Declaration public override bool IsReady() Returns Type Description System.Boolean Overrides EmittedEvent.IsReady() ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.ExpectedVersion.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ExpectedVersion.html",
    "title": "Class ExpectedVersion | Event Store",
    "keywords": "Class ExpectedVersion Constants used for expected version control Inheritance System.Object ExpectedVersion Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public static class ExpectedVersion Remarks The use of expected version can be a bit tricky especially when discussing idempotency assurances given by Event Store. There are four possible values you can use for passing an expected version. Any other value states that the last event written to the stream should have a sequence number matching your expected value. Event Store assures idempotency for all operations using any value in ExpectedVersion except for ExpectedVersion.Any and ExpectedVersion.StreamExists. When using ExpectedVersion.Any or ExpectedVersion.StreamExists Event Store does its best to assure idempotency but does not guarantee idempotency. Fields Any The write should not conflict with anything and should always succeed. Declaration public const int Any = -2 Field Value Type System.Int32 EmptyStream The stream should exist but be empty when writing. If it does not exist or is not empty treat that as a concurrency problem. Declaration [Obsolete(\"ExpectedVersion.EmptyStream has been deprecated. Use ExpectedVersion.NoStream instead\")] public const int EmptyStream = -1 Field Value Type System.Int32 NoStream The stream should not yet exist. If it does exist treat that as a concurrency problem. Declaration public const int NoStream = -1 Field Value Type System.Int32 StreamExists The stream should exist. If it or a metadata stream does not exist treat that as a concurrency problem. Declaration public const int StreamExists = -4 Field Value Type System.Int32"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.ReaderSubscriptionDispatcher.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.ReaderSubscriptionDispatcher.html",
    "title": "Class ReaderSubscriptionDispatcher | Event Store",
    "keywords": "Class ReaderSubscriptionDispatcher Inheritance System.Object PublishSubscribeDispatcher < Guid , ReaderSubscriptionManagement.Subscribe , ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage , EventReaderSubscriptionMessageBase > ReaderSubscriptionDispatcher Inherited Members PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase>.PublishSubscribe(ReaderSubscriptionManagement.Subscribe, Object) PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase>.PublishSubscribe(IPublisher, ReaderSubscriptionManagement.Subscribe, Object) PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase>.Publish(ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage) PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase>.Publish(IPublisher, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage) PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase>.Cancel(Guid) PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase>.CancelAll() PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase>.CreateSubscriber<T>() PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase>.Handle<T>(T) PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase>.Subscribed(Guid, Object) Namespace : EventStore.Projections.Core.Services Assembly : EventStore.Projections.Core.dll Syntax public sealed class ReaderSubscriptionDispatcher : PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase> Constructors ReaderSubscriptionDispatcher(IPublisher) Declaration public ReaderSubscriptionDispatcher(IPublisher publisher) Parameters Type Name EventStore.Core.Bus.IPublisher publisher"
  },
  "dotnet-api/code/EventStore.ClientAPI.Transport.Http.HttpAsyncClient.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Transport.Http.HttpAsyncClient.html",
    "title": "Class HttpAsyncClient | Event Store",
    "keywords": "Class HttpAsyncClient An HttpAsyncClient. Inheritance System.Object HttpAsyncClient Implements IHttpClient Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI.Transport.Http Assembly : EventStore.ClientAPI.dll Syntax public class HttpAsyncClient : IHttpClient Constructors HttpAsyncClient(TimeSpan, HttpMessageHandler) Constructs an HttpAsyncClient . Declaration public HttpAsyncClient(TimeSpan timeout, HttpMessageHandler clientHandler = null) Parameters Type Name System.TimeSpan timeout System.Net.Http.HttpMessageHandler clientHandler Methods Delete(String, UserCredentials, Action<HttpResponse>, Action<Exception>) Invokes a DELETE request. Declaration public void Delete(string url, UserCredentials userCredentials, Action<HttpResponse> onSuccess, Action<Exception> onException) Parameters Type Name System.String url UserCredentials userCredentials System.Action < HttpResponse > onSuccess System.Action < System.Exception > onException Get(String, UserCredentials, Action<HttpResponse>, Action<Exception>, String) Invokes a GET request. Declaration public void Get(string url, UserCredentials userCredentials, Action<HttpResponse> onSuccess, Action<Exception> onException, string hostHeader = \"\") Parameters Type Name System.String url UserCredentials userCredentials System.Action < HttpResponse > onSuccess System.Action < System.Exception > onException System.String hostHeader Post(String, String, String, UserCredentials, Action<HttpResponse>, Action<Exception>) Invokes a POST request. Declaration public void Post(string url, string body, string contentType, UserCredentials userCredentials, Action<HttpResponse> onSuccess, Action<Exception> onException) Parameters Type Name System.String url System.String body System.String contentType UserCredentials userCredentials System.Action < HttpResponse > onSuccess System.Action < System.Exception > onException Put(String, String, String, UserCredentials, Action<HttpResponse>, Action<Exception>) Invokes a PUT request. Declaration public void Put(string url, string body, string contentType, UserCredentials userCredentials, Action<HttpResponse> onSuccess, Action<Exception> onException) Parameters Type Name System.String url System.String body System.String contentType UserCredentials userCredentials System.Action < HttpResponse > onSuccess System.Action < System.Exception > onException Implements IHttpClient"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CheckpointSuggestedWorkItem.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CheckpointSuggestedWorkItem.html",
    "title": "Class CheckpointSuggestedWorkItem | Event Store",
    "keywords": "Class CheckpointSuggestedWorkItem Inheritance System.Object StagedTask WorkItem CheckpointWorkItemBase CheckpointSuggestedWorkItem Inherited Members WorkItem._requiresRunning WorkItem.Queue WorkItem.Process(Int32, Action<Int32, Object>) WorkItem.RecordEventOrder() WorkItem.GetStatePartition() WorkItem.Load(CheckpointTag) WorkItem.ProcessEvent() WorkItem.NextStage(Object) WorkItem.SetCheckpointTag(CheckpointTag) WorkItem.SetProjectionQueue(CoreProjectionQueue) StagedTask.InitialCorrelationId Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class CheckpointSuggestedWorkItem : CheckpointWorkItemBase Constructors CheckpointSuggestedWorkItem(IProjectionPhaseCheckpointManager, EventReaderSubscriptionMessage.CheckpointSuggested, ICoreProjectionCheckpointManager) Declaration public CheckpointSuggestedWorkItem(IProjectionPhaseCheckpointManager projectionPhase, EventReaderSubscriptionMessage.CheckpointSuggested message, ICoreProjectionCheckpointManager checkpointManager) Parameters Type Name IProjectionPhaseCheckpointManager projectionPhase EventReaderSubscriptionMessage.CheckpointSuggested message ICoreProjectionCheckpointManager checkpointManager Methods CompleteItem() Declaration protected override void CompleteItem() Overrides WorkItem.CompleteItem() WriteOutput() Declaration protected override void WriteOutput() Overrides WorkItem.WriteOutput()"
  },
  "dotnet-api/code/EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.html",
    "title": "Class PersistentSubscriptionsManager | Event Store",
    "keywords": "Class PersistentSubscriptionsManager API for managing persistent subscriptions in Event Store through C# code. Communicates with Event Store over the RESTful API. Inheritance System.Object PersistentSubscriptionsManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI.PersistentSubscriptions Assembly : EventStore.ClientAPI.dll Syntax public class PersistentSubscriptionsManager Constructors PersistentSubscriptionsManager(ILogger, EndPoint, TimeSpan, String) Creates a new instance of PersistentSubscriptionsManager . Declaration public PersistentSubscriptionsManager(ILogger log, EndPoint httpEndPoint, TimeSpan operationTimeout, string httpSchema = \"http\") Parameters Type Name ILogger log System.Net.EndPoint httpEndPoint System.TimeSpan operationTimeout System.String httpSchema Methods Describe(String, String, UserCredentials) Gets the details of the persistent subscription subscriptionName on stream . Declaration public Task<PersistentSubscriptionDetails> Describe(string stream, string subscriptionName, UserCredentials userCredentials = null) Parameters Type Name System.String stream System.String subscriptionName UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < PersistentSubscriptionDetails > A PersistentSubscriptionDetails object representing the persistent subscription subscriptionName on stream . List(UserCredentials) Asynchronously lists all persistent subscriptions. Declaration public Task<List<PersistentSubscriptionDetails>> List(UserCredentials userCredentials = null) Parameters Type Name UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.List < PersistentSubscriptionDetails >> List of all the PersistentSubscriptionDetails items containing persistent subscription details. List(String, UserCredentials) Asynchronously lists all persistent subscriptions subscribed to stream . Declaration public Task<List<PersistentSubscriptionDetails>> List(string stream, UserCredentials userCredentials = null) Parameters Type Name System.String stream UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.List < PersistentSubscriptionDetails >> List of all the PersistentSubscriptionDetails items containing persistent subscription details on stream . ReplayParkedMessages(String, String, UserCredentials) Replays all parked messages for a particular persistent subscription subscriptionName on stream . Declaration public Task ReplayParkedMessages(string stream, string subscriptionName, UserCredentials userCredentials = null) Parameters Type Name System.String stream System.String subscriptionName UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task A task representing the operation."
  },
  "dotnet-api/code/EventStore.Projections.Core.Standard.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Standard.html",
    "title": "Namespace EventStore.Projections.Core.Standard | Event Store",
    "keywords": "Namespace EventStore.Projections.Core.Standard Classes ByCorrelationId CategorizeEventsByStreamPath CategorizeStreamByPath IndexEventsByEventType IndexStreams StreamCategoryExtractor StreamCategoryExtractorByFirstSeparator StreamCategoryExtractorByLastSeparator StreamDeletedHelper StubHandler"
  },
  "dotnet-api/code/EventStore.Projections.Core.Standard.StreamCategoryExtractorByFirstSeparator.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Standard.StreamCategoryExtractorByFirstSeparator.html",
    "title": "Class StreamCategoryExtractorByFirstSeparator | Event Store",
    "keywords": "Class StreamCategoryExtractorByFirstSeparator Inheritance System.Object StreamCategoryExtractor StreamCategoryExtractorByFirstSeparator Inherited Members StreamCategoryExtractor.GetExtractor(String, Action<String, Object[]>) Namespace : EventStore.Projections.Core.Standard Assembly : EventStore.Projections.Core.dll Syntax public class StreamCategoryExtractorByFirstSeparator : StreamCategoryExtractor Constructors StreamCategoryExtractorByFirstSeparator(Char) Declaration public StreamCategoryExtractorByFirstSeparator(char separator) Parameters Type Name System.Char separator Methods GetCategoryByStreamId(String) Declaration public override string GetCategoryByStreamId(string streamId) Parameters Type Name System.String streamId Returns Type Description System.String Overrides StreamCategoryExtractor.GetCategoryByStreamId(String)"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.html",
    "title": "Namespace EventStore.ClientAPI.Exceptions | Event Store",
    "keywords": "Namespace EventStore.ClientAPI.Exceptions Classes AccessDeniedException Exception thrown when a user is not authorised to carry out an operation. CannotEstablishConnectionException Exception thrown if an EventStoreConnection is unable to establish a connection to an Event Store server. ClusterException Exception thrown if cluster discovery fails. CommandNotExpectedException Exception thrown if an unexpected command is received. ConnectionClosedException Exception thrown by ongoing operations which are terminated by an IEventStoreConnection closing. EventStoreConnectionException Base type for exceptions thrown by an IEventStoreConnection , thrown in circumstances which do not have a specific derived exception. InvalidTransactionException Exception thrown if there is an attempt to operate inside a transaction which does not exist. NoResultException Exception thrown if there is no result for an operation for which one is expected. NotAuthenticatedException Exception thrown if an operation requires authentication but the client is not authenticated. OperationExpiredException Exception thrown if an operation expires before it can be scheduled. OperationNotSupportedException Exception thrown if an operation is not supported by a node. For example: Write operations are not supported by read only nodes. OperationTimedOutException Exception thrown if an operation times out. PersistentSubscriptionCommandFailedException Exception thrown if a persistent subscription command fails. ProjectionCommandConflictException Exception thrown if a projection command fails. ProjectionCommandFailedException Exception thrown if a projection command fails. RetriesLimitReachedException Exception thrown if the number of retries for an operation is reached. To change the number of retries attempted for an operation, use the methods LimitRetriesForOperationTo(Int32) or KeepRetrying() and pass the resulting ConnectionSettings into the constructor of the connection. ServerErrorException Exception thrown if a server-side error occurs during an operation. StreamDeletedException Exception thrown if an operation is attempted on a stream which has been deleted. UserCommandConflictException Exception thrown if a user command fails. UserCommandFailedException Exception thrown if a projection command fails. WrongExpectedVersionException Exception thrown if the expected version specified on an operation does not match the version of the stream when the operation was attempted."
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared.html",
    "title": "Class CoreProjectionManagementMessage.CreatePrepared | Event Store",
    "keywords": "Class CoreProjectionManagementMessage.CreatePrepared Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionManagementControlMessage CoreProjectionManagementMessage.CreatePrepared Inherited Members CoreProjectionManagementControlMessage.WorkerId CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class CreatePrepared : CoreProjectionManagementControlMessage Constructors CreatePrepared(Guid, Guid, String, ProjectionVersion, ProjectionConfig, QuerySourcesDefinition, String, String) Declaration public CreatePrepared(Guid projectionId, Guid workerId, string name, ProjectionVersion version, ProjectionConfig config, QuerySourcesDefinition sourceDefinition, string handlerType, string query) Parameters Type Name Guid projectionId Guid workerId System.String name ProjectionVersion version ProjectionConfig config QuerySourcesDefinition sourceDefinition System.String handlerType System.String query Properties Config Declaration public ProjectionConfig Config { get; } Property Value Type ProjectionConfig HandlerType Declaration public string HandlerType { get; } Property Value Type System.String MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionManagementControlMessage.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String Query Declaration public string Query { get; } Property Value Type System.String SourceDefinition Declaration public QuerySourcesDefinition SourceDefinition { get; } Property Value Type QuerySourcesDefinition Version Declaration public ProjectionVersion Version { get; } Property Value Type ProjectionVersion"
  },
  "dotnet-api/code/EventStore.ClientAPI.SystemSettings.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.SystemSettings.html",
    "title": "Class SystemSettings | Event Store",
    "keywords": "Class SystemSettings Represents global settings for an Event Store server. Inheritance System.Object SystemSettings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class SystemSettings Constructors SystemSettings(StreamAcl, StreamAcl) Constructs a new SystemSettings . Declaration public SystemSettings(StreamAcl userStreamAcl, StreamAcl systemStreamAcl) Parameters Type Name StreamAcl userStreamAcl StreamAcl systemStreamAcl Fields SystemStreamAcl Default access control list for new system streams. Declaration public readonly StreamAcl SystemStreamAcl Field Value Type StreamAcl UserStreamAcl Default access control list for new user streams. Declaration public readonly StreamAcl UserStreamAcl Field Value Type StreamAcl Methods FromJsonBytes(Byte[]) Creates a SystemSettings object from a JSON string in a byte array. Declaration public static SystemSettings FromJsonBytes(byte[] json) Parameters Type Name System.Byte [] json Returns Type Description SystemSettings A SystemSettings object. ToJsonBytes() Creates a byte array containing a UTF-8 string with no byte order mark representing this SystemSettings object. Declaration public byte[] ToJsonBytes() Returns Type Description System.Byte [] A byte array containing a UTF-8 string with no byte order mark. ToJsonString() Creates a string containing representing this SystemSettings object. Declaration public string ToJsonString() Returns Type Description System.String A string representing this SystemSettings . ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description System.String A string that represents the current object. Overrides System.Object.ToString()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.AbortCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.AbortCommand.html",
    "title": "Class AbortCommand | Event Store",
    "keywords": "Class AbortCommand Inheritance System.Object AbortCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class AbortCommand : object Fields Name Declaration public string Name Field Value Type System.String RunAs Declaration public SerializedRunAs RunAs Field Value Type SerializedRunAs"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.GetQueryCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.GetQueryCommand.html",
    "title": "Class GetQueryCommand | Event Store",
    "keywords": "Class GetQueryCommand Inheritance System.Object GetQueryCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class GetQueryCommand : object Fields Name Declaration public string Name Field Value Type System.String RunAs Declaration public SerializedRunAs RunAs Field Value Type SerializedRunAs"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.Faulted.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.Faulted.html",
    "title": "Class Faulted | Event Store",
    "keywords": "Class Faulted Inheritance System.Object Faulted Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class Faulted : object Properties FaultedReason Declaration public string FaultedReason { get; set; } Property Value Type System.String Id Declaration public string Id { get; set; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.PersistedProjectionVersion.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.PersistedProjectionVersion.html",
    "title": "Struct PersistedProjectionVersion | Event Store",
    "keywords": "Struct PersistedProjectionVersion Namespace : EventStore.Projections.Core.Messages.Persisted.Commands Assembly : EventStore.Projections.Core.dll Syntax public struct PersistedProjectionVersion Fields Epoch Declaration public long Epoch Field Value Type System.Int64 Id Declaration public long Id Field Value Type System.Int64 Version Declaration public long Version Field Value Type System.Int64 Operators Implicit(PersistedProjectionVersion to ProjectionVersion) Declaration public static implicit operator ProjectionVersion(PersistedProjectionVersion source) Parameters Type Name PersistedProjectionVersion source Returns Type Description ProjectionVersion Implicit(ProjectionVersion to PersistedProjectionVersion) Declaration public static implicit operator PersistedProjectionVersion(ProjectionVersion source) Parameters Type Name ProjectionVersion source Returns Type Description PersistedProjectionVersion Extension Methods EnumExtensions.EnumValueName<T>(T)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.DefaultCheckpointManager.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.DefaultCheckpointManager.html",
    "title": "Class DefaultCheckpointManager | Event Store",
    "keywords": "Class DefaultCheckpointManager Inheritance System.Object CoreProjectionCheckpointManager DefaultCheckpointManager MultiStreamMultiOutputCheckpointManager Implements IProjectionCheckpointManager EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.ReadyForCheckpoint > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.RestartRequested > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.Failed > ICoreProjectionCheckpointManager IEmittedEventWriter EventStore.Core.Bus.IHandle < CoreProjectionCheckpointWriterMessage.CheckpointWritten > EventStore.Core.Bus.IHandle < CoreProjectionCheckpointWriterMessage.RestartRequested > Inherited Members CoreProjectionCheckpointManager._namingBuilder CoreProjectionCheckpointManager._projectionConfig CoreProjectionCheckpointManager._logger CoreProjectionCheckpointManager._publisher CoreProjectionCheckpointManager._currentCheckpoint CoreProjectionCheckpointManager._stopping CoreProjectionCheckpointManager._stopped CoreProjectionCheckpointManager.Start(CheckpointTag, PartitionState) CoreProjectionCheckpointManager.Stopping() CoreProjectionCheckpointManager.Stopped() CoreProjectionCheckpointManager.StateUpdated(String, PartitionState, PartitionState) CoreProjectionCheckpointManager.EventProcessed(CheckpointTag, Single) CoreProjectionCheckpointManager.EventsEmitted(EmittedEventEnvelope[], Guid, String) CoreProjectionCheckpointManager.CheckpointSuggested(CheckpointTag, Single) CoreProjectionCheckpointManager.Progress(Single) CoreProjectionCheckpointManager.LastProcessedEventPosition CoreProjectionCheckpointManager.Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint) CoreProjectionCheckpointManager.Handle(CoreProjectionProcessingMessage.RestartRequested) CoreProjectionCheckpointManager.Handle(CoreProjectionProcessingMessage.Failed) CoreProjectionCheckpointManager.PrerecordedEventsLoaded(CheckpointTag) CoreProjectionCheckpointManager.EnsureStarted() CoreProjectionCheckpointManager.SendPrerecordedEvent(ResolvedEvent, CheckpointTag, Int64) CoreProjectionCheckpointManager.RequestRestart(String) CoreProjectionCheckpointManager.CheckpointWritten(CheckpointTag) CoreProjectionCheckpointManager.BeginLoadPrerecordedEvents(CheckpointTag) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class DefaultCheckpointManager : CoreProjectionCheckpointManager, IProjectionCheckpointManager, IHandle<CoreProjectionProcessingMessage.ReadyForCheckpoint>, IHandle<CoreProjectionProcessingMessage.RestartRequested>, IHandle<CoreProjectionProcessingMessage.Failed>, ICoreProjectionCheckpointManager, IEmittedEventWriter, IHandle<CoreProjectionCheckpointWriterMessage.CheckpointWritten>, IHandle<CoreProjectionCheckpointWriterMessage.RestartRequested> Constructors DefaultCheckpointManager(IPublisher, Guid, ProjectionVersion, IPrincipal, IODispatcher, ProjectionConfig, String, PositionTagger, ProjectionNamesBuilder, Boolean, Boolean, Boolean, CoreProjectionCheckpointWriter) Declaration public DefaultCheckpointManager(IPublisher publisher, Guid projectionCorrelationId, ProjectionVersion projectionVersion, IPrincipal runAs, IODispatcher ioDispatcher, ProjectionConfig projectionConfig, string name, PositionTagger positionTagger, ProjectionNamesBuilder namingBuilder, bool usePersistentCheckpoints, bool producesRunningResults, bool definesFold, CoreProjectionCheckpointWriter coreProjectionCheckpointWriter) Parameters Type Name EventStore.Core.Bus.IPublisher publisher Guid projectionCorrelationId ProjectionVersion projectionVersion IPrincipal runAs EventStore.Core.Helpers.IODispatcher ioDispatcher ProjectionConfig projectionConfig System.String name PositionTagger positionTagger ProjectionNamesBuilder namingBuilder System.Boolean usePersistentCheckpoints System.Boolean producesRunningResults System.Boolean definesFold CoreProjectionCheckpointWriter coreProjectionCheckpointWriter Fields _ioDispatcher Declaration protected readonly IODispatcher _ioDispatcher Field Value Type EventStore.Core.Helpers.IODispatcher _projectionVersion Declaration protected readonly ProjectionVersion _projectionVersion Field Value Type ProjectionVersion Methods BeginLoadPartitionStateAt(String, CheckpointTag, Action<PartitionState>) Declaration public override void BeginLoadPartitionStateAt(string statePartition, CheckpointTag requestedStateCheckpointTag, Action<PartitionState> loadCompleted) Parameters Type Name System.String statePartition CheckpointTag requestedStateCheckpointTag Action < PartitionState > loadCompleted Overrides CoreProjectionCheckpointManager.BeginLoadPartitionStateAt(String, CheckpointTag, Action<PartitionState>) BeginWriteCheckpoint(CheckpointTag, String) Declaration protected override void BeginWriteCheckpoint(CheckpointTag requestedCheckpointPosition, string requestedCheckpointState) Parameters Type Name CheckpointTag requestedCheckpointPosition System.String requestedCheckpointState Overrides CoreProjectionCheckpointManager.BeginWriteCheckpoint(CheckpointTag, String) CapturePartitionStateUpdated(String, PartitionState, PartitionState) Declaration protected override void CapturePartitionStateUpdated(string partition, PartitionState oldState, PartitionState newState) Parameters Type Name System.String partition PartitionState oldState PartitionState newState Overrides CoreProjectionCheckpointManager.CapturePartitionStateUpdated(String, PartitionState, PartitionState) CreateProjectionCheckpoint(CheckpointTag) Declaration protected override ProjectionCheckpoint CreateProjectionCheckpoint(CheckpointTag checkpointPosition) Parameters Type Name CheckpointTag checkpointPosition Returns Type Description ProjectionCheckpoint Overrides CoreProjectionCheckpointManager.CreateProjectionCheckpoint(CheckpointTag) EmitPartitionCheckpoints() Declaration protected override void EmitPartitionCheckpoints() Overrides CoreProjectionCheckpointManager.EmitPartitionCheckpoints() GetStatistics(ProjectionStatistics) Declaration public override void GetStatistics(ProjectionStatistics info) Parameters Type Name ProjectionStatistics info Overrides CoreProjectionCheckpointManager.GetStatistics(ProjectionStatistics) Handle(CoreProjectionCheckpointWriterMessage.CheckpointWritten) Declaration public void Handle(CoreProjectionCheckpointWriterMessage.CheckpointWritten message) Parameters Type Name CoreProjectionCheckpointWriterMessage.CheckpointWritten message Handle(CoreProjectionCheckpointWriterMessage.RestartRequested) Declaration public void Handle(CoreProjectionCheckpointWriterMessage.RestartRequested message) Parameters Type Name CoreProjectionCheckpointWriterMessage.RestartRequested message Initialize() Declaration public override void Initialize() Overrides CoreProjectionCheckpointManager.Initialize() PartitionCompleted(String) Declaration public override void PartitionCompleted(string partition) Parameters Type Name System.String partition Overrides CoreProjectionCheckpointManager.PartitionCompleted(String) RecordEventOrder(ResolvedEvent, CheckpointTag, Action) Declaration public override void RecordEventOrder(ResolvedEvent resolvedEvent, CheckpointTag orderCheckpointTag, Action committed) Parameters Type Name ResolvedEvent resolvedEvent CheckpointTag orderCheckpointTag Action committed Overrides CoreProjectionCheckpointManager.RecordEventOrder(ResolvedEvent, CheckpointTag, Action) Implements IProjectionCheckpointManager EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> ICoreProjectionCheckpointManager IEmittedEventWriter EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.GetConfig.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.GetConfig.html",
    "title": "Class ProjectionManagementMessage.Command.GetConfig | Event Store",
    "keywords": "Class ProjectionManagementMessage.Command.GetConfig Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Command.ControlMessage ProjectionManagementMessage.Command.GetConfig Inherited Members ProjectionManagementMessage.Command.ControlMessage.RunAs ProjectionManagementMessage.Command.ControlMessage.Envelope EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class GetConfig : ProjectionManagementMessage.Command.ControlMessage Constructors GetConfig(IEnvelope, String, ProjectionManagementMessage.RunAs) Declaration public GetConfig(IEnvelope envelope, string name, ProjectionManagementMessage.RunAs runAs) Parameters Type Name EventStore.Core.Messaging.IEnvelope envelope System.String name ProjectionManagementMessage.RunAs runAs Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ProjectionManagementMessage.Command.ControlMessage.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.v8.Js1Exception.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.v8.Js1Exception.html",
    "title": "Class Js1Exception | Event Store",
    "keywords": "Class Js1Exception Inheritance System.Object Js1Exception Namespace : EventStore.Projections.Core.v8 Assembly : EventStore.Projections.Core.dll Syntax public class Js1Exception : Exception Constructors Js1Exception(Int32, String) Declaration public Js1Exception(int errorCode, string errorMessage) Parameters Type Name System.Int32 errorCode System.String errorMessage Properties ErrorCode Declaration public int ErrorCode { get; } Property Value Type System.Int32"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Management.ProjectionManager.NewProjectionInitializer.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Management.ProjectionManager.NewProjectionInitializer.html",
    "title": "Class ProjectionManager.NewProjectionInitializer | Event Store",
    "keywords": "Class ProjectionManager.NewProjectionInitializer Inheritance System.Object ProjectionManager.NewProjectionInitializer Namespace : EventStore.Projections.Core.Services.Management Assembly : EventStore.Projections.Core.dll Syntax public class NewProjectionInitializer : object Constructors NewProjectionInitializer(Int64, String, ProjectionMode, String, String, Boolean, Boolean, Boolean, Boolean, Boolean, ProjectionManagementMessage.RunAs, IEnvelope) Declaration public NewProjectionInitializer(long projectionId, string name, ProjectionMode projectionMode, string handlerType, string query, bool enabled, bool emitEnabled, bool checkpointsEnabled, bool enableRunAs, bool trackEmittedStreams, ProjectionManagementMessage.RunAs runAs, IEnvelope replyEnvelope) Parameters Type Name System.Int64 projectionId System.String name ProjectionMode projectionMode System.String handlerType System.String query System.Boolean enabled System.Boolean emitEnabled System.Boolean checkpointsEnabled System.Boolean enableRunAs System.Boolean trackEmittedStreams ProjectionManagementMessage.RunAs runAs EventStore.Core.Messaging.IEnvelope replyEnvelope Methods CreateAndInitializeNewProjection(ProjectionManager, Guid, Guid, Nullable<Int64>) Declaration public void CreateAndInitializeNewProjection(ProjectionManager projectionManager, Guid projectionCorrelationId, Guid workerId, long? version = null) Parameters Type Name ProjectionManager projectionManager Guid projectionCorrelationId Guid workerId System.Nullable < System.Int64 > version"
  },
  "dotnet-api/code/EventStore.Projections.Core.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.html",
    "title": "Namespace EventStore.Projections.Core | Event Store",
    "keywords": "Namespace EventStore.Projections.Core Classes ProjectionCoreWorkersNode ProjectionManagerNode ProjectionsStandardComponents ProjectionsSubsystem ProjectionWorkerNode"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProjectionVersion.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProjectionVersion.html",
    "title": "Struct ProjectionVersion | Event Store",
    "keywords": "Struct ProjectionVersion Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public struct ProjectionVersion Constructors ProjectionVersion(Int64, Int64, Int64) Declaration public ProjectionVersion(long projectionId, long epoch, long version) Parameters Type Name System.Int64 projectionId System.Int64 epoch System.Int64 version Fields Epoch Declaration public readonly long Epoch Field Value Type System.Int64 ProjectionId Declaration public readonly long ProjectionId Field Value Type System.Int64 Version Declaration public readonly long Version Field Value Type System.Int64 Methods Equals(ProjectionVersion) Declaration public bool Equals(ProjectionVersion other) Parameters Type Name ProjectionVersion other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name System.Object obj Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Extension Methods EnumExtensions.EnumValueName<T>(T)"
  },
  "dotnet-api/code/EventStore.ClientAPI.GossipSeed.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.GossipSeed.html",
    "title": "Class GossipSeed | Event Store",
    "keywords": "Class GossipSeed Represents a source of cluster gossip. Inheritance System.Object GossipSeed Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class GossipSeed Constructors GossipSeed(EndPoint, String, Boolean) Creates a new GossipSeed . Declaration public GossipSeed(EndPoint endPoint, string hostHeader = \"\", bool seedOverTls = true) Parameters Type Name System.Net.EndPoint endPoint System.String hostHeader System.Boolean seedOverTls Fields EndPoint The EndPoint for the External HTTP endpoint of the gossip seed. The HTTP endpoint is used rather than the TCP endpoint because it is required for the client to exchange gossip with the server. The standard port which should be used here is 2113. Declaration public readonly EndPoint EndPoint Field Value Type System.Net.EndPoint HostHeader The host header to be sent when requesting gossip. Declaration public readonly string HostHeader Field Value Type System.String SeedOverTls If Gossip should be requested over Tls Declaration public readonly bool SeedOverTls Field Value Type System.Boolean"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.GetState.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.GetState.html",
    "title": "Class ProjectionManagementMessage.Command.GetState | Event Store",
    "keywords": "Class ProjectionManagementMessage.Command.GetState Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Command.GetState Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class GetState : Message Constructors GetState(IEnvelope, String, String) Declaration public GetState(IEnvelope envelope, string name, string partition) Parameters Type Name EventStore.Core.Messaging.IEnvelope envelope System.String name System.String partition Properties Envelope Declaration public IEnvelope Envelope { get; } Property Value Type EventStore.Core.Messaging.IEnvelope MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String Partition Declaration public string Partition { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Updated.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Updated.html",
    "title": "Class ProjectionManagementMessage.Updated | Event Store",
    "keywords": "Class ProjectionManagementMessage.Updated Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Updated Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Updated : Message Constructors Updated(String) Declaration public Updated(string name) Parameters Type Name System.String name Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.ConnectionClosedException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.ConnectionClosedException.html",
    "title": "Class ConnectionClosedException | Event Store",
    "keywords": "Class ConnectionClosedException Exception thrown by ongoing operations which are terminated by an IEventStoreConnection closing. Inheritance System.Object System.Exception EventStoreConnectionException ConnectionClosedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class ConnectionClosedException : EventStoreConnectionException, ISerializable Constructors ConnectionClosedException() Constructs a new ConnectionClosedException . Declaration public ConnectionClosedException() ConnectionClosedException(SerializationInfo, StreamingContext) Constructs a new ConnectionClosedException . Declaration protected ConnectionClosedException(SerializationInfo info, StreamingContext context) Parameters Type Name System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context ConnectionClosedException(String) Constructs a new ConnectionClosedException . Declaration public ConnectionClosedException(string message) Parameters Type Name System.String message ConnectionClosedException(String, Exception) Constructs a new ConnectionClosedException . Declaration public ConnectionClosedException(string message, Exception innerException) Parameters Type Name System.String message System.Exception innerException Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.SubscriptionMessage.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.SubscriptionMessage.html",
    "title": "Class ReaderSubscriptionMessage.SubscriptionMessage | Event Store",
    "keywords": "Class ReaderSubscriptionMessage.SubscriptionMessage Inheritance System.Object EventStore.Core.Messaging.Message ReaderSubscriptionMessage.SubscriptionMessage ReaderSubscriptionMessage.CommittedEventDistributed ReaderSubscriptionMessage.EventReaderEof ReaderSubscriptionMessage.EventReaderIdle ReaderSubscriptionMessage.EventReaderNotAuthorized ReaderSubscriptionMessage.EventReaderPartitionDeleted ReaderSubscriptionMessage.EventReaderPartitionEof ReaderSubscriptionMessage.EventReaderStarting ReaderSubscriptionMessage.Faulted Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class SubscriptionMessage : Message Constructors SubscriptionMessage(Guid, CheckpointTag, Object) Declaration public SubscriptionMessage(Guid correlationId, CheckpointTag preTagged, object source) Parameters Type Name Guid correlationId CheckpointTag preTagged System.Object source Properties CorrelationId Declaration public Guid CorrelationId { get; } Property Value Type Guid MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId PreTagged Declaration public CheckpointTag PreTagged { get; } Property Value Type CheckpointTag Source Declaration public object Source { get; } Property Value Type System.Object"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Statistics.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Statistics.html",
    "title": "Class ProjectionManagementMessage.Statistics | Event Store",
    "keywords": "Class ProjectionManagementMessage.Statistics Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Statistics Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Statistics : Message Constructors Statistics(ProjectionStatistics[]) Declaration public Statistics(ProjectionStatistics[] projections) Parameters Type Name ProjectionStatistics [] projections Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId Projections Declaration public ProjectionStatistics[] Projections { get; } Property Value Type ProjectionStatistics []"
  },
  "dotnet-api/code/EventStore.ClientAPI.Projections.QueryManager.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Projections.QueryManager.html",
    "title": "Class QueryManager | Event Store",
    "keywords": "Class QueryManager API for executing queries in the Event Store through C# code. Communicates with the Event Store over the RESTful API. Inheritance System.Object QueryManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI.Projections Assembly : EventStore.ClientAPI.dll Syntax public class QueryManager Constructors QueryManager(ILogger, EndPoint, TimeSpan, TimeSpan, HttpMessageHandler) Creates a new instance of QueryManager . Declaration public QueryManager(ILogger log, EndPoint httpEndPoint, TimeSpan projectionOperationTimeout, TimeSpan queryTimeout, HttpMessageHandler httpMessageHandler = null) Parameters Type Name ILogger log System.Net.EndPoint httpEndPoint System.TimeSpan projectionOperationTimeout System.TimeSpan queryTimeout System.Net.Http.HttpMessageHandler httpMessageHandler Methods ExecuteAsync(String, String, TimeSpan, TimeSpan, UserCredentials) Asynchronously executes a query. Declaration public Task<string> ExecuteAsync(string name, string query, TimeSpan initialPollingDelay, TimeSpan maximumPollingDelay, UserCredentials userCredentials = null) Parameters Type Name System.String name System.String query System.TimeSpan initialPollingDelay System.TimeSpan maximumPollingDelay UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < System.String > String of JSON containing query result. Remarks Creates a new transient projection and polls its status until it is Completed."
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Internal.CleanupExpired.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Internal.CleanupExpired.html",
    "title": "Class ProjectionManagementMessage.Internal.CleanupExpired | Event Store",
    "keywords": "Class ProjectionManagementMessage.Internal.CleanupExpired Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Internal.CleanupExpired Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class CleanupExpired : Message Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.WorkItem.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.WorkItem.html",
    "title": "Class WorkItem | Event Store",
    "keywords": "Class WorkItem Inheritance System.Object StagedTask WorkItem CheckpointWorkItemBase Inherited Members StagedTask.InitialCorrelationId Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public abstract class WorkItem : StagedTask Constructors WorkItem(Object) Declaration protected WorkItem(object initialCorrelationId) Parameters Type Name System.Object initialCorrelationId Fields _requiresRunning Declaration protected bool _requiresRunning Field Value Type System.Boolean Properties Queue Declaration protected CoreProjectionQueue Queue { get; } Property Value Type CoreProjectionQueue Methods CompleteItem() Declaration protected virtual void CompleteItem() GetStatePartition() Declaration protected virtual void GetStatePartition() Load(CheckpointTag) Declaration protected virtual void Load(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag NextStage(Object) Declaration protected void NextStage(object newCorrelationId = null) Parameters Type Name System.Object newCorrelationId Process(Int32, Action<Int32, Object>) Declaration public override void Process(int onStage, Action<int, object> readyForStage) Parameters Type Name System.Int32 onStage Action < System.Int32 , System.Object > readyForStage Overrides StagedTask.Process(Int32, Action<Int32, Object>) ProcessEvent() Declaration protected virtual void ProcessEvent() RecordEventOrder() Declaration protected virtual void RecordEventOrder() SetCheckpointTag(CheckpointTag) Declaration public void SetCheckpointTag(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag SetProjectionQueue(CoreProjectionQueue) Declaration public void SetProjectionQueue(CoreProjectionQueue coreProjectionQueue) Parameters Type Name CoreProjectionQueue coreProjectionQueue WriteOutput() Declaration protected virtual void WriteOutput()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.ResultReport.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.ResultReport.html",
    "title": "Class ResultReport | Event Store",
    "keywords": "Class ResultReport Inheritance System.Object ResultReport Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class ResultReport : object Properties CorrelationId Declaration public string CorrelationId { get; set; } Property Value Type System.String Id Declaration public string Id { get; set; } Property Value Type System.String Partition Declaration public string Partition { get; set; } Property Value Type System.String Position Declaration public CheckpointTag Position { get; set; } Property Value Type CheckpointTag Result Declaration public string Result { get; set; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProjectionProcessingStrategy.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProjectionProcessingStrategy.html",
    "title": "Class ProjectionProcessingStrategy | Event Store",
    "keywords": "Class ProjectionProcessingStrategy Inheritance System.Object ProjectionProcessingStrategy EventReaderBasedProjectionProcessingStrategy Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public abstract class ProjectionProcessingStrategy : object Constructors ProjectionProcessingStrategy(String, ProjectionVersion, ILogger) Declaration protected ProjectionProcessingStrategy(string name, ProjectionVersion projectionVersion, ILogger logger) Parameters Type Name System.String name ProjectionVersion projectionVersion EventStore.Common.Log.ILogger logger Fields _logger Declaration protected readonly ILogger _logger Field Value Type EventStore.Common.Log.ILogger _name Declaration protected readonly string _name Field Value Type System.String _projectionVersion Declaration protected readonly ProjectionVersion _projectionVersion Field Value Type ProjectionVersion Methods Create(Guid, IPublisher, Guid, IPrincipal, IPublisher, IODispatcher, ReaderSubscriptionDispatcher, ITimeProvider) Declaration public CoreProjection Create(Guid projectionCorrelationId, IPublisher inputQueue, Guid workerId, IPrincipal runAs, IPublisher publisher, IODispatcher ioDispatcher, ReaderSubscriptionDispatcher subscriptionDispatcher, ITimeProvider timeProvider) Parameters Type Name Guid projectionCorrelationId EventStore.Core.Bus.IPublisher inputQueue Guid workerId IPrincipal runAs EventStore.Core.Bus.IPublisher publisher EventStore.Core.Helpers.IODispatcher ioDispatcher ReaderSubscriptionDispatcher subscriptionDispatcher EventStore.Core.Services.TimerService.ITimeProvider timeProvider Returns Type Description CoreProjection CreateProcessingPhases(IPublisher, IPublisher, Guid, PartitionStateCache, Action, CoreProjection, ProjectionNamesBuilder, ITimeProvider, IODispatcher, CoreProjectionCheckpointWriter) Declaration public abstract IProjectionProcessingPhase[] CreateProcessingPhases(IPublisher publisher, IPublisher inputQueue, Guid projectionCorrelationId, PartitionStateCache partitionStateCache, Action updateStatistics, CoreProjection coreProjection, ProjectionNamesBuilder namingBuilder, ITimeProvider timeProvider, IODispatcher ioDispatcher, CoreProjectionCheckpointWriter coreProjectionCheckpointWriter) Parameters Type Name EventStore.Core.Bus.IPublisher publisher EventStore.Core.Bus.IPublisher inputQueue Guid projectionCorrelationId PartitionStateCache partitionStateCache Action updateStatistics CoreProjection coreProjection ProjectionNamesBuilder namingBuilder EventStore.Core.Services.TimerService.ITimeProvider timeProvider EventStore.Core.Helpers.IODispatcher ioDispatcher CoreProjectionCheckpointWriter coreProjectionCheckpointWriter Returns Type Description IProjectionProcessingPhase [] EnrichStatistics(ProjectionStatistics) Declaration public abstract void EnrichStatistics(ProjectionStatistics info) Parameters Type Name ProjectionStatistics info GetProducesRunningResults() Declaration public abstract bool GetProducesRunningResults() Returns Type Description System.Boolean GetRequiresRootPartition() Declaration public abstract bool GetRequiresRootPartition() Returns Type Description System.Boolean GetSourceDefinition() Declaration protected abstract IQuerySources GetSourceDefinition() Returns Type Description IQuerySources GetStopOnEof() Declaration public abstract bool GetStopOnEof() Returns Type Description System.Boolean GetUseCheckpoints() Declaration public abstract bool GetUseCheckpoints() Returns Type Description System.Boolean"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.html",
    "title": "Namespace EventStore.Projections.Core.Services.Processing | Event Store",
    "keywords": "Namespace EventStore.Projections.Core.Services.Processing Classes ByHandleStatePartitionSelector ByStreamStatePartitionSelector CategoryEventFilter CheckpointSuggestedWorkItem CheckpointTag CheckpointTagExtensions CheckpointTagJsonConverter CheckpointWorkItemBase ContinuousProjectionProcessingStrategy CoreProjection CoreProjectionCheckpointManager CoreProjectionCheckpointReader CoreProjectionCheckpointWriter CoreProjectionQueue DefaultCheckpointManager DefaultProjectionProcessingStrategy EmittedDataEvent EmittedEvent EmittedEventEnvelope EmittedLinkTo EmittedLinkToWithRecategorization EmittedStream EmittedStream.WriterConfiguration EmittedStream.WriterConfiguration.StreamMetadata EmittedStreamsDeleter EmittedStreamsTracker EmittedStreamsWriter EventByTypeIndexEventFilter EventByTypeIndexEventReader EventByTypeIndexPositionTagger EventFilter EventProcessedResult EventProcessingProjectionProcessingPhase EventReader EventReaderBasedProjectionProcessingStrategy EventReaderCoreService EventReorderingReaderSubscription EventSubscriptionBasedProjectionProcessingPhase ExtraMetaData HeadingEventReader MultiStreamEventFilter MultiStreamEventReader MultiStreamMultiOutputCheckpointManager MultiStreamPositionTagger NoopResultEventEmitter NoopStatePartitionSelector PartitionState PartitionStateCache PartitionStateUpdateManager PhasePositionTagger PositionTagger PositionTracker PreparePositionTagger PreTaggedPositionTagger ProcessingStrategySelector ProjectionCheckpoint ProjectionCoreService ProjectionCoreServiceCommandReader ProjectionNamesBuilder ProjectionNamesBuilder.StandardProjections ProjectionOutputConfig ProjectionProcessingStrategy ProjectionSourceDefinition QueryProcessingStrategy QuerySourceOptions QueuedEmittedStreamsWriter ReaderStrategy ReaderSubscription ReaderSubscriptionBase ReaderSubscriptionOptions RequestResponseQueueForwarder ResolvedEvent ResultEventEmitter ResultWriter SourceDefinitionBuilder StagedProcessingQueue Staged processing queue allows queued processing of multi-step tasks. The processing order allows multiple tasks to be processed at the same time with a constraint a) ordered stage: all preceding tasks in the queue has already started processing at the given stage. b) unordered stage: no items with the same correlation_id are in the queue before current item For instance: multiple foreach sub-projections can request state to be loaded, then they can process it and store. But no subprojection can process events prior to preceding projections has completed processing. StagedTask StatePartitionSelector StreamEventFilter StreamEventReader StreamPositionTagger TaggedResolvedEvent TransactionFileEventFilter TransactionFileEventReader TransactionFilePositionTagger WorkItem WriteQueryEofProjectionProcessingPhase WriteQueryResultProjectionProcessingPhase WriteQueryResultProjectionProcessingPhaseBase Structs CheckpointTagVersion ProjectionVersion Interfaces ICoreProjectionCheckpointManager ICoreProjectionCheckpointReader ICoreProjectionForProcessingPhase IEmittedEventWriter IEmittedStreamsDeleter IEmittedStreamsTracker IEmittedStreamsWriter IEventProcessingProjectionPhase IEventReader IEventWriter IProgressResultWriter IProjectionPhaseCheckpointManager IProjectionPhaseCompleter IProjectionPhaseStateManager IProjectionProcessingPhase IReaderStrategy IReaderSubscription IResultEventEmitter IResultWriter Enums PhaseState"
  },
  "dotnet-api/code/EventStore.Projections.Core.ProjectionsSubsystem.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.ProjectionsSubsystem.html",
    "title": "Class ProjectionsSubsystem | Event Store",
    "keywords": "Class ProjectionsSubsystem Inheritance System.Object ProjectionsSubsystem Implements EventStore.Core.ISubsystem EventStore.Core.Bus.IHandle < EventStore.Core.Messages.SystemMessage.SystemCoreReady > EventStore.Core.Bus.IHandle < EventStore.Core.Messages.SystemMessage.StateChangeMessage > EventStore.Core.Bus.IHandle < CoreProjectionStatusMessage.Stopped > EventStore.Core.Bus.IHandle < ProjectionSubsystemMessage.RestartSubsystem > EventStore.Core.Bus.IHandle < ProjectionSubsystemMessage.ComponentStarted > EventStore.Core.Bus.IHandle < ProjectionSubsystemMessage.ComponentStopped > Namespace : EventStore.Projections.Core Assembly : EventStore.Projections.Core.dll Syntax public sealed class ProjectionsSubsystem : object, ISubsystem, IHandle<SystemMessage.SystemCoreReady>, IHandle<SystemMessage.StateChangeMessage>, IHandle<CoreProjectionStatusMessage.Stopped>, IHandle<ProjectionSubsystemMessage.RestartSubsystem>, IHandle<ProjectionSubsystemMessage.ComponentStarted>, IHandle<ProjectionSubsystemMessage.ComponentStopped> Constructors ProjectionsSubsystem(Int32, ProjectionType, Boolean, TimeSpan, Boolean) Declaration public ProjectionsSubsystem(int projectionWorkerThreadCount, ProjectionType runProjections, bool startStandardProjections, TimeSpan projectionQueryExpiry, bool faultOutOfOrderProjections) Parameters Type Name System.Int32 projectionWorkerThreadCount EventStore.Common.Options.ProjectionType runProjections System.Boolean startStandardProjections TimeSpan projectionQueryExpiry System.Boolean faultOutOfOrderProjections Fields VERSION Declaration public const int VERSION = null Field Value Type System.Int32 Properties Configure Declaration public Func<IApplicationBuilder, IApplicationBuilder> Configure { get; } Property Value Type Func < IApplicationBuilder , IApplicationBuilder > ConfigureServices Declaration public Func<IServiceCollection, IServiceCollection> ConfigureServices { get; } Property Value Type Func < IServiceCollection , IServiceCollection > MasterMainBus Declaration public InMemoryBus MasterMainBus { get; } Property Value Type EventStore.Core.Bus.InMemoryBus MasterOutputBus Declaration public InMemoryBus MasterOutputBus { get; } Property Value Type EventStore.Core.Bus.InMemoryBus Methods Handle(SystemMessage.StateChangeMessage) Declaration public void Handle(SystemMessage.StateChangeMessage message) Parameters Type Name EventStore.Core.Messages.SystemMessage.StateChangeMessage message Handle(SystemMessage.SystemCoreReady) Declaration public void Handle(SystemMessage.SystemCoreReady message) Parameters Type Name EventStore.Core.Messages.SystemMessage.SystemCoreReady message Handle(CoreProjectionStatusMessage.Stopped) Declaration public void Handle(CoreProjectionStatusMessage.Stopped message) Parameters Type Name CoreProjectionStatusMessage.Stopped message Handle(ProjectionSubsystemMessage.ComponentStarted) Declaration public void Handle(ProjectionSubsystemMessage.ComponentStarted message) Parameters Type Name ProjectionSubsystemMessage.ComponentStarted message Handle(ProjectionSubsystemMessage.ComponentStopped) Declaration public void Handle(ProjectionSubsystemMessage.ComponentStopped message) Parameters Type Name ProjectionSubsystemMessage.ComponentStopped message Handle(ProjectionSubsystemMessage.RestartSubsystem) Declaration public void Handle(ProjectionSubsystemMessage.RestartSubsystem message) Parameters Type Name ProjectionSubsystemMessage.RestartSubsystem message Register(StandardComponents) Declaration public void Register(StandardComponents standardComponents) Parameters Type Name EventStore.Core.StandardComponents standardComponents Start() Declaration public IEnumerable<Task> Start() Returns Type Description IEnumerable < Task > Stop() Declaration public void Stop() Implements EventStore.Core.ISubsystem EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedLinkToWithRecategorization.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedLinkToWithRecategorization.html",
    "title": "Class EmittedLinkToWithRecategorization | Event Store",
    "keywords": "Class EmittedLinkToWithRecategorization Inheritance System.Object EmittedEvent EmittedLinkToWithRecategorization Inherited Members EmittedEvent.StreamId EmittedEvent.EventId EmittedEvent.EventType EmittedEvent.CausedByTag EmittedEvent.ExpectedTag EmittedEvent.OnCommitted EmittedEvent.CausedBy EmittedEvent.CorrelationId EmittedEvent.SetCausedBy(Guid) EmittedEvent.SetCorrelationId(String) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class EmittedLinkToWithRecategorization : EmittedEvent Constructors EmittedLinkToWithRecategorization(String, Guid, String, CheckpointTag, CheckpointTag, String, Nullable<Int32>) Declaration public EmittedLinkToWithRecategorization(string streamId, Guid eventId, string target, CheckpointTag causedByTag, CheckpointTag expectedTag, string originalStreamId, int? streamDeletedAt) Parameters Type Name System.String streamId Guid eventId System.String target CheckpointTag causedByTag CheckpointTag expectedTag System.String originalStreamId System.Nullable < System.Int32 > streamDeletedAt Properties Data Declaration public override string Data { get; } Property Value Type System.String Overrides EmittedEvent.Data IsJson Declaration public override bool IsJson { get; } Property Value Type System.Boolean Overrides EmittedEvent.IsJson Methods ExtraMetaData() Declaration public override IEnumerable<KeyValuePair<string, string>> ExtraMetaData() Returns Type Description IEnumerable < KeyValuePair < System.String , System.String >> Overrides EmittedEvent.ExtraMetaData() IsReady() Declaration public override bool IsReady() Returns Type Description System.Boolean Overrides EmittedEvent.IsReady()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Standard.IndexEventsByEventType.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Standard.IndexEventsByEventType.html",
    "title": "Class IndexEventsByEventType | Event Store",
    "keywords": "Class IndexEventsByEventType Inheritance System.Object IndexEventsByEventType Implements IProjectionStateHandler IDisposable ISourceDefinitionSource IProjectionCheckpointHandler Namespace : EventStore.Projections.Core.Standard Assembly : EventStore.Projections.Core.dll Syntax public class IndexEventsByEventType : object, IProjectionStateHandler, IDisposable, ISourceDefinitionSource, IProjectionCheckpointHandler Constructors IndexEventsByEventType(String, Action<String, Object[]>) Declaration public IndexEventsByEventType(string source, Action<string, object[]> logger) Parameters Type Name System.String source Action < System.String , System.Object []> logger Methods ConfigureSourceProcessingStrategy(SourceDefinitionBuilder) Declaration public void ConfigureSourceProcessingStrategy(SourceDefinitionBuilder builder) Parameters Type Name SourceDefinitionBuilder builder Dispose() Declaration public void Dispose() GetSourceDefinition() Declaration public IQuerySources GetSourceDefinition() Returns Type Description IQuerySources GetStatePartition(CheckpointTag, String, ResolvedEvent) Declaration public string GetStatePartition(CheckpointTag eventPosition, string category, ResolvedEvent data) Parameters Type Name CheckpointTag eventPosition System.String category ResolvedEvent data Returns Type Description System.String Initialize() Declaration public void Initialize() InitializeShared() Declaration public void InitializeShared() Load(String) Declaration public void Load(string state) Parameters Type Name System.String state LoadShared(String) Declaration public void LoadShared(string state) Parameters Type Name System.String state ProcessEvent(String, CheckpointTag, String, ResolvedEvent, out String, out String, out EmittedEventEnvelope[]) Declaration public bool ProcessEvent(string partition, CheckpointTag eventPosition, string category1, ResolvedEvent data, out string newState, out string newSharedState, out EmittedEventEnvelope[] emittedEvents) Parameters Type Name System.String partition CheckpointTag eventPosition System.String category1 ResolvedEvent data System.String newState System.String newSharedState EmittedEventEnvelope [] emittedEvents Returns Type Description System.Boolean ProcessNewCheckpoint(CheckpointTag, out EmittedEventEnvelope[]) Declaration public void ProcessNewCheckpoint(CheckpointTag checkpointPosition, out EmittedEventEnvelope[] emittedEvents) Parameters Type Name CheckpointTag checkpointPosition EmittedEventEnvelope [] emittedEvents ProcessPartitionCreated(String, CheckpointTag, ResolvedEvent, out EmittedEventEnvelope[]) Declaration public bool ProcessPartitionCreated(string partition, CheckpointTag createPosition, ResolvedEvent data, out EmittedEventEnvelope[] emittedEvents) Parameters Type Name System.String partition CheckpointTag createPosition ResolvedEvent data EmittedEventEnvelope [] emittedEvents Returns Type Description System.Boolean ProcessPartitionDeleted(String, CheckpointTag, out String) Declaration public bool ProcessPartitionDeleted(string partition, CheckpointTag deletePosition, out string newState) Parameters Type Name System.String partition CheckpointTag deletePosition System.String newState Returns Type Description System.Boolean TransformStateToResult() Declaration public string TransformStateToResult() Returns Type Description System.String Implements IProjectionStateHandler IDisposable ISourceDefinitionSource IProjectionCheckpointHandler"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Grpc.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Grpc.html",
    "title": "Namespace EventStore.Projections.Core.Services.Grpc | Event Store",
    "keywords": "Namespace EventStore.Projections.Core.Services.Grpc Classes ProjectionManagement"
  },
  "dotnet-api/code/EventStore.ClientAPI.StreamMetadataResult.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.StreamMetadataResult.html",
    "title": "Struct StreamMetadataResult | Event Store",
    "keywords": "Struct StreamMetadataResult Represents stream metadata as a series of properties for system data and a StreamMetadata object for user metadata. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public struct StreamMetadataResult Constructors StreamMetadataResult(String, Boolean, Int64, StreamMetadata) Constructs a new instance of StreamMetadataResult . Declaration public StreamMetadataResult(string stream, bool isStreamDeleted, long metastreamVersion, StreamMetadata streamMetadata) Parameters Type Name System.String stream System.Boolean isStreamDeleted System.Int64 metastreamVersion StreamMetadata streamMetadata Fields IsStreamDeleted True if the stream is soft-deleted. Declaration public readonly bool IsStreamDeleted Field Value Type System.Boolean MetastreamVersion The version of the metadata format. Declaration public readonly long MetastreamVersion Field Value Type System.Int64 Stream The name of the stream. Declaration public readonly string Stream Field Value Type System.String StreamMetadata A StreamMetadata containing user-specified metadata. Declaration public readonly StreamMetadata StreamMetadata Field Value Type StreamMetadata Extension Methods EnumExtensions.EnumValueName<T>(T)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.ProjectionQuery.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.ProjectionQuery.html",
    "title": "Class ProjectionManagementMessage.ProjectionQuery | Event Store",
    "keywords": "Class ProjectionManagementMessage.ProjectionQuery Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.ProjectionQuery Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionQuery : Message Constructors ProjectionQuery(String, String, Boolean, String, Nullable<Boolean>, Nullable<Boolean>, ProjectionSourceDefinition, ProjectionOutputConfig) Declaration public ProjectionQuery(string name, string query, bool emitEnabled, string projectionType, bool? trackEmittedStreams, bool? checkpointsEnabled, ProjectionSourceDefinition definition, ProjectionOutputConfig outputConfig) Parameters Type Name System.String name System.String query System.Boolean emitEnabled System.String projectionType System.Nullable < System.Boolean > trackEmittedStreams System.Nullable < System.Boolean > checkpointsEnabled ProjectionSourceDefinition definition ProjectionOutputConfig outputConfig Properties CheckpointsEnabled Declaration public bool? CheckpointsEnabled { get; } Property Value Type System.Nullable < System.Boolean > Definition Declaration public ProjectionSourceDefinition Definition { get; } Property Value Type ProjectionSourceDefinition EmitEnabled Declaration public bool EmitEnabled { get; } Property Value Type System.Boolean MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String OutputConfig Declaration public ProjectionOutputConfig OutputConfig { get; } Property Value Type ProjectionOutputConfig Query Declaration public string Query { get; } Property Value Type System.String TrackEmittedStreams Declaration public bool? TrackEmittedStreams { get; } Property Value Type System.Nullable < System.Boolean > Type Declaration public string Type { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.GetResultCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.GetResultCommand.html",
    "title": "Class GetResultCommand | Event Store",
    "keywords": "Class GetResultCommand Inheritance System.Object GetResultCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class GetResultCommand : object Fields Name Declaration public string Name Field Value Type System.String Partition Declaration public string Partition Field Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.FeedReaderMessageBase.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.FeedReaderMessageBase.html",
    "title": "Class FeedReaderMessage.FeedReaderMessageBase | Event Store",
    "keywords": "Class FeedReaderMessage.FeedReaderMessageBase Inheritance System.Object EventStore.Core.Messaging.Message FeedReaderMessage.FeedReaderMessageBase FeedReaderMessage.FeedPage FeedReaderMessage.ReadPage Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages.EventReaders.Feeds Assembly : EventStore.Projections.Core.dll Syntax public abstract class FeedReaderMessageBase : Message Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId"
  },
  "dotnet-api/code/EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.html",
    "title": "Class EventStoreAllFilteredCatchUpSubscription | Event Store",
    "keywords": "Class EventStoreAllFilteredCatchUpSubscription A catch-up subscription to all events in the Event Store with an applied filter. Inheritance System.Object EventStoreCatchUpSubscription EventStoreAllFilteredCatchUpSubscription Inherited Members EventStoreCatchUpSubscription.IsSubscribedToAll EventStoreCatchUpSubscription.StreamId EventStoreCatchUpSubscription.SubscriptionName EventStoreCatchUpSubscription.Log EventStoreCatchUpSubscription.Connection EventStoreCatchUpSubscription.ResolveLinkTos EventStoreCatchUpSubscription.UserCredentials EventStoreCatchUpSubscription.ReadBatchSize EventStoreCatchUpSubscription.MaxPushQueueSize EventStoreCatchUpSubscription.EventAppeared EventStoreCatchUpSubscription.Verbose EventStoreCatchUpSubscription.Subscription EventStoreCatchUpSubscription.AllowProcessing EventStoreCatchUpSubscription.ShouldStop EventStoreCatchUpSubscription.Stop(TimeSpan) EventStoreCatchUpSubscription.Stop() EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync() EventStoreCatchUpSubscription.EnqueuePushedEvent(EventStoreSubscription, ResolvedEvent) EventStoreCatchUpSubscription.ServerSubscriptionDropped(EventStoreSubscription, SubscriptionDropReason, Exception) EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification(SubscriptionDropReason, Exception) EventStoreCatchUpSubscription.EnsureProcessingPushQueue() EventStoreCatchUpSubscription.EnqueueAction(Func<Task>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class EventStoreAllFilteredCatchUpSubscription : EventStoreCatchUpSubscription Methods LiveProcessingStarted(EventStoreCatchUpSubscription, Position) The callback invoked when the subscription switches to push notifications. Declaration protected override Task LiveProcessingStarted(EventStoreCatchUpSubscription eventStoreCatchUpSubscription, Position lastPosition) Parameters Type Name EventStoreCatchUpSubscription eventStoreCatchUpSubscription Position lastPosition Returns Type Description System.Threading.Tasks.Task Overrides EventStoreCatchUpSubscription.LiveProcessingStarted(EventStoreCatchUpSubscription, Position) ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>) Read events until the given position or event number async. Declaration protected override Task<Position> ReadEventsTillAsync(IEventStoreConnection connection, bool resolveLinkTos, UserCredentials userCredentials, long? lastCommitPosition, long? lastEventNumber) Parameters Type Name IEventStoreConnection connection System.Boolean resolveLinkTos UserCredentials userCredentials System.Nullable < System.Int64 > lastCommitPosition System.Nullable < System.Int64 > lastEventNumber Returns Type Description System.Threading.Tasks.Task < Position > Overrides EventStoreCatchUpSubscription.ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>) SubscribeToStreamAsync() Subscribes to the stream. Declaration protected override Task SubscribeToStreamAsync() Returns Type Description System.Threading.Tasks.Task Overrides EventStoreCatchUpSubscription.SubscribeToStreamAsync() TryProcessAsync(ResolvedEvent) Try to process a single ResolvedEvent . Declaration protected override Task TryProcessAsync(ResolvedEvent e) Parameters Type Name ResolvedEvent e Returns Type Description System.Threading.Tasks.Task Overrides EventStoreCatchUpSubscription.TryProcessAsync(ResolvedEvent)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ReaderSubscriptionOptions.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ReaderSubscriptionOptions.html",
    "title": "Class ReaderSubscriptionOptions | Event Store",
    "keywords": "Class ReaderSubscriptionOptions Inheritance System.Object ReaderSubscriptionOptions Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class ReaderSubscriptionOptions : object Constructors ReaderSubscriptionOptions(Int64, Nullable<Int32>, Int32, Boolean, Nullable<Int32>) Declaration public ReaderSubscriptionOptions(long checkpointUnhandledBytesThreshold, int? checkpointProcessedEventsThreshold, int checkpointAfterMs, bool stopOnEof, int? stopAfterNEvents) Parameters Type Name System.Int64 checkpointUnhandledBytesThreshold System.Nullable < System.Int32 > checkpointProcessedEventsThreshold System.Int32 checkpointAfterMs System.Boolean stopOnEof System.Nullable < System.Int32 > stopAfterNEvents Properties CheckpointAfterMs Declaration public int CheckpointAfterMs { get; } Property Value Type System.Int32 CheckpointProcessedEventsThreshold Declaration public int? CheckpointProcessedEventsThreshold { get; } Property Value Type System.Nullable < System.Int32 > CheckpointUnhandledBytesThreshold Declaration public long CheckpointUnhandledBytesThreshold { get; } Property Value Type System.Int64 StopAfterNEvents Declaration public int? StopAfterNEvents { get; } Property Value Type System.Nullable < System.Int32 > StopOnEof Declaration public bool StopOnEof { get; } Property Value Type System.Boolean"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventFilter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventFilter.html",
    "title": "Class EventFilter | Event Store",
    "keywords": "Class EventFilter Inheritance System.Object EventFilter CategoryEventFilter EventByTypeIndexEventFilter MultiStreamEventFilter StreamEventFilter TransactionFileEventFilter Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public abstract class EventFilter : object Constructors EventFilter(Boolean, Boolean, HashSet<String>) Declaration protected EventFilter(bool allEvents, bool includeDeletedStreamEvents, HashSet<string> events) Parameters Type Name System.Boolean allEvents System.Boolean includeDeletedStreamEvents HashSet < System.String > events Methods DeletedNotificationPasses(String) Declaration protected abstract bool DeletedNotificationPasses(string positionStreamId) Parameters Type Name System.String positionStreamId Returns Type Description System.Boolean GetCategory(String) Declaration public abstract string GetCategory(string positionStreamId) Parameters Type Name System.String positionStreamId Returns Type Description System.String Passes(Boolean, String, String, Boolean) Declaration public bool Passes(bool resolvedFromLinkTo, string eventStreamId, string eventName, bool isStreamDeletedEvent = false) Parameters Type Name System.Boolean resolvedFromLinkTo System.String eventStreamId System.String eventName System.Boolean isStreamDeletedEvent Returns Type Description System.Boolean PassesDeleteNotification(String) Declaration public bool PassesDeleteNotification(string positionStreamId) Parameters Type Name System.String positionStreamId Returns Type Description System.Boolean PassesSource(Boolean, String, String) Declaration public abstract bool PassesSource(bool resolvedFromLinkTo, string positionStreamId, string eventType) Parameters Type Name System.Boolean resolvedFromLinkTo System.String positionStreamId System.String eventType Returns Type Description System.Boolean"
  },
  "dotnet-api/code/EventStore.ClientAPI.Internal.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Internal.html",
    "title": "Namespace EventStore.ClientAPI.Internal | Event Store",
    "keywords": "Namespace EventStore.ClientAPI.Internal Classes PersistentSubscriptionUpdateResult A Persistent Subscription Create Result is the result of a single operation updating a persistent subscription in the event store Enums PersistentSubscriptionUpdateStatus Enumeration representing the status of a single subscription create message."
  },
  "dotnet-api/code/EventStore.ClientAPI.UserManagement.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.UserManagement.html",
    "title": "Namespace EventStore.ClientAPI.UserManagement | Event Store",
    "keywords": "Namespace EventStore.ClientAPI.UserManagement Classes RelLink UserDetails Provides the details for a user. UsersManager API for managing users in Event Store through C# code. Communicates with Event Store over the RESTful API. All methods in this class are asynchronous."
  },
  "dotnet-api/code/EventStore.ClientAPI.RawStreamMetadataResult.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.RawStreamMetadataResult.html",
    "title": "Struct RawStreamMetadataResult | Event Store",
    "keywords": "Struct RawStreamMetadataResult Represents stream metadata as a series of properties for system data and a byte array for user metadata. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public struct RawStreamMetadataResult Constructors RawStreamMetadataResult(String, Boolean, Int64, Byte[]) Constructs a new instance of RawStreamMetadataResult . Declaration public RawStreamMetadataResult(string stream, bool isStreamDeleted, long metastreamVersion, byte[] streamMetadata) Parameters Type Name System.String stream System.Boolean isStreamDeleted System.Int64 metastreamVersion System.Byte [] streamMetadata Fields IsStreamDeleted True if the stream is soft-deleted. Declaration public readonly bool IsStreamDeleted Field Value Type System.Boolean MetastreamVersion The version of the metadata format. Declaration public readonly long MetastreamVersion Field Value Type System.Int64 Stream The name of the stream. Declaration public readonly string Stream Field Value Type System.String StreamMetadata A byte array containing user-specified metadata. Declaration public readonly byte[] StreamMetadata Field Value Type System.Byte [] Extension Methods EnumExtensions.EnumValueName<T>(T)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.StagedProcessingQueue.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.StagedProcessingQueue.html",
    "title": "Class StagedProcessingQueue | Event Store",
    "keywords": "Class StagedProcessingQueue Staged processing queue allows queued processing of multi-step tasks. The processing order allows multiple tasks to be processed at the same time with a constraint a) ordered stage: all preceding tasks in the queue has already started processing at the given stage. b) unordered stage: no items with the same correlation_id are in the queue before current item For instance: multiple foreach sub-projections can request state to be loaded, then they can process it and store. But no subprojection can process events prior to preceding projections has completed processing. Inheritance System.Object StagedProcessingQueue Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class StagedProcessingQueue : object Constructors StagedProcessingQueue(Boolean[]) Declaration public StagedProcessingQueue(bool[] orderedStage) Parameters Type Name System.Boolean [] orderedStage Properties Count Declaration public int Count { get; } Property Value Type System.Int32 IsEmpty Declaration public bool IsEmpty { get; } Property Value Type System.Boolean Methods Enqueue(StagedTask) Declaration public void Enqueue(StagedTask stagedTask) Parameters Type Name StagedTask stagedTask Initialize() Declaration public void Initialize() Process(Int32) Declaration public bool Process(int max = 1) Parameters Type Name System.Int32 max Returns Type Description System.Boolean Events EnsureTickPending Declaration public event Action EnsureTickPending Event Type Type Action"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage.html",
    "title": "Class UnwrapEnvelopeMessage | Event Store",
    "keywords": "Class UnwrapEnvelopeMessage Inheritance System.Object EventStore.Core.Messaging.Message UnwrapEnvelopeMessage Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messaging Assembly : EventStore.Projections.Core.dll Syntax public class UnwrapEnvelopeMessage : Message Constructors UnwrapEnvelopeMessage(Action) Declaration public UnwrapEnvelopeMessage(Action action) Parameters Type Name Action action Properties Action Declaration public Action Action { get; } Property Value Type Action MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId"
  },
  "dotnet-api/code/EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionConnectionDetails.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionConnectionDetails.html",
    "title": "Class PersistentSubscriptionConnectionDetails | Event Store",
    "keywords": "Class PersistentSubscriptionConnectionDetails Details of a connection for a persistent subscription. Inheritance System.Object PersistentSubscriptionConnectionDetails Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI.PersistentSubscriptions Assembly : EventStore.ClientAPI.dll Syntax public sealed class PersistentSubscriptionConnectionDetails Properties AvailableSlots Number of available slots. Declaration public int AvailableSlots { get; set; } Property Value Type System.Int32 AverageItemsPerSecond Average events per second on this connection. Declaration public decimal AverageItemsPerSecond { get; set; } Property Value Type System.Decimal CountSinceLastMeasurement Number of items seen since last measurement on this connection (used as the basis for AverageItemsPerSecond ). Declaration public long CountSinceLastMeasurement { get; set; } Property Value Type System.Int64 From Origin of this connection. Declaration public string From { get; set; } Property Value Type System.String InFlightMessages Number of in flight messages on this connection. Declaration public int InFlightMessages { get; set; } Property Value Type System.Int32 TotalItems Total items on this connection. Declaration public long TotalItems { get; set; } Property Value Type System.Int64 Username Connection username. Declaration public string Username { get; set; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.StatisticsReport.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.StatisticsReport.html",
    "title": "Class StatisticsReport | Event Store",
    "keywords": "Class StatisticsReport Inheritance System.Object StatisticsReport Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class StatisticsReport : object Properties Id Declaration public string Id { get; set; } Property Value Type System.String Statistics Declaration public ProjectionStatistics Statistics { get; set; } Property Value Type ProjectionStatistics"
  },
  "dotnet-api/code/EventStore.ClientAPI.SubscriptionDropReason.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.SubscriptionDropReason.html",
    "title": "Enum SubscriptionDropReason | Event Store",
    "keywords": "Enum SubscriptionDropReason Represents the reason subscription drop happened Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public enum SubscriptionDropReason Fields Name Description AccessDenied Subscription dropped because access to the stream was denied. CatchUpError Subscription dropped because of an error during the catch-up phase. ConnectionClosed Subscription dropped because the connection was closed. EventHandlerException Subscription dropped because an exception was thrown by a handler. MaxSubscribersReached The maximum number of subscribers for the persistent subscription has been reached NotAuthenticated Subscription dropped because the client is not authenticated. NotFound Target of persistent subscription was not found. Needs to be created first PersistentSubscriptionDeleted The persistent subscription has been deleted ProcessingQueueOverflow Subscription dropped because it's queue overflowed. ServerError Subscription dropped because of a server error. SubscribingError Subscription dropped because of an error in the subscription phase. Unknown Subscription was dropped for an unknown reason. UserInitiated Subscription dropped because the client called Close. Extension Methods EnumExtensions.EnumValueName<SubscriptionDropReason>()"
  },
  "dotnet-api/code/EventStore.Projections.Core.v8.Js1.CommandHandlerRegisteredDelegate.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.v8.Js1.CommandHandlerRegisteredDelegate.html",
    "title": "Delegate Js1.CommandHandlerRegisteredDelegate | Event Store",
    "keywords": "Delegate Js1.CommandHandlerRegisteredDelegate Namespace : EventStore.Projections.Core.v8 Assembly : EventStore.Projections.Core.dll Syntax public delegate void CommandHandlerRegisteredDelegate(string eventName, IntPtr handlerHandle); Parameters Type Name Description System.String eventName IntPtr handlerHandle"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IProgressResultWriter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IProgressResultWriter.html",
    "title": "Interface IProgressResultWriter | Event Store",
    "keywords": "Interface IProgressResultWriter Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public interface IProgressResultWriter Methods WriteProgress(Single) Declaration void WriteProgress(float progress) Parameters Type Name System.Single progress"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.TransactionFileEventFilter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.TransactionFileEventFilter.html",
    "title": "Class TransactionFileEventFilter | Event Store",
    "keywords": "Class TransactionFileEventFilter Inheritance System.Object EventFilter TransactionFileEventFilter Inherited Members EventFilter.Passes(Boolean, String, String, Boolean) EventFilter.PassesDeleteNotification(String) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class TransactionFileEventFilter : EventFilter Constructors TransactionFileEventFilter(Boolean, Boolean, HashSet<String>, Boolean) Declaration public TransactionFileEventFilter(bool allEvents, bool includeDeletedStreamEvents, HashSet<string> events, bool includeLinks = false) Parameters Type Name System.Boolean allEvents System.Boolean includeDeletedStreamEvents HashSet < System.String > events System.Boolean includeLinks Methods DeletedNotificationPasses(String) Declaration protected override bool DeletedNotificationPasses(string positionStreamId) Parameters Type Name System.String positionStreamId Returns Type Description System.Boolean Overrides EventFilter.DeletedNotificationPasses(String) GetCategory(String) Declaration public override string GetCategory(string positionStreamId) Parameters Type Name System.String positionStreamId Returns Type Description System.String Overrides EventFilter.GetCategory(String) PassesSource(Boolean, String, String) Declaration public override bool PassesSource(bool resolvedFromLinkTo, string positionStreamId, string eventType) Parameters Type Name System.Boolean resolvedFromLinkTo System.String positionStreamId System.String eventType Returns Type Description System.Boolean Overrides EventFilter.PassesSource(Boolean, String, String)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.PositionTracker.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.PositionTracker.html",
    "title": "Class PositionTracker | Event Store",
    "keywords": "Class PositionTracker Inheritance System.Object PositionTracker Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class PositionTracker : object Constructors PositionTracker(PositionTagger) Declaration public PositionTracker(PositionTagger positionTagger) Parameters Type Name PositionTagger positionTagger Properties LastTag Declaration public CheckpointTag LastTag { get; } Property Value Type CheckpointTag Methods Initialize() Declaration public void Initialize() UpdateByCheckpointTagForward(CheckpointTag) Declaration public void UpdateByCheckpointTagForward(CheckpointTag newTag) Parameters Type Name CheckpointTag newTag UpdateByCheckpointTagInitial(CheckpointTag) Declaration public void UpdateByCheckpointTagInitial(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.PartitionState.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.PartitionState.html",
    "title": "Class PartitionState | Event Store",
    "keywords": "Class PartitionState Inheritance System.Object PartitionState Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class PartitionState : object Constructors PartitionState(String, String, CheckpointTag) Declaration public PartitionState(string state, string result, CheckpointTag causedBy) Parameters Type Name System.String state System.String result CheckpointTag causedBy Properties CausedBy Declaration public CheckpointTag CausedBy { get; } Property Value Type CheckpointTag Result Declaration public string Result { get; } Property Value Type System.String State Declaration public string State { get; } Property Value Type System.String Methods Deserialize(String, CheckpointTag) Declaration public static PartitionState Deserialize(string serializedState, CheckpointTag causedBy) Parameters Type Name System.String serializedState CheckpointTag causedBy Returns Type Description PartitionState IsChanged(PartitionState) Declaration public bool IsChanged(PartitionState newState) Parameters Type Name PartitionState newState Returns Type Description System.Boolean Serialize() Declaration public string Serialize() Returns Type Description System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.ReaderAssignedReader.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.ReaderAssignedReader.html",
    "title": "Class EventReaderSubscriptionMessage.ReaderAssignedReader | Event Store",
    "keywords": "Class EventReaderSubscriptionMessage.ReaderAssignedReader Inheritance System.Object EventStore.Core.Messaging.Message EventReaderSubscriptionMessageBase EventReaderSubscriptionMessage.ReaderAssignedReader Inherited Members EventReaderSubscriptionMessageBase.CheckpointTag EventReaderSubscriptionMessageBase.Progress EventReaderSubscriptionMessageBase.SubscriptionMessageSequenceNumber EventReaderSubscriptionMessageBase.SubscriptionId EventReaderSubscriptionMessageBase.Source EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class ReaderAssignedReader : EventReaderSubscriptionMessageBase Constructors ReaderAssignedReader(Guid, Guid) Declaration public ReaderAssignedReader(Guid subscriptionId, Guid readerId) Parameters Type Name Guid subscriptionId Guid readerId Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventReaderSubscriptionMessageBase.MsgTypeId ReaderId Declaration public Guid ReaderId { get; } Property Value Type Guid"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderCoreServiceMessage.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderCoreServiceMessage.html",
    "title": "Class ReaderCoreServiceMessage | Event Store",
    "keywords": "Class ReaderCoreServiceMessage Inheritance System.Object ReaderCoreServiceMessage Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public static class ReaderCoreServiceMessage : object"
  },
  "dotnet-api/code/EventStore.ClientAPI.ConnectionSettingsBuilder.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ConnectionSettingsBuilder.html",
    "title": "Class ConnectionSettingsBuilder | Event Store",
    "keywords": "Class ConnectionSettingsBuilder Used to build a connection settings (fluent API) Inheritance System.Object ConnectionSettingsBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class ConnectionSettingsBuilder Methods Build() Convert the mutable ConnectionSettingsBuilder object to an immutable ConnectionSettings object. Declaration public ConnectionSettings Build() Returns Type Description ConnectionSettings EnableVerboseLogging() Turns on verbose EventStoreConnection internal logic logging. By contains default information about connection, disconnection and errors, but you can customize output. Declaration public ConnectionSettingsBuilder EnableVerboseLogging() Returns Type Description ConnectionSettingsBuilder FailOnNoServerResponse() Marks that no response from server should cause an error on the request. Declaration public ConnectionSettingsBuilder FailOnNoServerResponse() Returns Type Description ConnectionSettingsBuilder KeepReconnecting() Allows infinite reconnection attempts. Declaration public ConnectionSettingsBuilder KeepReconnecting() Returns Type Description ConnectionSettingsBuilder KeepRetrying() Allows infinite operation retry attempts. Declaration public ConnectionSettingsBuilder KeepRetrying() Returns Type Description ConnectionSettingsBuilder LimitAttemptsForOperationTo(Int32) Limits the number of operation attempts. Declaration public ConnectionSettingsBuilder LimitAttemptsForOperationTo(int limit) Parameters Type Name System.Int32 limit Returns Type Description ConnectionSettingsBuilder LimitConcurrentOperationsTo(Int32) Limits the number of concurrent operations that this connection can have. Declaration public ConnectionSettingsBuilder LimitConcurrentOperationsTo(int limit) Parameters Type Name System.Int32 limit Returns Type Description ConnectionSettingsBuilder LimitOperationsQueueTo(Int32) Sets the limit for number of outstanding operations. Declaration public ConnectionSettingsBuilder LimitOperationsQueueTo(int limit) Parameters Type Name System.Int32 limit Returns Type Description ConnectionSettingsBuilder LimitReconnectionsTo(Int32) Limits the number of reconnections this connection can try to make. Declaration public ConnectionSettingsBuilder LimitReconnectionsTo(int limit) Parameters Type Name System.Int32 limit Returns Type Description ConnectionSettingsBuilder LimitRetriesForOperationTo(Int32) Limits the number of operation retries. Declaration public ConnectionSettingsBuilder LimitRetriesForOperationTo(int limit) Parameters Type Name System.Int32 limit Returns Type Description ConnectionSettingsBuilder PerformOnAnyNode() Allow for writes to be forwarded and read requests served locally if node is not master (cluster version only). Declaration public ConnectionSettingsBuilder PerformOnAnyNode() Returns Type Description ConnectionSettingsBuilder PerformOnMasterOnly() Requires all write and read requests to be served only by master (cluster version only). Declaration public ConnectionSettingsBuilder PerformOnMasterOnly() Returns Type Description ConnectionSettingsBuilder PreferRandomNode() Whether to randomly choose a node that's alive from the known nodes. Declaration public ConnectionSettingsBuilder PreferRandomNode() Returns Type Description ConnectionSettingsBuilder A DnsClusterSettingsBuilder for further configuration. PreferReadOnlyReplica() Whether to prioritize choosing a read only replica that's alive from the known nodes. Declaration public ConnectionSettingsBuilder PreferReadOnlyReplica() Returns Type Description ConnectionSettingsBuilder A DnsClusterSettingsBuilder for further configuration. PreferSlaveNode() Whether to prioritize choosing a slave node that's alive from the known nodes. Declaration public ConnectionSettingsBuilder PreferSlaveNode() Returns Type Description ConnectionSettingsBuilder A DnsClusterSettingsBuilder for further configuration. SetClusterDns(String) Sets the DNS name under which cluster nodes are listed. Declaration public ConnectionSettingsBuilder SetClusterDns(string clusterDns) Parameters Type Name System.String clusterDns Returns Type Description ConnectionSettingsBuilder A DnsClusterSettingsBuilder for further configuration. Exceptions Type Condition System.ArgumentNullException If clusterDns is null or empty. SetClusterGossipPort(Int32) Sets the well-known port on which the cluster gossip is taking place. If you are using the commercial edition of Event Store HA, with Manager nodes in place, this should be the port number of the External HTTP port on which the managers are running. If you are using the open source edition of Event Store HA, this should be the External HTTP port that the nodes are running on. If you cannot use a well-known port for this across all nodes, you can instead use gossip seed discovery and set the System.Net.IPEndPoint of some seed nodes instead. Declaration public ConnectionSettingsBuilder SetClusterGossipPort(int clusterGossipPort) Parameters Type Name System.Int32 clusterGossipPort Returns Type Description ConnectionSettingsBuilder A DnsClusterSettingsBuilder for further configuration. SetDefaultUserCredentials(UserCredentials) Sets the default UserCredentials used for this connection. If user credentials are not given for an operation, these credentials will be used. Declaration public ConnectionSettingsBuilder SetDefaultUserCredentials(UserCredentials userCredentials) Parameters Type Name UserCredentials userCredentials Returns Type Description ConnectionSettingsBuilder SetGossipSeedEndPoints(GossipSeed[]) Sets gossip seed endpoints for the client. Declaration public ConnectionSettingsBuilder SetGossipSeedEndPoints(params GossipSeed[] gossipSeeds) Parameters Type Name GossipSeed [] gossipSeeds Returns Type Description ConnectionSettingsBuilder A ClusterSettingsBuilder for further configuration. Exceptions Type Condition System.ArgumentException If no gossip seeds are specified. SetGossipSeedEndPoints(Boolean, EndPoint[]) Sets gossip seed endpoints for the client. note This should be the external HTTP endpoint of the server, as it is required for the client to exchange gossip with the server. The standard port is 2113. If the server requires a specific Host header to be sent as part of the gossip request, use the overload of this method taking GossipSeed instead. Declaration public ConnectionSettingsBuilder SetGossipSeedEndPoints(bool seedOverTls, params EndPoint[] gossipSeeds) Parameters Type Name System.Boolean seedOverTls System.Net.EndPoint [] gossipSeeds Returns Type Description ConnectionSettingsBuilder A ClusterSettingsBuilder for further configuration. Exceptions Type Condition System.ArgumentException If no gossip seeds are specified. SetGossipSeedEndPoints(EndPoint[]) Sets gossip seed endpoints for the client. note This should be the external HTTP endpoint of the server, as it is required for the client to exchange gossip with the server. The standard port is 2113. If the server requires a specific Host header to be sent as part of the gossip request, use the overload of this method taking GossipSeed instead. Declaration public ConnectionSettingsBuilder SetGossipSeedEndPoints(params EndPoint[] gossipSeeds) Parameters Type Name System.Net.EndPoint [] gossipSeeds Returns Type Description ConnectionSettingsBuilder A ClusterSettingsBuilder for further configuration. Exceptions Type Condition System.ArgumentException If no gossip seeds are specified. SetGossipTimeout(TimeSpan) Sets the period after which gossip times out if none is received. Declaration public ConnectionSettingsBuilder SetGossipTimeout(TimeSpan timeout) Parameters Type Name System.TimeSpan timeout Returns Type Description ConnectionSettingsBuilder A DnsClusterSettingsBuilder for further configuration. SetHeartbeatInterval(TimeSpan) Sets how often heartbeats should be expected on the connection (lower values detect broken sockets faster). Declaration public ConnectionSettingsBuilder SetHeartbeatInterval(TimeSpan interval) Parameters Type Name System.TimeSpan interval Returns Type Description ConnectionSettingsBuilder SetHeartbeatTimeout(TimeSpan) Sets how long to wait without heartbeats before determining a connection to be dead (must be longer than heartbeat interval). Declaration public ConnectionSettingsBuilder SetHeartbeatTimeout(TimeSpan timeout) Parameters Type Name System.TimeSpan timeout Returns Type Description ConnectionSettingsBuilder SetMaxDiscoverAttempts(Int32) Sets the maximum number of attempts for discovery. Declaration public ConnectionSettingsBuilder SetMaxDiscoverAttempts(int maxDiscoverAttempts) Parameters Type Name System.Int32 maxDiscoverAttempts Returns Type Description ConnectionSettingsBuilder A DnsClusterSettingsBuilder for further configuration. Exceptions Type Condition System.ArgumentOutOfRangeException If maxDiscoverAttempts is less than or equal to 0. SetOperationTimeoutTo(TimeSpan) Sets the operation timeout duration. Declaration public ConnectionSettingsBuilder SetOperationTimeoutTo(TimeSpan operationTimeout) Parameters Type Name System.TimeSpan operationTimeout Returns Type Description ConnectionSettingsBuilder SetQueueTimeoutTo(TimeSpan) Sets the maximum permitted time a request may be queued awaiting transmission; if exceeded an OperationExpiredException is thrown. Declaration public ConnectionSettingsBuilder SetQueueTimeoutTo(TimeSpan queueTimeout) Parameters Type Name System.TimeSpan queueTimeout Returns Type Description ConnectionSettingsBuilder SetReconnectionDelayTo(TimeSpan) Sets the delay between reconnection attempts. Declaration public ConnectionSettingsBuilder SetReconnectionDelayTo(TimeSpan reconnectionDelay) Parameters Type Name System.TimeSpan reconnectionDelay Returns Type Description ConnectionSettingsBuilder SetTimeoutCheckPeriodTo(TimeSpan) Sets how often timeouts should be checked for. Declaration public ConnectionSettingsBuilder SetTimeoutCheckPeriodTo(TimeSpan timeoutCheckPeriod) Parameters Type Name System.TimeSpan timeoutCheckPeriod Returns Type Description ConnectionSettingsBuilder UseConsoleLogger() Configures the connection to output log messages to the console. Declaration public ConnectionSettingsBuilder UseConsoleLogger() Returns Type Description ConnectionSettingsBuilder UseCustomHttpClient(IHttpClient) Configures the connection to use a custom IHttpClient . Declaration public ConnectionSettingsBuilder UseCustomHttpClient(IHttpClient client) Parameters Type Name IHttpClient client Returns Type Description ConnectionSettingsBuilder UseCustomLogger(ILogger) Configures the connection to output log messages to the given ILogger . You should implement this interface using another library such as NLog or log4net. Declaration public ConnectionSettingsBuilder UseCustomLogger(ILogger logger) Parameters Type Name ILogger logger Returns Type Description ConnectionSettingsBuilder UseDebugLogger() Configures the connection to output log messages to the listeners configured on System.Diagnostics.Debug . Declaration public ConnectionSettingsBuilder UseDebugLogger() Returns Type Description ConnectionSettingsBuilder UseFileLogger(String) Configures the connection to output log messages to a file. Declaration public ConnectionSettingsBuilder UseFileLogger(string filename) Parameters Type Name System.String filename Returns Type Description ConnectionSettingsBuilder UseSslConnection(String, Boolean) Uses a SSL connection over TCP. This should generally be used with authentication. Declaration public ConnectionSettingsBuilder UseSslConnection(string targetHost, bool validateServer) Parameters Type Name System.String targetHost System.Boolean validateServer Returns Type Description ConnectionSettingsBuilder WithConnectionTimeoutOf(TimeSpan) Sets the timeout for attempting to connect to a server before aborting and attempting a reconnect. Declaration public ConnectionSettingsBuilder WithConnectionTimeoutOf(TimeSpan timeout) Parameters Type Name System.TimeSpan timeout Returns Type Description ConnectionSettingsBuilder Operators Implicit(ConnectionSettingsBuilder to ConnectionSettings) Convert the mutable ConnectionSettingsBuilder object to an immutable ConnectionSettings object. Declaration public static implicit operator ConnectionSettings(ConnectionSettingsBuilder builder) Parameters Type Name ConnectionSettingsBuilder builder Returns Type Description ConnectionSettings An immutable ConnectionSettings object with the values specified by the builder."
  },
  "dotnet-api/code/EventStore.Projections.Core.Utils.EncodingExtensions.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Utils.EncodingExtensions.html",
    "title": "Class EncodingExtensions | Event Store",
    "keywords": "Class EncodingExtensions Inheritance System.Object EncodingExtensions Namespace : EventStore.Projections.Core.Utils Assembly : EventStore.Projections.Core.dll Syntax public static class EncodingExtensions : object Methods Apply(String, Object[]) Declaration public static string Apply(this string format, params object[] args) Parameters Type Name System.String format System.Object [] args Returns Type Description System.String FromUtf8(Byte[]) Declaration public static string FromUtf8(this byte[] self) Parameters Type Name System.Byte [] self Returns Type Description System.String ToUtf8(String) Declaration public static byte[] ToUtf8(this string self) Parameters Type Name System.String self Returns Type Description System.Byte []"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderPartitionDeleted.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderPartitionDeleted.html",
    "title": "Class ReaderSubscriptionMessage.EventReaderPartitionDeleted | Event Store",
    "keywords": "Class ReaderSubscriptionMessage.EventReaderPartitionDeleted Inheritance System.Object EventStore.Core.Messaging.Message ReaderSubscriptionMessage.SubscriptionMessage ReaderSubscriptionMessage.EventReaderPartitionDeleted Inherited Members ReaderSubscriptionMessage.SubscriptionMessage.CorrelationId ReaderSubscriptionMessage.SubscriptionMessage.PreTagged ReaderSubscriptionMessage.SubscriptionMessage.Source EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class EventReaderPartitionDeleted : ReaderSubscriptionMessage.SubscriptionMessage Constructors EventReaderPartitionDeleted(Guid, String, Nullable<Int64>, Nullable<TFPos>, Nullable<TFPos>, String, Nullable<Int64>, CheckpointTag, Object) Declaration public EventReaderPartitionDeleted(Guid correlationId, string partition, long? lastEventNumber, TFPos? deleteLinkOrEventPosition, TFPos? deleteEventOrLinkTargetPosition, string positionStreamId, long? positionEventNumber, CheckpointTag preTagged = null, object source = null) Parameters Type Name Guid correlationId System.String partition System.Nullable < System.Int64 > lastEventNumber System.Nullable < EventStore.Core.Data.TFPos > deleteLinkOrEventPosition System.Nullable < EventStore.Core.Data.TFPos > deleteEventOrLinkTargetPosition System.String positionStreamId System.Nullable < System.Int64 > positionEventNumber CheckpointTag preTagged System.Object source Properties DeleteEventOrLinkTargetPosition Declaration public TFPos? DeleteEventOrLinkTargetPosition { get; } Property Value Type System.Nullable < EventStore.Core.Data.TFPos > DeleteLinkOrEventPosition Declaration public TFPos? DeleteLinkOrEventPosition { get; } Property Value Type System.Nullable < EventStore.Core.Data.TFPos > LastEventNumber Declaration public long? LastEventNumber { get; } Property Value Type System.Nullable < System.Int64 > MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ReaderSubscriptionMessage.SubscriptionMessage.MsgTypeId Partition Declaration public string Partition { get; } Property Value Type System.String PositionEventNumber Declaration public long? PositionEventNumber { get; } Property Value Type System.Nullable < System.Int64 > PositionStreamId Declaration public string PositionStreamId { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementControlMessage.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementControlMessage.html",
    "title": "Class CoreProjectionManagementControlMessage | Event Store",
    "keywords": "Class CoreProjectionManagementControlMessage Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionManagementControlMessage CoreProjectionManagementMessage.CreateAndPrepare CoreProjectionManagementMessage.CreatePrepared CoreProjectionManagementMessage.Dispose CoreProjectionManagementMessage.GetResult CoreProjectionManagementMessage.GetState CoreProjectionManagementMessage.Kill CoreProjectionManagementMessage.LoadStopped CoreProjectionManagementMessage.Start CoreProjectionManagementMessage.Stop Inherited Members CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class CoreProjectionManagementControlMessage : CoreProjectionManagementMessageBase Constructors CoreProjectionManagementControlMessage(Guid, Guid) Declaration public CoreProjectionManagementControlMessage(Guid projectionId, Guid workerId) Parameters Type Name Guid projectionId Guid workerId Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionManagementMessageBase.MsgTypeId WorkerId Declaration public Guid WorkerId { get; } Property Value Type Guid"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventReaderBasedProjectionProcessingStrategy.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventReaderBasedProjectionProcessingStrategy.html",
    "title": "Class EventReaderBasedProjectionProcessingStrategy | Event Store",
    "keywords": "Class EventReaderBasedProjectionProcessingStrategy Inheritance System.Object ProjectionProcessingStrategy EventReaderBasedProjectionProcessingStrategy DefaultProjectionProcessingStrategy Inherited Members ProjectionProcessingStrategy._name ProjectionProcessingStrategy._projectionVersion ProjectionProcessingStrategy._logger ProjectionProcessingStrategy.Create(Guid, IPublisher, Guid, IPrincipal, IPublisher, IODispatcher, ReaderSubscriptionDispatcher, ITimeProvider) ProjectionProcessingStrategy.GetStopOnEof() ProjectionProcessingStrategy.GetUseCheckpoints() ProjectionProcessingStrategy.GetProducesRunningResults() Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public abstract class EventReaderBasedProjectionProcessingStrategy : ProjectionProcessingStrategy Constructors EventReaderBasedProjectionProcessingStrategy(String, ProjectionVersion, ProjectionConfig, IQuerySources, ILogger, ReaderSubscriptionDispatcher) Declaration protected EventReaderBasedProjectionProcessingStrategy(string name, ProjectionVersion projectionVersion, ProjectionConfig projectionConfig, IQuerySources sourceDefinition, ILogger logger, ReaderSubscriptionDispatcher subscriptionDispatcher) Parameters Type Name System.String name ProjectionVersion projectionVersion ProjectionConfig projectionConfig IQuerySources sourceDefinition EventStore.Common.Log.ILogger logger ReaderSubscriptionDispatcher subscriptionDispatcher Fields _projectionConfig Declaration protected readonly ProjectionConfig _projectionConfig Field Value Type ProjectionConfig _sourceDefinition Declaration protected readonly IQuerySources _sourceDefinition Field Value Type IQuerySources Methods CreateCheckpointManager(Guid, IPublisher, IODispatcher, ProjectionNamesBuilder, CoreProjectionCheckpointWriter, Boolean, IReaderStrategy) Declaration protected virtual ICoreProjectionCheckpointManager CreateCheckpointManager(Guid projectionCorrelationId, IPublisher publisher, IODispatcher ioDispatcher, ProjectionNamesBuilder namingBuilder, CoreProjectionCheckpointWriter coreProjectionCheckpointWriter, bool definesFold, IReaderStrategy readerStrategy) Parameters Type Name Guid projectionCorrelationId EventStore.Core.Bus.IPublisher publisher EventStore.Core.Helpers.IODispatcher ioDispatcher ProjectionNamesBuilder namingBuilder CoreProjectionCheckpointWriter coreProjectionCheckpointWriter System.Boolean definesFold IReaderStrategy readerStrategy Returns Type Description ICoreProjectionCheckpointManager CreateFirstPhaseResultEmitter(ProjectionNamesBuilder) Declaration protected abstract IResultEventEmitter CreateFirstPhaseResultEmitter(ProjectionNamesBuilder namingBuilder) Parameters Type Name ProjectionNamesBuilder namingBuilder Returns Type Description IResultEventEmitter CreateFirstPhaseResultWriter(IEmittedEventWriter, CheckpointTag, ProjectionNamesBuilder) Declaration protected virtual IResultWriter CreateFirstPhaseResultWriter(IEmittedEventWriter emittedEventWriter, CheckpointTag zeroCheckpointTag, ProjectionNamesBuilder namingBuilder) Parameters Type Name IEmittedEventWriter emittedEventWriter CheckpointTag zeroCheckpointTag ProjectionNamesBuilder namingBuilder Returns Type Description IResultWriter CreateFirstProcessingPhase(IPublisher, IPublisher, Guid, PartitionStateCache, Action, CoreProjection, ReaderSubscriptionDispatcher, CheckpointTag, ICoreProjectionCheckpointManager, IReaderStrategy, IResultWriter, IEmittedStreamsTracker) Declaration protected abstract IProjectionProcessingPhase CreateFirstProcessingPhase(IPublisher publisher, IPublisher inputQueue, Guid projectionCorrelationId, PartitionStateCache partitionStateCache, Action updateStatistics, CoreProjection coreProjection, ReaderSubscriptionDispatcher subscriptionDispatcher, CheckpointTag zeroCheckpointTag, ICoreProjectionCheckpointManager checkpointManager, IReaderStrategy readerStrategy, IResultWriter resultWriter, IEmittedStreamsTracker emittedStreamsTracker) Parameters Type Name EventStore.Core.Bus.IPublisher publisher EventStore.Core.Bus.IPublisher inputQueue Guid projectionCorrelationId PartitionStateCache partitionStateCache Action updateStatistics CoreProjection coreProjection ReaderSubscriptionDispatcher subscriptionDispatcher CheckpointTag zeroCheckpointTag ICoreProjectionCheckpointManager checkpointManager IReaderStrategy readerStrategy IResultWriter resultWriter IEmittedStreamsTracker emittedStreamsTracker Returns Type Description IProjectionProcessingPhase CreateProcessingPhases(IPublisher, IPublisher, Guid, PartitionStateCache, Action, CoreProjection, ProjectionNamesBuilder, ITimeProvider, IODispatcher, CoreProjectionCheckpointWriter) Declaration public override sealed IProjectionProcessingPhase[] CreateProcessingPhases(IPublisher publisher, IPublisher inputQueue, Guid projectionCorrelationId, PartitionStateCache partitionStateCache, Action updateStatistics, CoreProjection coreProjection, ProjectionNamesBuilder namingBuilder, ITimeProvider timeProvider, IODispatcher ioDispatcher, CoreProjectionCheckpointWriter coreProjectionCheckpointWriter) Parameters Type Name EventStore.Core.Bus.IPublisher publisher EventStore.Core.Bus.IPublisher inputQueue Guid projectionCorrelationId PartitionStateCache partitionStateCache Action updateStatistics CoreProjection coreProjection ProjectionNamesBuilder namingBuilder EventStore.Core.Services.TimerService.ITimeProvider timeProvider EventStore.Core.Helpers.IODispatcher ioDispatcher CoreProjectionCheckpointWriter coreProjectionCheckpointWriter Returns Type Description IProjectionProcessingPhase [] Overrides ProjectionProcessingStrategy.CreateProcessingPhases(IPublisher, IPublisher, Guid, PartitionStateCache, Action, CoreProjection, ProjectionNamesBuilder, ITimeProvider, IODispatcher, CoreProjectionCheckpointWriter) CreateProjectionProcessingPhases(IPublisher, IPublisher, Guid, ProjectionNamesBuilder, PartitionStateCache, CoreProjection, IODispatcher, IProjectionProcessingPhase) Declaration protected abstract IProjectionProcessingPhase[] CreateProjectionProcessingPhases(IPublisher publisher, IPublisher inputQueue, Guid projectionCorrelationId, ProjectionNamesBuilder namingBuilder, PartitionStateCache partitionStateCache, CoreProjection coreProjection, IODispatcher ioDispatcher, IProjectionProcessingPhase firstPhase) Parameters Type Name EventStore.Core.Bus.IPublisher publisher EventStore.Core.Bus.IPublisher inputQueue Guid projectionCorrelationId ProjectionNamesBuilder namingBuilder PartitionStateCache partitionStateCache CoreProjection coreProjection EventStore.Core.Helpers.IODispatcher ioDispatcher IProjectionProcessingPhase firstPhase Returns Type Description IProjectionProcessingPhase [] CreateReaderStrategy(ITimeProvider) Declaration protected virtual IReaderStrategy CreateReaderStrategy(ITimeProvider timeProvider) Parameters Type Name EventStore.Core.Services.TimerService.ITimeProvider timeProvider Returns Type Description IReaderStrategy EnrichStatistics(ProjectionStatistics) Declaration public override void EnrichStatistics(ProjectionStatistics info) Parameters Type Name ProjectionStatistics info Overrides ProjectionProcessingStrategy.EnrichStatistics(ProjectionStatistics) GetRequiresRootPartition() Declaration public override bool GetRequiresRootPartition() Returns Type Description System.Boolean Overrides ProjectionProcessingStrategy.GetRequiresRootPartition() GetSourceDefinition() Declaration protected override IQuerySources GetSourceDefinition() Returns Type Description IQuerySources Overrides ProjectionProcessingStrategy.GetSourceDefinition()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventSubscriptionBasedProjectionProcessingPhase.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventSubscriptionBasedProjectionProcessingPhase.html",
    "title": "Class EventSubscriptionBasedProjectionProcessingPhase | Event Store",
    "keywords": "Class EventSubscriptionBasedProjectionProcessingPhase Inheritance System.Object EventSubscriptionBasedProjectionProcessingPhase EventProcessingProjectionProcessingPhase Implements IProjectionPhaseCompleter IProjectionPhaseCheckpointManager EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.ProgressChanged > EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.SubscriptionStarted > EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.NotAuthorized > EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.EofReached > EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.CheckpointSuggested > EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.ReaderAssignedReader > EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.Failed > IProjectionProcessingPhase IDisposable EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.GetState > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.GetResult > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.PrerecordedEventsLoaded > IProjectionPhaseStateManager Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public abstract class EventSubscriptionBasedProjectionProcessingPhase : object, IProjectionPhaseCompleter, IProjectionPhaseCheckpointManager, IHandle<EventReaderSubscriptionMessage.ProgressChanged>, IHandle<EventReaderSubscriptionMessage.SubscriptionStarted>, IHandle<EventReaderSubscriptionMessage.NotAuthorized>, IHandle<EventReaderSubscriptionMessage.EofReached>, IHandle<EventReaderSubscriptionMessage.CheckpointSuggested>, IHandle<EventReaderSubscriptionMessage.ReaderAssignedReader>, IHandle<EventReaderSubscriptionMessage.Failed>, IProjectionProcessingPhase, IDisposable, IHandle<CoreProjectionManagementMessage.GetState>, IHandle<CoreProjectionManagementMessage.GetResult>, IHandle<CoreProjectionProcessingMessage.PrerecordedEventsLoaded>, IProjectionPhaseStateManager Constructors EventSubscriptionBasedProjectionProcessingPhase(IPublisher, IPublisher, ICoreProjectionForProcessingPhase, Guid, ICoreProjectionCheckpointManager, ProjectionConfig, String, ILogger, CheckpointTag, PartitionStateCache, IResultWriter, Action, ReaderSubscriptionDispatcher, IReaderStrategy, Boolean, Boolean, Boolean, Boolean, IEmittedStreamsTracker) Declaration protected EventSubscriptionBasedProjectionProcessingPhase(IPublisher publisher, IPublisher inputQueue, ICoreProjectionForProcessingPhase coreProjection, Guid projectionCorrelationId, ICoreProjectionCheckpointManager checkpointManager, ProjectionConfig projectionConfig, string projectionName, ILogger logger, CheckpointTag zeroCheckpointTag, PartitionStateCache partitionStateCache, IResultWriter resultWriter, Action updateStatistics, ReaderSubscriptionDispatcher subscriptionDispatcher, IReaderStrategy readerStrategy, bool useCheckpoints, bool stopOnEof, bool orderedPartitionProcessing, bool isBiState, IEmittedStreamsTracker emittedStreamsTracker) Parameters Type Name EventStore.Core.Bus.IPublisher publisher EventStore.Core.Bus.IPublisher inputQueue ICoreProjectionForProcessingPhase coreProjection Guid projectionCorrelationId ICoreProjectionCheckpointManager checkpointManager ProjectionConfig projectionConfig System.String projectionName EventStore.Common.Log.ILogger logger CheckpointTag zeroCheckpointTag PartitionStateCache partitionStateCache IResultWriter resultWriter Action updateStatistics ReaderSubscriptionDispatcher subscriptionDispatcher IReaderStrategy readerStrategy System.Boolean useCheckpoints System.Boolean stopOnEof System.Boolean orderedPartitionProcessing System.Boolean isBiState IEmittedStreamsTracker emittedStreamsTracker Fields _checkpointManager Declaration protected readonly ICoreProjectionCheckpointManager _checkpointManager Field Value Type ICoreProjectionCheckpointManager _coreProjection Declaration protected readonly ICoreProjectionForProcessingPhase _coreProjection Field Value Type ICoreProjectionForProcessingPhase _currentSubscriptionId Declaration protected Guid _currentSubscriptionId Field Value Type Guid _emittedStreamsTracker Declaration protected readonly IEmittedStreamsTracker _emittedStreamsTracker Field Value Type IEmittedStreamsTracker _expectedSubscriptionMessageSequenceNumber Declaration protected long _expectedSubscriptionMessageSequenceNumber Field Value Type System.Int64 _logger Declaration protected readonly ILogger _logger Field Value Type EventStore.Common.Log.ILogger _partitionStateCache Declaration protected readonly PartitionStateCache _partitionStateCache Field Value Type PartitionStateCache _processingQueue Declaration protected readonly CoreProjectionQueue _processingQueue Field Value Type CoreProjectionQueue _progressResultWriter Declaration protected readonly IProgressResultWriter _progressResultWriter Field Value Type IProgressResultWriter _projectionConfig Declaration protected readonly ProjectionConfig _projectionConfig Field Value Type ProjectionConfig _projectionCorrelationId Declaration protected readonly Guid _projectionCorrelationId Field Value Type Guid _projectionName Declaration protected readonly string _projectionName Field Value Type System.String _publisher Declaration protected readonly IPublisher _publisher Field Value Type EventStore.Core.Bus.IPublisher _readerStrategy Declaration protected readonly IReaderStrategy _readerStrategy Field Value Type IReaderStrategy _resultWriter Declaration protected readonly IResultWriter _resultWriter Field Value Type IResultWriter _state Declaration protected PhaseState _state Field Value Type PhaseState _stopOnEof Declaration protected readonly bool _stopOnEof Field Value Type System.Boolean _subscribed Declaration protected bool _subscribed Field Value Type System.Boolean _subscriptionDispatcher Declaration protected readonly ReaderSubscriptionDispatcher _subscriptionDispatcher Field Value Type ReaderSubscriptionDispatcher _subscriptionStartedAtLastCommitPosition Declaration protected long _subscriptionStartedAtLastCommitPosition Field Value Type System.Int64 _useCheckpoints Declaration protected readonly bool _useCheckpoints Field Value Type System.Boolean _zeroCheckpointTag Declaration protected readonly CheckpointTag _zeroCheckpointTag Field Value Type CheckpointTag Properties CheckpointManager Declaration public ICoreProjectionCheckpointManager CheckpointManager { get; } Property Value Type ICoreProjectionCheckpointManager EmittedStreamsTracker Declaration public IEmittedStreamsTracker EmittedStreamsTracker { get; } Property Value Type IEmittedStreamsTracker LastProcessedEventPosition Declaration public CheckpointTag LastProcessedEventPosition { get; } Property Value Type CheckpointTag Methods AdjustTag(CheckpointTag) Declaration public CheckpointTag AdjustTag(CheckpointTag tag) Parameters Type Name CheckpointTag tag Returns Type Description CheckpointTag BeginGetPartitionStateAt(String, CheckpointTag, Action<PartitionState>, Boolean) Declaration public void BeginGetPartitionStateAt(string statePartition, CheckpointTag at, Action<PartitionState> loadCompleted, bool lockLoaded) Parameters Type Name System.String statePartition CheckpointTag at Action < PartitionState > loadCompleted System.Boolean lockLoaded Complete() Declaration public void Complete() Dispose() Declaration public abstract void Dispose() EmitEofResult(String, String, CheckpointTag, Guid, String) Declaration public void EmitEofResult(string partition, string resultBody, CheckpointTag causedBy, Guid causedByGuid, string correlationId) Parameters Type Name System.String partition System.String resultBody CheckpointTag causedBy Guid causedByGuid System.String correlationId EnsureTickPending() Declaration protected void EnsureTickPending() EnsureUnsubscribed() Declaration public void EnsureUnsubscribed() FinalizeEventProcessing(EventProcessedResult, CheckpointTag, Single) Declaration public void FinalizeEventProcessing(EventProcessedResult result, CheckpointTag eventCheckpointTag, float progress) Parameters Type Name EventProcessedResult result CheckpointTag eventCheckpointTag System.Single progress GetBufferedEventCount() Declaration public int GetBufferedEventCount() Returns Type Description System.Int32 GetStatistics(ProjectionStatistics) Declaration public virtual void GetStatistics(ProjectionStatistics info) Parameters Type Name ProjectionStatistics info GetStatus() Declaration public string GetStatus() Returns Type Description System.String GetSubscriptionOptions() Declaration public ReaderSubscriptionOptions GetSubscriptionOptions() Returns Type Description ReaderSubscriptionOptions Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded) Declaration public void Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded message) Parameters Type Name CoreProjectionProcessingMessage.PrerecordedEventsLoaded message Handle(CoreProjectionManagementMessage.GetResult) Declaration public void Handle(CoreProjectionManagementMessage.GetResult message) Parameters Type Name CoreProjectionManagementMessage.GetResult message Handle(CoreProjectionManagementMessage.GetState) Declaration public void Handle(CoreProjectionManagementMessage.GetState message) Parameters Type Name CoreProjectionManagementMessage.GetState message Handle(EventReaderSubscriptionMessage.CheckpointSuggested) Declaration public void Handle(EventReaderSubscriptionMessage.CheckpointSuggested message) Parameters Type Name EventReaderSubscriptionMessage.CheckpointSuggested message Handle(EventReaderSubscriptionMessage.EofReached) Declaration public void Handle(EventReaderSubscriptionMessage.EofReached message) Parameters Type Name EventReaderSubscriptionMessage.EofReached message Handle(EventReaderSubscriptionMessage.Failed) Declaration public void Handle(EventReaderSubscriptionMessage.Failed message) Parameters Type Name EventReaderSubscriptionMessage.Failed message Handle(EventReaderSubscriptionMessage.NotAuthorized) Declaration public void Handle(EventReaderSubscriptionMessage.NotAuthorized message) Parameters Type Name EventReaderSubscriptionMessage.NotAuthorized message Handle(EventReaderSubscriptionMessage.ProgressChanged) Declaration public void Handle(EventReaderSubscriptionMessage.ProgressChanged message) Parameters Type Name EventReaderSubscriptionMessage.ProgressChanged message Handle(EventReaderSubscriptionMessage.ReaderAssignedReader) Declaration public void Handle(EventReaderSubscriptionMessage.ReaderAssignedReader message) Parameters Type Name EventReaderSubscriptionMessage.ReaderAssignedReader message Handle(EventReaderSubscriptionMessage.SubscriptionStarted) Declaration public void Handle(EventReaderSubscriptionMessage.SubscriptionStarted message) Parameters Type Name EventReaderSubscriptionMessage.SubscriptionStarted message InitializeFromCheckpoint(CheckpointTag) Declaration public void InitializeFromCheckpoint(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag InternalCommittedEventProcessed(String, EventReaderSubscriptionMessage.CommittedEventReceived, EmittedEventEnvelope[], PartitionState, PartitionState) Declaration protected EventProcessedResult InternalCommittedEventProcessed(string partition, EventReaderSubscriptionMessage.CommittedEventReceived message, EmittedEventEnvelope[] emittedEvents, PartitionState newPartitionState, PartitionState newSharedPartitionState) Parameters Type Name System.String partition EventReaderSubscriptionMessage.CommittedEventReceived message EmittedEventEnvelope [] emittedEvents PartitionState newPartitionState PartitionState newSharedPartitionState Returns Type Description EventProcessedResult InternalPartitionDeletedProcessed(String, CheckpointTag, PartitionState) Declaration protected EventProcessedResult InternalPartitionDeletedProcessed(string partition, CheckpointTag deletePosition, PartitionState newPartitionState) Parameters Type Name System.String partition CheckpointTag deletePosition PartitionState newPartitionState Returns Type Description EventProcessedResult IsOutOfOrderSubscriptionMessage(EventReaderSubscriptionMessageBase) Declaration protected bool IsOutOfOrderSubscriptionMessage(EventReaderSubscriptionMessageBase message) Parameters Type Name EventReaderSubscriptionMessageBase message Returns Type Description System.Boolean MakeZeroCheckpointTag() Declaration public CheckpointTag MakeZeroCheckpointTag() Returns Type Description CheckpointTag NewCheckpointStarted(CheckpointTag) Declaration public abstract void NewCheckpointStarted(CheckpointTag at) Parameters Type Name CheckpointTag at ProcessEvent() Declaration public void ProcessEvent() RecordEventOrder(ResolvedEvent, CheckpointTag, Action) Declaration public void RecordEventOrder(ResolvedEvent resolvedEvent, CheckpointTag orderCheckpointTag, Action completed) Parameters Type Name ResolvedEvent resolvedEvent CheckpointTag orderCheckpointTag Action completed RegisterSubscriptionMessage(EventReaderSubscriptionMessageBase) Declaration protected void RegisterSubscriptionMessage(EventReaderSubscriptionMessageBase message) Parameters Type Name EventReaderSubscriptionMessageBase message SetCurrentCheckpointSuggestedWorkItem(CheckpointSuggestedWorkItem) Declaration public void SetCurrentCheckpointSuggestedWorkItem(CheckpointSuggestedWorkItem checkpointSuggestedWorkItem) Parameters Type Name CheckpointSuggestedWorkItem checkpointSuggestedWorkItem SetFaulting(String, Exception) Declaration protected void SetFaulting(string faultedReason, Exception ex = null) Parameters Type Name System.String faultedReason Exception ex SetProjectionState(PhaseState) Declaration public void SetProjectionState(PhaseState state) Parameters Type Name PhaseState state Subscribe(CheckpointTag, Boolean) Declaration public virtual void Subscribe(CheckpointTag from, bool fromCheckpoint) Parameters Type Name CheckpointTag from System.Boolean fromCheckpoint Subscribed(Guid) Declaration public void Subscribed(Guid subscriptionId) Parameters Type Name Guid subscriptionId SubscribeReaders(CheckpointTag) Declaration protected void SubscribeReaders(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag SubscribeToPreRecordedOrderEvents() Declaration public void SubscribeToPreRecordedOrderEvents() UnlockAndForgetBefore(CheckpointTag) Declaration public void UnlockAndForgetBefore(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag Unsubscribed() Declaration public void Unsubscribed() UnsubscribeFromPreRecordedOrderEvents() Declaration protected void UnsubscribeFromPreRecordedOrderEvents() ValidateEmittedEvents(EmittedEventEnvelope[]) Declaration protected bool ValidateEmittedEvents(EmittedEventEnvelope[] emittedEvents) Parameters Type Name EmittedEventEnvelope [] emittedEvents Returns Type Description System.Boolean Implements IProjectionPhaseCompleter IProjectionPhaseCheckpointManager EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> IProjectionProcessingPhase IDisposable EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> IProjectionPhaseStateManager"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ResultEventEmitter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ResultEventEmitter.html",
    "title": "Class ResultEventEmitter | Event Store",
    "keywords": "Class ResultEventEmitter Inheritance System.Object ResultEventEmitter Implements IResultEventEmitter Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class ResultEventEmitter : object, IResultEventEmitter Constructors ResultEventEmitter(ProjectionNamesBuilder) Declaration public ResultEventEmitter(ProjectionNamesBuilder namesBuilder) Parameters Type Name ProjectionNamesBuilder namesBuilder Methods ResultUpdated(String, String, CheckpointTag) Declaration public EmittedEventEnvelope[] ResultUpdated(string partition, string result, CheckpointTag at) Parameters Type Name System.String partition System.String result CheckpointTag at Returns Type Description EmittedEventEnvelope [] Implements IResultEventEmitter"
  },
  "http-api/swagger/Get projection config.html": {
    "href": "http-api/swagger/Get projection config.html",
    "title": "Get projection config | Event Store",
    "keywords": "Get projection config Returns the performance configuration of the specified projection. Request GET /projection/{name}/config Parameters Name Type Value Notes *name string The name of the projection Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Update projection config.html": {
    "href": "http-api/swagger/Update projection config.html",
    "title": "Update projection config | Event Store",
    "keywords": "Update projection config Update the performance configuration of the specified projection. Request PUT /projection/{name}/config Parameters Name Type Value Notes *name string The name of the projection Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Get a projection.html": {
    "href": "http-api/swagger/Get a projection.html",
    "title": "Get a projection | Event Store",
    "keywords": "Get a projection Returns a specific projection. Request GET /projection/{name} Parameters Name Type Value Notes *name string The name of the projection Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Delete a projection.html": {
    "href": "http-api/swagger/Delete a projection.html",
    "title": "Delete a projection | Event Store",
    "keywords": "Delete a projection Deletes a projection Request DELETE /projection/{name}[?deleteStateStream&deleteCheckpointStream&deleteEmittedStreams] Parameters Name Type Value Notes *name string The projection to delete deleteStateStream boolean TBD deleteCheckpointStream boolean TBD deleteEmittedStreams boolean TBD Responses Status Code Description Samples 204 Projection deleted"
  },
  "http-api/swagger/Get all stats.html": {
    "href": "http-api/swagger/Get all stats.html",
    "title": "Get all stats | Event Store",
    "keywords": "Get all stats Returns all stats enabled for Event Store. Request GET /stats Responses Status Code Description Samples 200 A list of stats Name Type Notes proc object Name Type Notes startTime string Time the associated process started id integer Id of the associated process mem integer Virtual memory used by the associated process cpu number CPU usage of the process cpuScaled number CPU usage of the process scaled by logical processor count threadsCount integer Number of threads used by process contentionsRate number The rate at which threads in the process attempt to acquire a managed lock unsuccessfully thrownExceptionsRate number Number of exceptions thrown per second gc object Stats on garbage collection diskIo object Disk input and output stats tcp object TCP connection stats Stats on the currently active process sys object Name Type Notes cpu number Total CPU usage in percentage freeMem number Free memory in bytes drive object Drive usage stats System usage stats es object Name Type Notes checksum number checksumNonFlushed number queue object Multiple queue instance stats writer object Storage writing stats readIndex object 404 Not found"
  },
  "http-api/swagger/Get specified stat.html": {
    "href": "http-api/swagger/Get specified stat.html",
    "title": "Get specified stat | Event Store",
    "keywords": "Get specified stat Returns the sub path of the Event Store statistics available. Request GET /stats/{statPath} Parameters Name Type Value Notes *statPath string The stats sub path Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Return Gossip details.html": {
    "href": "http-api/swagger/Return Gossip details.html",
    "title": "Return Gossip details | Event Store",
    "keywords": "Return Gossip details Return Gossip details for nodes in cluster. Request GET /gossip Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "http-api/swagger/Update Gossip details.html": {
    "href": "http-api/swagger/Update Gossip details.html",
    "title": "Update Gossip details | Event Store",
    "keywords": "Update Gossip details Update Gossip details for nodes in a cluster. Request POST /gossip Responses Status Code Description Samples 200 OK 404 Not found"
  },
  "server/uninstalling/index.html": {
    "href": "server/uninstalling/index.html",
    "title": "Uninstalling Event Store | Event Store",
    "keywords": "Uninstalling Event Store This document describes how to uninstall Event Store. The instructions depend on which installation method you used. For different installation methods, refer to Getting started - Step 1 . These instructions cover how to uninstall Event Store, but not how to remove dependencies such as the .NET framework or Mono. Windows Linux macOS Chocolatey If you installed Event Store with Chocolatey, you can uninstall with: choco uninstall eventstore-oss This removes the eventstore-oss Chocolatey package. Binary or built from source If you installed Event Store by downloading a binary , you can remove it by: Deleting the EventStore-OSS-Win-* directory. Removing the directory from your PATH. Pre-built packages If you installed one of the pre-built packages for Debian based systems , you can remove it with: sudo apt-get purge eventstore-oss This removes Event Store completely, including any user settings. Binary or built from source If you built Event Store from source, remove it by deleting the directory containing the source and build, and manually removing any environment variables. <!--NOTE: the following needs to be tested. I am basing it off some googling --> If you installed Event Store using Homebrew, you can remove it with one of the following: brew cask uninstall eventstore Binary or built from source If you built Event Store from source, remove it by deleting the directory containing the source and build, and manually removing any environment variables."
  },
  "getting-started/projections/index.html": {
    "href": "getting-started/projections/index.html",
    "title": "Step 3 - Projections | Event Store",
    "keywords": "Step 3 - Projections This getting started guide shows you how to get started with Event Store using the Atom publishing protocol as the primary interface. Note The described is for development and evaluation of Event Store. It does not describe a production setup. The HTTP examples use cURL, but you can read Atom feeds with a wide variety of applications and languages. Projections is an Event Store subsystem that lets you write new events or link existing events to streams in a reactive manner. Projections are good at solving one specific query type, a category known as 'temporal correlation queries'. This query type is common in business systems and few can execute these queries well. Note Projections require the event body to be in JSON. When running a projection, you can choose whether the query should run and give you all results present or whether the query should continue running into the future finding new results as they happen and updating its result set. Setting up projections You enable projections with the command line argument --run-projections . For example, the command below enables all projection modes (system and user-defined): Tip Read this guide for all the possible parameter values. Windows Linux Docker macOS EventStore.ClusterNode.exe --run-projections=all --start-standard-projections=true To disable them again, run: EventStore.ClusterNode.exe --run-projections=none Add EVENTSTORE_RUN_PROJECTIONS=All and EVENTSTORE_START_STANDARD_PROJECTIONS=true to your environment variables, or the /etc/eventstore/eventstore.conf configuration file and start Event Store: sudo systemctl start eventstore To disable them again, change the values to EVENTSTORE_RUN_PROJECTIONS=none . The Event Store Docker image has projections enabled by default, but you need to enable standard projections: docker run --name eventstore-node -it -p 2113:2113 -p 1113:1113 -e EVENTSTORE_RUN_PROJECTIONS=All -e EVENTSTORE_START_STANDARD_PROJECTIONS=true eventstore/eventstore To disable them again: docker run --name eventstore-node -it -p 2113:2113 -p 1113:1113 -e EVENTSTORE_RUN_PROJECTIONS=None eventstore/eventstore eventstore --run-projections=all --start-standard-projections=true To disable them again, run: eventstore --run-projections=none Note To use the default database location on macOS you need to use sudo , or you can change the location with the --db parameter. You then see new tabs enabled in the Admin UI with the four system projections in a Stopped state: You can also query the state of all projections using the HTTP API. Request Response curl -i http://localhost:2113/projections/any -H \"accept:application/json\" | grep -E 'effectiveName|status' The response is a list of all known projections and useful information about them. \"effectiveName\": \"$streams\" \"status\": \"Stopped\" \"statusUrl\": \"http://localhost:2113/projection/$streams\" \"effectiveName\": \"$stream_by_category\" \"status\": \"Stopped\" \"statusUrl\": \"http://localhost:2113/projection/$stream_by_category\" \"effectiveName\": \"$by_category\" \"status\": \"Stopped\" \"statusUrl\": \"http://localhost:2113/projection/$by_category\" \"effectiveName\": \"$by_event_type\" \"status\": \"Stopped\" \"statusUrl\": \"http://localhost:2113/projection/$by_event_type\" Add sample data Download the following files that contain sample data used throughout this step of the getting started guide. shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1164.json shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1165.json shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1166.json shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1167.json Add the sample data to four different streams: HTTP API .NET API JVM client curl -i -d \"@shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1164.json\" -u \"admin:changeit\" \"http://127.0.0.1:2113/streams/shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1164\" -H \"Content-Type:application/vnd.eventstore.events+json\" curl -i -d \"@shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1165.json\" -u \"admin:changeit\" \"http://127.0.0.1:2113/streams/shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1165\" -H \"Content-Type:application/vnd.eventstore.events+json\" curl -i -d \"@shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1166.json\" -u \"admin:changeit\" \"http://127.0.0.1:2113/streams/shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1166\" -H \"Content-Type:application/vnd.eventstore.events+json\" curl -i -d \"@shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1167.json\" -u \"admin:changeit\" \"http://127.0.0.1:2113/streams/shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1167\" -H \"Content-Type:application/vnd.eventstore.events+json\" var adminCredentials = Globals.AdminCredentials; var projection = Globals.Projection; var streamName = Path.GetFileNameWithoutExtension(f); var step3EventData = ProcessEvents(f); final Collection fileList = getAllFilesThatMatchFilenameExtension(\"/Users/chrisward/Workspace/EventStore/docs.geteventstore.com/code-examples/getting-started\", \"shoppingCart-*\"); for (Object file : fileList) { String streamName = FilenameUtils.getBaseName(removeExtension(file.toString())); System.out.println(\"value= \" + streamName); JSONParser parser = new JSONParser(); try { JSONArray events = (JSONArray) parser.parse(new FileReader(file.toString())); for (Object e : events) { JSONObject event = (JSONObject) e; final EventData json = new EventDataBuilder(\"json\") .eventId(UUID.fromString((String) event.get(\"eventId\"))) .jsonData((event.get(\"data\")).toString()) .jsonMetadata(event.get(\"metadata\").toString()) .build(); final WriteEvents writeEvents = new WriteEventsBuilder(\"newstream\") .addEvent(json) .expectAnyVersion() .build(); connection.tell(writeEvents, writeResult); } } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } catch (ParseException e) { e.printStackTrace(); } } } public static class WriteResult extends UntypedActor { final LoggingAdapter log = Logging.getLogger(getContext().system(), this); public void onReceive(Object message) throws Exception { if (message instanceof WriteEventsCompleted) { final WriteEventsCompleted completed = (WriteEventsCompleted) message; log.info(\"range: {}, position: {}\", completed.numbersRange(), completed.position()); } else if (message instanceof Status.Failure) { final Status.Failure failure = ((Status.Failure) message); final EsException exception = (EsException) failure.cause(); log.error(exception, exception.toString()); } else unhandled(message); // context().system().shutdown(); } } static Collection getAllFilesThatMatchFilenameExtension(String directoryName, String extension) { File directory = new File(directoryName); return FileUtils.listFiles(directory, new WildcardFileFilter(extension), null); } } Note While it's not the fastest method, you can also use the Admin UI for creating the streams, and all the tasks in this step, as we saw in step 1 . Writing your first projection Tip Read this guide to find out more about the user defined projection's API. The projection counts the number of 'XBox One S's that customers added to their shopping carts. A projection starts with a selector, in this case fromAll() . Another possibility is fromCategory({category}) which this step discusses later, but for now, fromAll should do. The second part of a projection is a set of filters. There is a special filter called $init that sets up an initial state. You want to start a counter from 0 and each time Event Store observes an ItemAdded event for an 'Xbox One S,' increment the counter. Here is the projection, you can download it as a file here : fromAll() .when({ $init: function(){ return { count: 0 } }, ItemAdded: function(s,e){ if(e.body.Description.indexOf(\"Xbox One S\") >= 0){ s.count += 1; } } }) You create a projection by calling the projection API and providing it with the definition of the projection. Here you decide how to run the projection, declaring that you want the projection to start from the beginning and keep running. You can create a projection using the Admin UI by opening the Projections tab, clicking the New Projection button and filling in the details of your projection. To use the HTTP or .NET API, pass the projection JSON file as a parameter of your request, along with any other settings: HTTP API .NET API curl -i --data-binary \"@xbox-one-s-counter.json\" http://localhost:2113/projections/continuous?name=xbox-one-s-counter%26type=js%26enabled=true%26emit=true%26trackemittedstreams=true -u admin:changeit Next Steps Read here for more information on creating projections with the HTTP API and the parameters available, or our projections section for details on projection syntax. public static readonly ProjectionsManager Projection = new ProjectionsManager(new ConsoleLogger(), new IPEndPoint(IPAddress.Parse(\"127.0.0.1\"), 2113), TimeSpan.FromMilliseconds(5000)); } Next Steps Read here for more information on creating projections with the .NET API and the parameters available, or our projections section for details on projection syntax. Querying for the state of the projection Now the projection is running, you can query the state of the projection. As this projection has a single state, query it with the following request: HTTP API .NET API Response curl -i http://localhost:2113/projection/xbox-one-s-counter/state \"; projection.CreateContinuousAsync(\"xbox-one-s-counter\", countItemsProjection, adminCredentials).Wait(); { \"count\": 3 } Writing to streams from projections The above gives you the correct result but requires you to poll for the state of a projection. What if you wanted Event Store to notify you about state updates via subscriptions? Output state Update the projection to output the state to a stream by calling the outputState() method on the projection which by default produces a $projections-{projection-name}-result stream. Below is the updated projection, you can download it as a file here : fromAll() .when({ $init: function(){ return { count: 0 } }, ItemAdded: function(s,e){ if(e.body.Description.indexOf(\"Xbox One S\") >= 0){ s.count += 1; } } }).outputState() To update the projection, edit the projection definition in the Admin UI, or issue the following request: HTTP API .NET API curl -i -X PUT --data-binary @\"xbox-one-s-counter-outputState.json\" http://localhost:2113/projection/xbox-one-s-counter/query?emit=yes -u admin:changeit } Then reset the projection you created above: HTTP API .NET API Response curl -i -X POST \"http://localhost:2113/projection/xbox-one-s-counter/command/reset\" -H \"accept:application/json\" -H \"Content-Length:0\" -u admin:changeit }).outputState()\"; { \"msgTypeId\": 293, \"name\": \"xbox-one-s-counter\" } You can now read the events in the result stream by issuing a read request. HTTP API .NET API Response curl -i \"http://localhost:2113/streams/\\$projections-xbox-one-s-counter-result?embed=body\" -H \"accept:application/json\" -u admin:changeit | grep data projection.UpdateQueryAsync(\"xbox-one-s-counter\", countItemsProjectionUpdate, adminCredentials).Wait(); projection.ResetAsync(\"xbox-one-s-counter\", adminCredentials).Wait(); var readEvents = conn.ReadStreamEventsForwardAsync(\"$projections-xbox-one-s-counter-result\", 0, 10, true) \"data\": \"{\\\"count\\\":3}\", \"data\": \"{\\\"count\\\":2}\", \"data\": \"{\\\"count\\\":1}\", Configure projection properties You can configure properties of the projection by updating values of the options object. For example, the following projection changes the name of the results stream, you can download it as a file here : options({ resultStreamName: \"xboxes\" }) fromAll() .when({ $init: function(){ return { count: 0 } }, ItemAdded: function(s,e){ if(e.body.Description.indexOf(\"Xbox One S\") >= 0){ s.count += 1; } } }).outputState() Then send the update to the projection: HTTP API .NET API curl -i -X PUT -d \"@update-projection-options.json\" http://localhost:2113/projection/xbox-one-s-counter/query?emit=yes -u admin:changeit } Tip You can find all the options available in the user defined projections guide . Now you can read the result as above, but use the new stream name: HTTP API .NET API curl -i \"http://localhost:2113/streams/xboxes?embed=body\" -H \"accept:application/json\" -u admin:changeit | grep data projection.UpdateQueryAsync(\"xbox-one-s-counter\", optionsProjectionOptionsUpdate, adminCredentials).Wait(); readEvents = conn.ReadStreamEventsForwardAsync(\"xboxes\", 0, 10, true).Result; The number of items per shopping cart The example in this step so far relied on a global state for the projection, but what if you wanted a count of the number of items in the shopping cart per shopping cart. Event Store has a built-in $by_category projection that lets you select events from a particular list of streams. Enable this projection with the following command. HTTP API .NET API curl -i -d{} http://localhost:2113/projection/%24by_category/command/enable -u admin:changeit var projection = Globals.Projection; The projection links events from existing streams to new streams by splitting the stream name by a separator. You can configure the projection to specify the position of where to split the stream id and provide a separator. By default, the category splits the stream id by a dash. The category is the first string. Stream Name Category shoppingCart-54 shoppingCart shoppingCart-v1-54 shoppingCart shoppingCart No category as there is no separator You want to define a projection that produces a count per stream for a category, but the state needs to be per stream. To do so, use $by_category and its fromCategory API method. Below is the projection, you can download the file here : fromCategory('shoppingCart') .foreachStream() .when({ $init: function(){ return { count: 0 } }, ItemAdded: function(s,e){ s.count += 1; } }) Create the projection with the following request: HTTP API .NET API curl -i --data-binary \"@shopping-cart-counter.json\" http://localhost:2113/projections/continuous?name=shopping-cart-item-counter%26type=js%26enabled=true%26emit=true%26trackemittedstreams=true -u admin:changeit }) Querying for the state of the projection by partition Querying for the state of the projection is different due to the partitioning of the projection. You have to specify the partition and the name of the stream. HTTP API .NET API Response curl -i http://localhost:2113/projection/shopping-cart-item-counter/state?partition=shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1164 projection.CreateContinuousAsync(\"shopping-cart-item-counter\", itemCounterProjection, true, adminCredentials).Wait(); { \"count\": 2 } Next step In this third part of our getting started guide you learned about projections. The next, and final part covers which API or SDK to use, and when. Step 4 - Which API or SDK"
  },
  "getting-started/reading-subscribing-events/index.html": {
    "href": "getting-started/reading-subscribing-events/index.html",
    "title": "Step 2 - Read events from a stream and subscribe to changes | Event Store",
    "keywords": "Step 2 - Read events from a stream and subscribe to changes This getting started guide shows you how to get started with Event Store using the Atom publishing protocol as the primary interface. Note The described is for development and evaluation of Event Store. It does not describe a production setup. The HTTP examples use cURL, but you can read Atom feeds with a wide variety of applications and languages. This second step covers reading events from a stream and subscribing to changes to events in a stream. Read a stream of events Event Store exposes all streams as atom feeds , and you can read data from the stream by navigating to the head URI of the stream http://127.0.0.1:2113/streams/<STREAM_ID > with cURL, or click the Stream Browser tab in the Admin UI and you see the stream you created in step 1. Request Response curl -i -H \"Accept:application/vnd.eventstore.atom+json\" \"http://127.0.0.1:2113/streams/newstream\" Note This returns the feed in JSON format, you can also use Accept:application/atom+xml if you prefer XML. HTTP/1.1 200 OK Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Cache-Control: max-age=0, no-cache, must-revalidate Vary: Accept ETag: \"0;-2060438500\" Content-Type: application/vnd.eventstore.atom+json; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Fri, 15 Dec 2017 12:23:23 GMT Content-Length: 1262 Keep-Alive: timeout=15,max=100 { \"title\": \"Event stream 'newstream'\", \"id\": \"http://127.0.0.1:2113/streams/newstream\", \"updated\": \"2017-12-15T12:19:32.021776Z\", \"streamId\": \"newstream\", \"author\": { \"name\": \"EventStore\" }, \"headOfStream\": true, \"selfUrl\": \"http://127.0.0.1:2113/streams/newstream\", \"eTag\": \"0;-2060438500\", \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/newstream\", \"relation\": \"self\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/head/backward/20\", \"relation\": \"first\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/1/forward/20\", \"relation\": \"previous\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/metadata\", \"relation\": \"metadata\" } ], \"entries\": [ { \"title\": \"0@newstream\", \"id\": \"http://127.0.0.1:2113/streams/newstream/0\", \"updated\": \"2017-12-15T12:19:32.021776Z\", \"author\": { \"name\": \"EventStore\" }, \"summary\": \"event-type\", \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/newstream/0\", \"relation\": \"edit\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/0\", \"relation\": \"alternate\" } ] } ] } .NET Client API JVM client To use the .NET API, use the following method passing the stream name, the start point in the stream, the number of events to read and whether to follow links to the event data: var conn = CreateConnection(); var streamName = Globals.streamName; Next Steps Read this guide for more information on how to read events with the .NET API. To use the JVM client, use the following method passing the stream name, the start point in the stream, and whether to follow links to the event data: final ActorRef readResult = system.actorOf(Props.create(ReadResult.class)); final ReadEvent readEvent = new ReadEventBuilder(\"my-stream\") .resolveLinkTos(false) .requireMaster(true) .build(); connection.tell(readEvent, readResult); Read a single event The feed has a single item inside of it, the one you posted in part 1 . You can see details of the event in the Stream Browser tab in the Admin UI by selecting a stream to see its events, and then selecting an event. Or with cURL, issue a GET to the alternate URI value from the response above. Request Response curl -i http://127.0.0.1:2113/streams/newstream/0 -H \"Accept: application/json\" Note You can also use Accept: text/xml if you prefer XML. HTTP/1.1 200 OK Access-Control-Allow-Methods: GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER Access-Control-Allow-Origin: * Cache-Control: max-age=31536000, public Vary: Accept Content-Type: application/json; charset: utf-8 Server: Mono-HTTPAPI/1.0 Date: Wed, 03 Jul 2013 11:09:12 GMT Content-Length: 14 Keep-Alive: timeout=15,max=100 { \"a\": \"1\" } .NET client API JVM client To use the .NET API, use the following method passing the stream name, the event you want to read and wether to return the event data: foreach (var evt in readEvents.Events) Console.WriteLine(Encoding.UTF8.GetString(evt.Event.Data)); To use the Java client, use the following method passing the stream name, the event you want to read and if you want to also return the event data: final ActorRef readResult = system.actorOf(Props.create(ReadResult.class)); final ReadEvent readEvent = new ReadEventBuilder(\"my-stream\") .first() .resolveLinkTos(false) .requireMaster(true) .build(); connection.tell(readEvent, readResult); Paginating through events For longer feeds of events than this example, you need to paginate through the feed, reading a certain number of events at a time. You can use the HTTP API to paginate through the feed using previous and next links within the stream. Or you can use a read method of the .NET API (and JVM client), to loop through events a certain number at a time. Subscribing to receive stream updates A common operation is to subscribe to a stream and receive notifications for changes. As new events arrive, you continue following them. You can create subscriptions and watch events as they arrive under the Persistent Subscriptions tab, or use an API method. Create subscription in the admin UI Click Persistent Subscriptions Enter a name for this subscription group (this can be any value you choose). Enter the name of the stream you want to subscribe to. Configure the other options. You can find more information about the options in the .NET API PersistentSubscriptionSettings object . Click Create to create the new subscription. Create a subscription programmatically HTTP API .NET API JVM client API curl -i -X PUT -d $'{\"startFrom\": 0,\"resolveLinktos\": false}' http://localhost:2113/subscriptions/newstream/examplegroup -u admin:changeit -H \"Content-Type: application/json\" var streamName = Globals.streamName; var adminCredentials = Globals.AdminCredentials; PersistentSubscriptionSettings settings = PersistentSubscriptionSettings.Create() .DoNotResolveLinkTos() .StartFromCurrent(); conn.CreatePersistentSubscriptionAsync(streamName, \"examplegroup\", settings, adminCredentials).Wait(); conn.ConnectToPersistentSubscription(streamName, \"examplegroup\", (_, x) => { var data = Encoding.ASCII.GetString(x.Event.Data); Console.WriteLine(\"Received: \" + x.Event.EventStreamId + \":\" + x.Event.EventNumber); Console.WriteLine(data); }, (sub, reason, ex) => { }, adminCredentials); Next Steps Find more details on the parameters used in the example above, read the API documentation for PersistentSubscriptionSettings , CreatePersistentSubscriptionAsync and ConnectToPersistentSubscription final Closeable closeable = connection.subscribeToAll(new SubscriptionObserver<IndexedEvent>() { @Override public void onLiveProcessingStart(Closeable subscription) { system.log().info(\"live processing started\"); } @Override public void onEvent(IndexedEvent event, Closeable subscription) { system.log().info(event.toString()); } @Override public void onError(Throwable e) { system.log().error(e.toString()); } @Override public void onClose() { system.log().error(\"subscription closed\"); } }, false, null); <!-- TODO: The dotnet example has reading events as they are added to subscription, HTTP does not, expand? --> <!-- TODO: And write more events, then what etc --> Subscription types There are three types of subscription patterns, useful in different situations Volatile subscriptions This subscription calls a given function for events written after establishing the subscription. They are useful when you need notification of new events with minimal latency, but where it's not necessary to process every event. <!-- TODO: Example needed? --> For example, if a stream has 100 events in it when a subscriber connects, the subscriber can expect to see event number 101 onwards until the time the subscription is closed or dropped. Catch-up subscriptions This subscription specifies a starting point, in the form of an event number or transaction file position. You call the function for events from the starting point until the end of the stream, and then for subsequently written events. <!-- TODO: Example needed? --> For example, if you specify a starting point of 50 when a stream has 100 events, the subscriber can expect to see events 51 through 100, and then any events are subsequently written until you drop or close the subscription. Persistent subscriptions Note Persistent subscriptions exist in version 3.2.0 and above of Event Store. This subscription supports the \" competing consumers \" messaging pattern and are useful when you need to distribute messages to many workers. Event Store saves the subscription state server-side and allows for at-least-once delivery guarantees across multiple consumers on the same stream. It is possible to have many groups of consumers compete on the same stream, with each group getting an at-least-once guarantee. <!-- TODO: Example needed? --> Next step In this second part of our getting started guide you learned how to read events from a stream and subscribe to changes. The next part covers projections, used to give you continuous queries of your data. Step 3 - Projections"
  },
  "getting-started/index.html": {
    "href": "getting-started/index.html",
    "title": "Step 1 - Install, run, and write your first event | Event Store",
    "keywords": "Step 1 - Install, run, and write your first event This getting started guide shows you how to get started with Event Store using the Atom publishing protocol as the primary interface. Note The described is for development and evaluation of Event Store. It does not describe a production setup. The HTTP examples use cURL, but you can read Atom feeds with a wide variety of applications and languages. This first step covers installation and running Event Store, and writing your first event. Install and run Event Store Note Unless you pass a database option with --db , Event Store writes to a new database created in the host system's temporary files path each time it is started. For more information on Command Line Arguments read this guide . Windows Linux Docker Kubernetes macOS The prerequisites for installing on Windows are: NET Framework 4.0+ Event Store has Chocolatey packages available that you can install with the following command in an elevated terminal: choco install eventstore-oss You can also download a binary, unzip the archive and run from the folder location with an administrator console. The following command starts Event Store with the database stored at the path ./db and the logs in ./logs . You can view further command line arguments in the server docs . EventStore.ClusterNode.exe --db ./db --log ./logs Event Store runs in an administration context because it starts an HTTP server through http.sys . For permanent or production instances you need to provide an ACL such as: netsh http add urlacl url=http://+:2113/ user=DOMAIN\\username For more information, refer to Microsoft's add urlacl documentation . To build Event Store from source, refer to the Event Store README . The prerequisites for installing on Linux are: We recommend Mono 5.16.0 , but other versions may also work. Event Store has pre-built packages available for Debian-based distributions , manual instructions for distributions that use RPM , or you can build from source . The final package name to install is eventstore-oss . If you installed from a pre-built package, start Event Store with: sudo systemctl start eventstore When you install the Event Store package, the service doesn't start by default. This is to allow you to change the configuration, located at /etc/eventstore/eventstore.conf and to prevent creating a default database. Tip To start Event Store on port 80 as a service, refer to Configuring your installation Tip We recommend that when using Linux you set the 'open file limit' to a high number. The precise value depends on your use case, but at least between 30,000 and 60,000 . Event Store has a Docker image available for any platform that supports Docker. Pull the Docker image: docker pull eventstore/eventstore Run the container: docker run --name eventstore-node -it -p 2113:2113 -p 1113:1113 eventstore/eventstore Refer to the image overview for more information. Event Store has a Helm chart available for installing Event Store on Kubernetes clusters: helm repo add eventstore https://eventstore.github.io/EventStore.Charts helm repo update helm install -n eventstore eventstore/eventstore Note Read this guide for more details on how to use the helm chart. Read this guide for more details on using Kubernetes with AKS and this guide for more details on using Kubernetes with GKE. Event Store has a macOS package you can download and install, and we maintain a Homebrew Cask formula you can install: brew cask install eventstore In each case you can run Event Store with the eventstore command, and stop it with Ctrl+c . To use the default database location you need to use sudo , or you can change the location with the --db parameter. To build Event Store from source, refer to the Event Store README . Interacting with an Event Store server There are three ways to interact with Event Store: With the Admin UI . With the HTTP API . With a Client API, which you need to install first. Our documentation covers the .NET Core client API and the JVM client but others are available. .NET client JVM client Install the .NET client API using your preferred method. Add it to your project: dotnet add package EventStore.Client And require it in your code: using EventStore.ClientAPI; Add the JVM client using Maven: <dependency> <groupId>com.geteventstore</groupId> <artifactId>eventstore-client_2.12</artifactId> <version>7.0.2</version> </dependency> And import it in your code. <!-- TODO: Add more detail --> Connecting to Event Store If you want to use the Admin UI or the HTTP API, then you use port 2113 . For example, http://127.0.0.1:2113/ in your web browser, or curl -i http://127.0.0.1:2113 for the HTTP API. Tip The default username and password is admin:changeit To use a client API, you use port 1113 and create a connection: .NET client JVM client When using the .NET client, you also need to give the connection a name. var conn = EventStoreConnection.Create(new Uri(\"tcp://admin:changeit@localhost:1113\"), \"InputFromFileConsoleApp\"); Next Steps In this example we used the EventStoreConnection.Create() overloaded method but others are available . final ActorSystem system = ActorSystem.create(); final ActorRef connection = system.actorOf(ConnectionActor.getProps()); Note For our JVM examples we use akka , a toolkit for building highly concurrent and distributed JVM applications. Writing events to an Event Stream Event Store operates on a concept of Event Streams, and the first operation we look at is how to write to a stream. If you are Event Sourcing a domain model, a stream equates to an aggregate function. Event Store can handle hundreds of millions of streams, so create as many as you need. If you post to a stream that doesn't exist, Event Store creates it before adding the events. Writing events using the admin UI You can write events using the Admin UI by clicking the Stream Browser tab, the Add Event button, filling in the form with relevant values and clicking the Add button at the bottom of the page. Open a text editor, copy and paste the following event definition, and save it as event.json . [ { \"eventId\": \"fbf4a1a1-b4a3-4dfe-a01f-ec52c34e16e4\", \"eventType\": \"event-type\", \"data\": { \"a\": \"1\" } } ] Writing events programmatically HTTP API .NET API JVM client Use the following cURL command, passing the name of the stream and the events to write: curl -i -d \"@event.json\" \"http://127.0.0.1:2113/streams/newstream\" -H \"Content-Type:application/vnd.eventstore.events+json\" Next Steps Read this guide for more information on how to write events with the HTTP API. Note You can also post events to the HTTP API as XML, by changing the Content-Type header to XML . To use the .NET API, use the following method, passing the name of the stream, the version, and the events to write: var step1EventData = ProcessEvents(Globals.filePath); var eventData = step1EventData.ToArray(); conn.AppendToStreamAsync(streamName, ExpectedVersion.Any, eventData).Wait(); Console.WriteLine($\"Published {step1EventData.Count} events to '{Globals.streamName}'\"); Next Steps Read this guide for more information on how to write events with the .NET API. We don't cover version checking in this guide, but you can read more in the optimistic concurrency guide . To use the JVM Client, use the following method, passing the name of the stream, the version, and the events to write. You also need an Akka AbstractActor to return the response from Event Store: final EventData event = new EventDataBuilder(\"my-event\").eventId(UUID.randomUUID()).data(\"my event data\") .metadata(\"my first event\").build(); final WriteEvents writeEvents = new WriteEventsBuilder(\"my-stream\").addEvent(event).expectAnyVersion().build(); connection.tell(writeEvents, writeResult); } public static class WriteResult extends AbstractActor { final LoggingAdapter log = Logging.getLogger(getContext().system(), this); @Override public Receive createReceive() { return receiveBuilder().match(WriteEventsCompleted.class, m -> { log.info(\"range: {}, position: {}\", m.numbersRange(), m.position()); context().system().terminate(); }).match(Status.Failure.class, f -> { final EsException exception = (EsException) f.cause(); log.error(exception, exception.toString()); }).build(); } } Next step In this first part of our getting started guide you learned how to install and run Event Store and write your first event. The next part covers reading events from a stream. Step 2 - Read events from a stream and subscribe to changes"
  },
  "http-api/optional-http-headers/trusted-intermediary/index.html": {
    "href": "http-api/optional-http-headers/trusted-intermediary/index.html",
    "title": "Optional HTTP Headers: Trusted Intermediary | Event Store",
    "keywords": "Optional HTTP Headers: Trusted Intermediary The trusted intermediary header helps Event Store support a common security architecture. There are thousands of possible methods for handling authentication and it is impossible for us to support them all. The header allows you to configure a trusted intermediary to handle the authentication instead of Event Store. A sample configuration is to enable OAuth2 with the following steps: Configure Event Store to run on the local loopback. Configure nginx to handle OAuth2 authentication. After authenticating the user, nginx rewrites the request and forwards it to the loopback to the Event Store that serves the request. The header has the form of {user}; group, group1 and the Event Store ACLs use the information to handle security. ES-TrustedAuth: \"root; admin, other\" Note This feature is DISABLED by default. You must specifically opt into this feature by running Event Store with the Enable Trusted Intermediary configuration or command line option ."
  },
  "dotnet-api/reading-events/index.html": {
    "href": "dotnet-api/reading-events/index.html",
    "title": "Reading events | Event Store",
    "keywords": "Reading events You can use the client API to read events from a stream starting from either end of the stream. There is a method for each direction and one for reading a single event. Methods <!-- TODO: Do the same apply here as in HTTP API --> Read a single event Task<EventReadResult> ReadEventAsync(string stream, long eventNumber, bool resolveLinkTos); Read a specific stream forwards Task<StreamEventsSlice> ReadStreamEventsForwardAsync(string stream, long start, int count, bool resolveLinkTos) Read a specific stream backwards Task<StreamEventsSlice> ReadStreamEventsBackwardAsync(string stream, long start, int count, bool resolveLinkTos) Read all events forwards Task<AllEventsSlice> ReadAllEventsForwardAsync(Position position, int maxCount, bool resolveLinkTos); Read all events backwards Task<AllEventsSlice> ReadAllEventsBackwardAsync(Position position, int maxCount, bool resolveLinkTos); Note These methods also have an optional parameter which allows you to specify the UserCredentials to use for the request. If you don't supply any, the default credentials for the EventStoreConnection are used ( see Connecting to a server - user credentials ). StreamEventsSlice The reading methods for individual streams each return a StreamEventsSlice , which is immutable. The available members on StreamEventsSlice are: Member Description string Stream The name of the stream for the slice ReadDirection ReadDirection Either ReadDirection.Forward or ReadDirection.Backward depending on which method was used to read long FromEventNumber The sequence number of the first event in the stream long LastEventNumber The sequence number of the last event in the stream long NextEventNumber The sequence number from which the next read should be performed to continue reading the stream bool IsEndOfStream Whether this slice contained the end of the stream at the time it was created ResolvedEvent[] Events An array of the events read. See the description of how to interpret a Resolved Events below for more information on this ResolvedEvent When you read events from a stream (or received over a subscription) you receive an instance of the RecordedEvent class packaged inside a ResolvedEvent . Event Store supports a special event type called 'Link Events'. Think of these events as pointers to an event in another stream. In situations where the event you read is a link event, ResolvedEvent allows you to access both the link event itself, as well as the event it points to. The members of this class are as follows: Member Description RecordedEvent Event The event, or the resolved link event if this ResolvedEvent is a link event RecordedEvent Link The link event if this ResolvedEvent is a link event RecordedEvent OriginalEvent Returns the event read or which triggered the subscription. If this ResolvedEvent represents a link event, the link will be the OriginalEvent , otherwise it will be the event bool IsResolved Indicates whether this ResolvedEvent is a resolved link event Position? OriginalPosition The logical position of the OriginalEvent string OriginalStreamId The stream name of the OriginalEvent long OriginalEventNumber The event number in the stream of the OriginalEvent Note To ensure that the Event Store server follows link events when reading, ensure you set the ResolveLinkTos parameter to true when calling read methods. RecordedEvent RecordedEvent contains all the data about a specific event. Instances of this class are immutable, and expose the following members: Member Description string EventStreamId The Event Stream this event belongs to Guid EventId The Unique Identifier representing this event long EventNumber The number of this event in the stream string EventType The event type (supplied when writing) byte[] Data A byte array representing the data of this event byte[] Metadata A byte array representing the metadata associated with this event bool IsJson Indicates whether the content was internally marked as json DateTime Created A datetime representing when this event was created. long CreatedEpoch A long representing the milliseconds since the epoch when the was created. Read a single event The ReadEventAsync method reads a single event from a stream at a specified position. This is the simplest case of reading events, but is still useful for situations such as reading the last event in the stream used as a starting point for a subscription. This function accepts three parameters: Parameter Description string stream The stream to read from long eventNumber The event number to read (use StreamPosition.End to read the last event in the stream) bool resolveLinkTos Determines whether any link events encountered in the stream will be resolved. See the discussion on Resolved Events for more information on this This method returns an instance of EventReadResult which indicates if the read was successful, and if so the ResolvedEvent that was read. Reading a stream forwards The ReadStreamEventsForwardAsync method reads the requested number of events in the order in which they were originally written to the stream from a nominated starting point in the stream. The parameters are: Parameter Description string Stream The name of the stream to read long start The earliest event to read (inclusive). For the special case of the start of the stream, you should use the constant StreamPosition.Start . int count The maximum number of events to read in this request (assuming that many exist between the start specified and the end of the stream) bool resolveLinkTos Determines whether any link events encountered in the stream will be resolved. See the discussion on Resolved Events for more information on this Example: Read an entire stream forwards from start to end This example uses the ReadStreamEventsForwardAsync method in a loop to page through all events in a stream, reading 200 events at a time to build a list of all the events in the stream. var streamEvents = new List<ResolvedEvent>(); StreamEventsSlice currentSlice; var nextSliceStart = StreamPosition.Start; do { currentSlice = _eventStoreConnection.ReadStreamEventsForward(\"myStream\", nextSliceStart, 200, false) .Result; nextSliceStart = currentSlice.NextEventNumber; streamEvents.AddRange(currentSlice.Events); } while (!currentSlice.IsEndOfStream); Note It's unlikely that client code would need to build a list in this manner. It's far more likely that you would pass events into a left fold to derive the state of some object as of a given event. Read a stream backwards The ReadStreamEventsBackwardAsync method reads the requested number of events in the reverse order from that in which they were originally written to the stream from a specified starting point. The parameters are: Parameter Description string Stream The name of the stream to read long start The latest event to read (inclusive). For the end of the stream use the constant StreamPosition.End int count The maximum number of events to read in this request (assuming that many exist between the start specified and the start of the stream) bool resolveLinkTos Determines whether any link events encountered in the stream will be resolved. See the discussion on Resolved Events for more information on this Read all events Event Store allows you to read events across all streams using the ReadAllEventsForwardAsync and ReadAllEventsBackwardsAsync methods. These work in the same way as the regular read methods, but use an instance of the global log file Position to reference events rather than the simple integer stream position described previously. They also return an AllEventsSlice rather than a StreamEventsSlice which is the same except it uses global Position s rather than stream positions. Example: Read all events forward from start to end var allEvents = new List<ResolvedEvent>(); AllEventsSlice currentSlice; var nextSliceStart = Position.Start; do { currentSlice = connection.ReadAllEventsForwardAsync(nextSliceStart, 200, false).Result; nextSliceStart = currentSlice.NextPosition; allEvents.AddRange(currentSlice.Events); } while (!currentSlice.IsEndOfStream);"
  },
  "dotnet-api/projections/index.html": {
    "href": "dotnet-api/projections/index.html",
    "title": "Projections management | Event Store",
    "keywords": "Projections management The Event Store Client API includes helper methods that use the HTTP API to allow you to manage projections. This document describes the methods found in the ProjectionsManager class. All methods in this class are asynchronous. Enable a projection Enables an existing projection by name. You must have access to a projection to enable it. public Task EnableAsync(string name, UserCredentials userCredentials = null) Disable a projection Disables an existing projection by name. You must have access to a projection to disable it. public Task DisableAsync(string name, UserCredentials userCredentials = null) Abort a projection Aborts an existing projection by name. You must have access to a projection to abort it. public Task AbortAsync(string name, UserCredentials userCredentials = null) Create a one-time projection Creates a projection that runs until the end of the log and then stops. The query parameter contains the JavaScript you want created as a one time projection. public Task CreateOneTimeAsync(string query, UserCredentials userCredentials = null) Create a continuous projection Creates a projection that runs until the end of the log and then continues running. The query parameter contains the JavaScript you want created as a one time projection. Continuous projections have explicit names and you can enable or disable them via this name. public Task CreateContinuousAsync(string name, string query, UserCredentials userCredentials = null) List all projections Returns a list of all projections. public Task<List<ProjectionDetails>> ListAllAsync(UserCredentials userCredentials = null) List one-time projections Returns a list of all One-Time Projections. public Task<List<ProjectionDetails>> ListOneTimeAsync(UserCredentials userCredentials = null) Get statistics on a projection Returns the statistics associated with a named projection. public Task<string> GetStatisticsAsync(string name, UserCredentials userCredentials = null) Delete projection Deletes a named projection. You must have access to a projection to delete it. public Task DeleteAsync(string name, UserCredentials userCredentials = null) Get state Retrieves the state of a projection. public Task<string> GetState(string name, UserCredentials userCredentials = null) Get partition state Retrieves the state of the projection via the given partition. public Task<string> GetPartitionStateAsync(string name, string partition, UserCredentials userCredentials = null) Get result Retrieves the result of the projection. public Task<string> GetResult(string name, UserCredentials userCredentials = null) Get partition result Retrieves the result of the projection via the given partition. public Task<string> GetPartitionResultAsync(string name, string partition, UserCredentials userCredentials = null)"
  },
  "dotnet-api/optimistic-concurrency-and-idempotence/index.html": {
    "href": "dotnet-api/optimistic-concurrency-and-idempotence/index.html",
    "title": "Optimistic concurrency and idempotence | Event Store",
    "keywords": "Optimistic concurrency and idempotence Writing supports an optimistic concurrency check on the version of the stream to which events are written. The method of specifying what the expected version is depends whether you are making writes using the HTTP or .NET API. The .NET API has constants which you can use to represent certain conditions: Parameter Description ExpectedVersion.Any Disables the optimistic concurrency check. ExpectedVersion.NoStream Specifies the expectation that target stream does not yet exist. ExpectedVersion.EmptyStream Specifies the expectation that the target stream has been explicitly created, but does not yet have any user events written in it. ExpectedVersion.StreamExists Specifies the expectation that the target stream or its metadata stream has been created, but does not expect the stream to be at a specific event number. Any other integer value The event number that you expect the stream to currently be at. If the optimistic concurrency check fails during writing, a WrongExpectedVersionException is thrown. Idempotence If identical write operations occur, Event Store treats them in a way which makes it idempotent. If a write is treated in this manner, Event Store acknowledges it as successful, but duplicate events are not written. The idempotence check is based on the EventId and stream . It is possible to reuse an EventId across streams whilst maintaining idempotence. The level of idempotence guarantee depends on whether the optimistic concurrency check is not disabled during writing (by passing ExpectedVersion.Any as the expectedVersion for the write). If you specify an expected version The specified expectedVersion is compared to the currentVersion of the stream. This will yield one of three results: expectedVersion > currentVersion - a WrongExpectedVersionException is thrown. expectedVersion == currentVersion - events are written and acknowledged. expectedVersion < currentVersion - the EventId of each event in the stream starting from expectedVersion are compared to those in the write operation. This can yield one of three further results: All events have been committed already - the write is acknowledged as successful, but no duplicate events written. None of the events were previously committed - a WrongExpectedVersionException is thrown. Some of the events were previously committed - this is considered a bad request. If the write contains the same events as a previous request, either all or none of the events should have been previously committed. This surfaces as a WrongExpectedVersionException . If you specify ExpectedVersion.Any Warning Idempotence is not guaranteed if you use ExpectedVersion.Any . The chance of a duplicate event is small, but is possible. The idempotence check will yield one of three results: All events have been committed already - the write is acknowledged as successful, but no duplicate events written. None of the events were previously committed - the events are written and the write acknowledged. Some of the events were previously committed - this is considered a bad request. If the write contains the same events as a previous request, either all or none of the events should have been previously committed. This currently surfaces as a WrongExpectedVersionException ."
  },
  "dotnet-api/index.html": {
    "href": "dotnet-api/index.html",
    "title": "Overview | Event Store",
    "keywords": "Overview The .NET Client API communicates with Event Store over TCP, using length-prefixed serialised protocol buffers. The API allows for reading and writing operations, as well as for subscriptions to individual event streams or all events written. EventStoreConnection The EventStoreConnection class maintains a full-duplex connection between the client and the Event Store server. EventStoreConnection is thread-safe, and we recommend that you create one instance per application. Event Store handles all connections asynchronously, returning either a Task or a Task<T> . If you need to execute synchronously, call .Wait() on the asynchronous version. Note To get maximum performance from the connection, we recommend you use it asynchronously. Quick start The code below shows how to connect to an Event Store server, write to a stream, and read back the events. For more detailed information, read the full pages for connecting to a server , reading events and writing to a stream var connection = EventStoreConnection.Create(new IPEndPoint(IPAddress.Loopback, 1113)); // Don't forget to tell the connection to connect! connection.ConnectAsync().Wait(); var myEvent = new EventData(Guid.NewGuid(), \"testEvent\", false, Encoding.UTF8.GetBytes(\"some data\"), Encoding.UTF8.GetBytes(\"some metadata\")); connection.AppendToStreamAsync(\"test-stream\", ExpectedVersion.Any, myEvent).Wait(); var streamEvents = connection.ReadStreamEventsForwardAsync(\"test-stream\", 0, 1, false).Result; var returnedEvent = streamEvents.Events[0].Event; Console.WriteLine(\"Read event with data: {0}, metadata: {1}\", Encoding.UTF8.GetString(returnedEvent.Data), Encoding.UTF8.GetString(returnedEvent.Metadata));"
  },
  "dotnet-api/competing-consumers/index.html": {
    "href": "dotnet-api/competing-consumers/index.html",
    "title": "Competing consumers | Event Store",
    "keywords": "Competing consumers This document explains how to use .NET API for setting up and consuming competing consumer subscription groups. For an overview of competing consumers and how they relate to other subscription types, please see the overview document . Note The Administration UI includes a Competing Consumers section where a user can create, update, delete and view subscriptions and their statuses. Creating a persistent subscription Before interacting with a subscription group, you need to create one. You will receive an error if you attempt to create a subscription group more than once. This requires admin permissions . Task<PersistentSubscriptionCreateResult> CreatePersistentSubscriptionAsync(string stream, string groupName, PersistentSubscriptionSettings settings, UserCredentials credentials); Updating a persistent subscription You can edit the settings of an existing subscription while it is running. This action drops the current subscribers and resets the subscription internally. This requires admin permissions . Task<PersistentSubscriptionUpdateResult> UpdatePersistentSubscriptionAsync(string stream, string groupName, PersistentSubscriptionSettings settings, UserCredentials credentials); Deleting a persistent subscription <!-- TODO: Explanation? --> Task<PersistentSubscriptionDeleteResult> DeletePersistentSubscriptionAsync(string stream, string groupName, UserCredentials userCredentials = null); Connecting to a persistent subscription <!-- TODO: Explanation? --> EventStorePersistentSubscription ConnectToPersistentSubscription( string groupName, string stream, Func<EventStorePersistentSubscription, ResolvedEvent, Task> eventAppeared, Action<EventStorePersistentSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null, int bufferSize = 10, bool autoAck = true); Persistent subscription settings Both the Create and Update methods take a PersistentSubscriptionSettings object as a parameter. The methods use this object to provide the settings for the persistent subscription. A fluent builder is available for these options that you can locate using the Create() method. The following table shows the options you can set on a persistent subscription. Member Description ResolveLinkTos Tells the subscription to resolve link events. DoNotResolveLinkTos Tells the subscription to not resolve link events. PreferRoundRobin If possible preference a round robin between the connections with messages (if not possible uses next available). PreferDispatchToSingle If possible preference dispatching to a single connection (if not possible will use next available). StartFromBeginning Start the subscription from the first event in the stream. StartFrom(int position) Start the subscription from the position-th event in the stream. StartFromCurrent Start the subscription from the current position. WithMessageTimeoutOf(TimeSpan timeout) Sets the timeout for a client before retrying the message. CheckPointAfter(TimeSpan time) The amount of time the system should try to checkpoint after. MinimumCheckPointCountOf(int count) The minimum number of messages to write a checkpoint for. MaximumCheckPointCountOf(int count) The maximum number of messages not checkpointed before forcing a checkpoint. WithMaxRetriesOf(int count) Sets the number of times to retry a message should before considering it a bad message. WithLiveBufferSizeOf(int count) The size of the live buffer (in memory) before resorting to paging. WithReadBatchOf(int count) The size of the read batch when in paging mode. WithBufferSizeOf(int count) The number of messages to buffer when in paging mode. WithExtraStatistics Tells the backend to measure timings on the clients so statistics contain histograms of them. Creating a subscription group The first step of dealing with a subscription group is to create one. You will receive an error if you attempt to create a subscription group multiple times. You must have admin permissions to create a persistent subscription group. Note Normally you wouldn't create the subscription group in your general executable code. Instead, you create it as a step during an install or as an admin task when setting up Event Store. You should assume the subscription exists in your code. PersistentSubscriptionSettings settings = PersistentSubscriptionSettings.Create() .DoNotResolveLinkTos() .StartFromCurrent(); _result = _conn.CreatePersistentSubscriptionAsync(_stream, \"agroup\", settings, MyCredentials).Result; Parameter Description string stream The stream to the persistent subscription is on. string groupName The name of the subscription group to create. PersistentSubscriptionSettings settings The settings to use when creating this subscription. UserCredentials credentials The user credentials to use for this operation. Updating a subscription group You can edit the settings of an existing subscription group while it is running, you don't need to delete and recreate it to change settings. When you update the subscription group, it resets itself internally dropping the connections and having them reconnect. You must have admin permissions to update a persistent subscription group. PersistentSubscriptionSettings settings = PersistentSubscriptionSettings.Create() .DoNotResolveLinkTos() .StartFromCurrent(); _result = _conn.UpdatePersistentSubscriptionAsync(_stream, \"agroup\", settings, MyCredentials).Result; Note If you change settings such as startFromBeginning , this doesn't reset the group's checkpoint. If you want to change the current position in an update, you must delete and recreate the subscription group. Parameter Description string stream The stream to the persistent subscription is on. string groupName The name of the subscription group to update. PersistentSubscriptionSettings settings The settings to use when updating this subscription. UserCredentials credentials The user credentials to use for this operation. Deleting a subscription group Remove a subscription group with the delete operation. Like the creation of groups, you rarely do this in your runtime code and is undertaken by an administrator running a script. var result = _conn.DeletePersistentSubscriptionAsync(stream, \"groupname\", DefaultData.AdminCredentials).Result; Parameter Description string stream The stream to the persistent subscription is on. string groupName The name of the subscription group to update. UserCredentials credentials The user credentials to use for this operation. Connecting to a subscription group Once you have created a subscription group, clients can connect to that subscription group. A subscription in your application should only have the connection in your code, you should assume that the subscription was created via the client API, the restful API, or manually in the UI. The most important parameter to pass when connecting is the buffer size. This parameter represents how many outstanding messages the server should allow this client. If this number is too small, your subscription will spend much of its time idle as it waits for an acknowledgment to come back from the client. If it's too big, you waste resources and can start causing time out messages depending on the speed of your processing. var subscription = _conn.ConnectToPersistentSubscription(\"foo\", \"nonexisting2\", (sub, e) => Console.Write(\"appeared\"), (sub, reason, ex) =>{}); Parameter Description string stream The stream to the persistent subscription is on. string groupName The name of the subscription group to connect to. Action eventAppeared The action to call when an event arrives over the subscription. Action subscriptionDropped The action to call if the subscription is dropped. UserCredentials credentials The user credentials to use for this operation. int bufferSize The number of in-flight messages this client is allowed. bool autoAck Whether to automatically acknowledge messages after eventAppeared returns. Acknowledgements Clients must acknowledge (or not acknowledge) messages in the competing consumer model. If you enable auto-ack the subscription will automatically acknowledge messages once your handler completes them. If you throw an exception, it will shut down your subscription with a message and the uncaught exception. You can choose to not auto-ack messages. This can be useful when you have multi-threaded processing of messages in your subscriber and need to pass control to something else. There are methods on the subscription object that you can call Acknowledge, and NotAcknowledge both take a ResolvedEvent (the one you processed) both also have overloads for passing and IEnumerable<ResolvedEvent> . Consumer strategies When creating a persistent subscription, the settings allow for different consumer strategies via the WithNamedConsumerStrategy method. Built-in strategies are defined in the enum SystemConsumerStrategies . Note HTTP clients bypass the consumer strategy which means it ignores any ordering or pinning. RoundRobin (default) Distributes events to all clients evenly. If the client bufferSize is reached the client is ignored until events are acknowledged/not acknowledged. | DispatchToSingle Distributes events to a single client until the bufferSize is reached. After which the next client is selected in a round robin style, and the process is repeated. Pinned For use with an indexing projection such as the system $by_category projection. Event Store inspects event for its source stream id, hashing the id to one of 1024 buckets assigned to individual clients. When a client disconnects it's buckets are assigned to other clients. When a client connects, it is assigned some of the existing buckets. This naively attempts to maintain a balanced workload. The main aim of this strategy is to decrease the likelihood of concurrency and ordering issues while maintaining load balancing. This is not a guarantee , and you should handle the usual ordering and concurrency issues."
  },
  "server/deploy-kubernetes-gke/index.html": {
    "href": "server/deploy-kubernetes-gke/index.html",
    "title": "Deploy with Kubernetes to Google Cloud GKE | Event Store",
    "keywords": "Deploy with Kubernetes to Google Cloud GKE This guide is to show how to use the official Event Store Helm Chart to interactively deploy an Event Store Cluster in Kubernetes Google Cloud GKE service. Prerequisites Install the following utilities in your development machine. Kubectl Helm Google Cloud SDK Configuration steps Login in your Google Cloud account using the gcloud cli, this prompts you to login using any browser and copy/paste a key back in to the cli: gcloud auth login --no-launch-browser Set the region , and the project id from above: gcloud config set compute/region <regionname> gcloud config set project <projectid> Enable the Kubernetes Engine API for your project, by visiting the https://console.cloud.google.com/apis/library/container.googleapis.com?project={project-id} page. Create a Kubernetes Cluster in your account, the following command does not specify the number of nodes and uses the default of 3:. gcloud container clusters create <clustername> --zone <zonename> We recommend kubectl for managing resources in the Kubernetes cluster. Set the current context for kubectl and merge it with any existing configuration in your existing config file: gcloud beta container clusters get-credentials <clustername> --zone <zonename> --project <projectid> On the server side Helm relies on a service account called Tiller, and you need to configure this account for Role Base Access as Google Cloud GKE enables it by default. To configure RBAC follow these instructions . In Summary you need to create a special deployment with the Tiller user settings before running the helm init command. You can then check if the 'tiller-deploy-xxxx' pod is running kubectl -n kube-system get pod Deploy Event Store cluster with Helm It is possible to specify a lot of options to customise your Event Store deployment. The setting used in this guide is \"Persistent Volume\", that allows you to deploy a Persistent Volume Claim . This Claim is an abstraction that requires Kubernetes to set up one persistent volume per each Event Store node and assign an id to it. These volumes are then reused by the cluster, for example, we want to upgrade the version of the Cluster and retain the data. If we don’t specify an existing volume then the volumes are dynamically created. helm repo add eventstore <https://eventstore.github.io/EventStore.Charts> helm repo update helm install -n eventstore eventstore/eventstore --set persistence.enabled=true Google Cloud GKE sets the authentication to use RBAC by default. Because of this, to reach your Event Store cluster you have to set up access for anonymous users. This is something you would only do for a test environment using the following command: kubectl create clusterrolebinding cluster-system-anonymous --clusterrole=cluster-admin --user=system:anonymous Upgrade the cluster with a newer version Verify your current Event Store cluster: helm status eventstore Fork the official Helm Chart Event Store repository and change the version of the image in the chart values.yaml . And run the command in the same directory as the chart: helm upgrade eventstore . --set persistence.enabled=true The upgrade command upgrades all the pods one by one without downtime and attaches the existing volumes to the new pods during the upgrade. Rollback to a previous version To rollback the upgrade, first use the following command to display the history: helm history eventstore And then the following command to rollback to a specific revision: helm rollback eventstore 1 Delete resources gcloud container clusters delete <clustername> --zone <zonename> Then login in to the Google Cloud Web UI, and in the Kubernetes Engine view delete the Kubernetes Cluster using the bin icon."
  },
  "server/setting-up-ssl/index.html": {
    "href": "server/setting-up-ssl/index.html",
    "title": "Setting up SSL | Event Store",
    "keywords": "Setting up SSL Setting up SSL on Windows The steps to set up SSL on Windows are as follows. First, create a certificate using powershell, and copy the thumbprint from the output New-SelfSignedCertificate -DnsName eventstore.org, localhost -CertStoreLocation cert:\\CurrentUser\\My To trust the new certificate, the certificate you have to import the certificate into the Trusted Root Certification Authorities: Press WindowsKey + R , and enter 'certmgr.msc'. Navigate to Certificates -> Current User -> Personal -> Certificates . Locate the certificate 'eventstore.org'. Right click on the certificate and click on All Tasks -> Export . Follow the prompts. Navigate to Certificates -> Current User -> Trusted Root Certification Authorities -> Certificates . Right click on the Certificates folder menu item and click All Tasks -> Import . Follow the prompts. Start Event Store with the following configuration in a configuration file : CertificateStoreLocation: CurrentUser CertificateStoreName: My CertificateThumbPrint: {Insert Thumb Print from Step 1} CertificateSubjectName: CN=eventstore.org ExtSecureTcpPort: 1115 Connect to Event Store: .NET API HTTP API var settings = ConnectionSettings.Create().UseSslConnection(\"eventstore.org\", true); using (var conn = EventStoreConnection.Create(settings, new IPEndPoint(IPAddress.Loopback, 1115))) { conn.ConnectAsync().Wait(); } curl -vk --cert <PATH_TO_CERT> --key <PATH_TO_KEY> -i -d \"@event.json\" \"http://127.0.0.1:2113/streams/newstream\" -H \"Content-Type:application/vnd.eventstore.events+json\" Setting up SSL on Linux Note This guide uses the latest Ubuntu LTS (18.04) First, create a private key and self-signed certificate request (This is only for testing purposes) openssl req \\ -x509 -sha256 -nodes -days 365 -subj \"/CN=eventstore.org\" \\ -newkey rsa:2048 -keyout eventstore.pem -out eventstore.csr Export a p12 file from the certificate request. You use this when starting Event Store: openssl pkcs12 -export -inkey eventstore.pem -in eventstore.csr -out eventstore.p12 You need to add the certificate to Ubuntu's trusted certificates. Copy the cert to the ca-certificates folder and update the certificates: sudo cp eventstore.csr /usr/local/share/ca-certificates/eventstore.crt sudo update-ca-certificates The mono framework has its own separate certificate store which you need to sync with the changes you made to Ubuntu's certificates. You first need to install mono-devel version 5.16.0 : sudo apt install gnupg ca-certificates sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF # Update \"bionic\" to match your Ubuntu version echo \"deb https://download.mono-project.com/repo/ubuntu stable-bionic/snapshots/5.16.0 main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list sudo apt update sudo apt-get install mono-devel This process installs cert-sync , which you use to update mono's certificate store with the new certificate: sudo cert-sync eventstore.csr Start Event Store with the following configuration in a configuration file : CertificateFile: eventstore.p12 ExtSecureTcpPort: 1115 Connect to Event Store: .NET API HTTP API var settings = ConnectionSettings.Create().UseSslConnection(\"eventstore.org\", true); using (var conn = EventStoreConnection.Create(settings, new IPEndPoint(IPAddress.Loopback, 1115))) { conn.ConnectAsync().Wait(); } curl -vk --cert <PATH_TO_CERT> --key <PATH_TO_KEY> -i -d \"@event.json\" \"http://127.0.0.1:2113/streams/newstream\" -H \"Content-Type:application/vnd.eventstore.events+json\""
  },
  "server/ports-and-networking/index.html": {
    "href": "server/ports-and-networking/index.html",
    "title": "Ports and networking | Event Store",
    "keywords": "Ports and networking Single node If you run Event Store as a single node, it only uses two ports. The first port is the external HTTP port, and the default value is 2113 . Event Store uses this port for both the client HTTP APIs and for the management HTTP interface. The second port used is the TCP interface for clients connecting over the client API, and the default for the port is 1113 . Event Store in Windows tries to add access via http.sys automatically for the 2113 port. You should ensure that these ports are open and allowed via a firewall. Cluster node When running in cluster mode the networking for Event Store is more complex. Cluster mode requires 4 ports to run. The ports are for internal HTTP, internal TCP, external HTTP, and external TCP. <!-- TODO: And they are? --> The internal and external interfaces allow for separation of traffic. The internal network is where cluster communications runs, while the external interfaces is where client communications runs. This separation allows for more secure setups such as putting internal communications on a different network than external client communications. For example, you might want to allow clients over HTTP to talk directly to Event Store, and you can move internal communications to a separate network to ensure the management interface and internal operations are not accessible to external traffic. The external TCP and HTTP ports are similar to the HTTP and TCP ports of a single node deploy. Event Store runs client requests over the HTTP API through the external HTTP port. You can run without the management API on the external interface (internal only). The external and the internal interfaces support the gossip protocol. You can control whether the admin interface is available on the external HTTP interface using the admin-on-ext option . You can control whether gossip is enabled on external interfaces with the gossip-on-ext option (you normally want it enabled). You configure the internal TCP and HTTP ports in the same way as the external. All internal communications for the cluster happen over these interfaces. Elections and internal gossip happen over HTTP. Replication and forwarding of client requests happens over the TCP channel. When setting up a cluster the nodes must be able to reach each other over both the internal HTTP channel and the internal TCP channel. You should ensure that these ports are open on firewalls on the machines and between the machines. Heartbeat timeouts Event Store uses heartbeats over all TCP connections to discover dead clients and nodes. Setting heartbeat timeouts requires thought. Set them too short and you receive false positives, set them too long and discovery of dead clients and nodes is slower. Each heartbeat has two points of configuration. The first is the 'interval', this represents how often the system should consider a heartbeat. Event Store doesn't send a heartbeat for every interval. Event Store sends heartbeat requests if it has not heard from a node within the configured interval. On a busy cluster, you may never see any heartbeats. The second point of configuration is the 'timeout'. This determines how long Event Store waits for a client or node to respond to a heartbeat request. Different environments need different values for these settings. While low numbers work well on a LAN they tend to not work well in the cloud. The defaults are likely fine on a LAN, for the cloud, consider setting: An interval of 5000ms. A timeout of 1000ms. Tip If in doubt, choose higher numbers. This adds a small period of time to discover a dead client or node and is better than the alternative, which is false positives. Advertise as Due to NAT, or other reasons a node may not be bound to the address it is reachable from other nodes. For example, the machine has an IP address of 192.168.1.13, but the node is visible to other nodes as 10.114.12.112. The option advertise-as allows you to tell the node that even though it is bound to a given address it should not gossip that address. Instead it uses the address that you tell it to use. In the example above you would configure\" --ext-ip 192.168.1.13 --advertise-as 10.114.12.112 Or use the equivalent configuration via environment variables or a configuration file."
  },
  "server/configuring/index.html": {
    "href": "server/configuring/index.html",
    "title": "Configuring your Event Store installation | Event Store",
    "keywords": "Configuring your Event Store installation <!-- I envisage this file growing. Possibly some material from other server docs could be moved here (there's an issue out there about tidying up this section) and I imagine other config questions may come up in future --> Linux Start Event Store as a service on a custom port Follow the instructions in Getting started to install an Event Store package. Do not start Event Store. Find your inet address. For example: #Retrieve your IP address ifconfig #Output eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet 192.168.1.68 netmask 255.255.255.0 broadcast 192.168.1.255 inet6 fe80::d12:27b9:96c2:c00e prefixlen 64 scopeid 0xfd<compat,link,site,host> Edit your Event Store config: #Open the file sudo nano /etc/eventstore/eventstore.conf #Add the following extIp: <your inet address> ExtHttpPort: 80 ExtHttpPrefixes: http://*:80/ AddInterfacePrefixes: false Allow the Event Store executable to bind to a port lower than 1024: sudo setcap CAP_NET_BIND_SERVICE=+eip /usr/bin/eventstored Start the Event Store service as normal: sudo systemctl start eventstore"
  },
  "http-api/optional-http-headers/resolve-linkto/index.html": {
    "href": "http-api/optional-http-headers/resolve-linkto/index.html",
    "title": "Optional HTTP Headers: Resolve LinkTo | Event Store",
    "keywords": "Optional HTTP Headers: Resolve LinkTo When using projections you can have links placed into another stream. By default Event Store always resolve linkTo s for you returning the event that points to the link. You can use the ES-ResolveLinkTos: false HTTP header to tell Event Store to return you the actual link and to not resolve it. You can see the differences in behaviour in the following cURL commands. Request Response curl -i http://127.0.0.1:2113/streams/shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1167/0 -H \"accept:application/vnd.eventstore.atom+json\" -H \"ES-ResolveLinkTos: true\" HTTP/1.1 200 OK Access-Control-Allow-Methods: GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Cache-Control: max-age=31536000, public Vary: Accept Content-Type: application/vnd.eventstore.atom+json; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Tue, 28 Aug 2018 13:13:49 GMT Content-Length: 918 Keep-Alive: timeout=15,max=100 { \"title\": \"0@shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1167\", \"id\": \"http://127.0.0.1:2113/streams/shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1167/0\", \"updated\": \"2018-08-28T12:56:15.263731Z\", \"author\": { \"name\": \"EventStore\" }, \"summary\": \"ItemAdded\", \"content\": { \"eventStreamId\": \"shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1167\", \"eventNumber\": 0, \"eventType\": \"ItemAdded\", \"eventId\": \"b989fe21-9469-4017-8d71-9820b8dd1167\", \"data\": { \"Description\": \"Xbox One Elite (Console)\" }, \"metadata\": { \"TimeStamp\": \"2016-12-23T10:00:00.9225401+01:00\" } }, \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1167/0\", \"relation\": \"edit\" }, { \"uri\": \"http://127.0.0.1:2113/streams/shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1167/0\", \"relation\": \"alternate\" } ] } Note The content links are pointing to the original projection stream. The linked events are resolved back to where they point. With the header set the links (or embedded content) instead point back to the actual linkTo events. Request Response curl -i http://127.0.0.1:2113/streams/shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1167/0 -H \"accept:application/vnd.eventstore.atom+json\" -H \"ES-ResolveLinkTos: false\" HTTP/1.1 200 OK Access-Control-Allow-Methods: GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Cache-Control: max-age=31536000, public Vary: Accept Content-Type: application/vnd.eventstore.atom+json; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Tue, 28 Aug 2018 13:22:09 GMT Content-Length: 918 Keep-Alive: timeout=15,max=100 { \"title\": \"0@shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1167\", \"id\": \"http://127.0.0.1:2113/streams/shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1167/0\", \"updated\": \"2018-08-28T12:56:15.263731Z\", \"author\": { \"name\": \"EventStore\" }, \"summary\": \"ItemAdded\", \"content\": { \"eventStreamId\": \"shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1167\", \"eventNumber\": 0, \"eventType\": \"ItemAdded\", \"eventId\": \"b989fe21-9469-4017-8d71-9820b8dd1167\", \"data\": { \"Description\": \"Xbox One Elite (Console)\" }, \"metadata\": { \"TimeStamp\": \"2016-12-23T10:00:00.9225401+01:00\" } }, \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1167/0\", \"relation\": \"edit\" }, { \"uri\": \"http://127.0.0.1:2113/streams/shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1167/0\", \"relation\": \"alternate\" } ] }"
  },
  "http-api/optional-http-headers/requires-master/index.html": {
    "href": "http-api/optional-http-headers/requires-master/index.html",
    "title": "Optional HTTP Headers: Requires Master | Event Store",
    "keywords": "Optional HTTP Headers: Requires Master When running in a clustered environment there are times when you only want an operation to happen on the current leader node. A client can fetch information in an eventually consistent fashion by communicating with the servers. The TCP client included with the multi-node version does this. Over HTTP the RequiresMaster header tells the node that it is not allowed to serve a read or forward a write request. If the node is the leader everything works as normal, if it isn't it responds with a 307 temporary redirect to the leader. Run the below on the master: Request Response curl -i \"http://127.0.0.1:32004/streams/newstream\" -H \"ES-RequireMaster: True\" HTTP/1.1 200 OK Cache-Control: max-age=0, no-cache, must-revalidate Content-Length: 1296 Content-Type: application/vnd.eventstore.atom+json; charset: utf-8 ETag: \"0;-2060438500\" Vary: Accept Server: Microsoft-HTTPAPI/2.0 Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER Access-Control-Allow-Origin: * Date: Thu, 27 Jun 2013 14:48:37 GMT { \"title\": \"Event stream 'stream'\", \"id\": \"http://127.0.0.1:32004/streams/stream\", \"updated\": \"2013-06-27T14:48:15.2596358Z\", \"streamId\": \"stream\", \"author\": { \"name\": \"EventStore\" }, \"links\": [ { \"uri\": \"http://127.0.0.1:32004/streams/stream\", \"relation\": \"self\" }, { \"uri\": \"http://127.0.0.1:32004/streams/stream/head/backward/20\", \"relation\": \"first\" }, { \"uri\": \"http://127.0.0.1:32004/streams/stream/0/forward/20\", \"relation\": \"last\" }, { \"uri\": \"http://127.0.0.1:32004/streams/stream/1/forward/20\", \"relation\": \"previous\" }, { \"uri\": \"http://127.0.0.1:32004/streams/stream/metadata\", \"relation\": \"metadata\" } ], \"entries\": [ { \"title\": \"0@stream\", \"id\": \"http://127.0.0.1:32004/streams/stream/0\", \"updated\": \"2013-06-27T14:48:15.2596358Z\", \"author\": { \"name\": \"EventStore\" }, \"summary\": \"TakeSomeSpaceEvent\", \"links\": [ { \"uri\": \"http://127.0.0.1:32004/streams/stream/0\", \"relation\": \"edit\" }, { \"uri\": \"http://127.0.0.1:32004/streams/stream/0\", \"relation\": \"alternate\" } ] } ] } Run the following on any other node: Request Response curl -i \"http://127.0.0.1:31004/streams/newstream\" -H \"ES-RequireMaster: True\" HTTP/1.1 307 Temporary Redirect Content-Length: 0 Content-Type: text/plain; charset: utf-8 Location: http://127.0.0.1:32004/streams/stream Server: Microsoft-HTTPAPI/2.0 Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER Access-Control-Allow-Origin: * Date: Thu, 27 Jun 2013 14:48:28 GMT"
  },
  "http-api/optional-http-headers/longpoll/index.html": {
    "href": "http-api/optional-http-headers/longpoll/index.html",
    "title": "Optional HTTP Headers: LongPoll | Event Store",
    "keywords": "Optional HTTP Headers: LongPoll You use the ES-LongPoll header to tell Event Store that when on the head link of a stream and no data is available to wait a period of time to see if data becomes available. You can use this to give lower latency for Atom clients instead of client initiated polling. Instead of the client polling every 5 seconds to get data from the feed the client sends a request with ES-LongPoll: 15 . This instructs Event Store to wait for up to 15 seconds before returning with no result. The latency is therefore lowered from the poll interval to about 10ms from the time an event is written until the time the HTTP connection is notified. You can see the use of the ES-LongPoll header in the following cURL command. First go to the head of the stream. Request Response curl -i http://127.0.0.1:2113/streams/newstream -H \"Accept: application/json\" HTTP/1.1 200 OK Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Cache-Control: max-age=0, no-cache, must-revalidate Vary: Accept ETag: \"1;1391431453\" Content-Type: application/json; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Mon, 27 Aug 2018 09:37:21 GMT Content-Length: 1749 Keep-Alive: timeout=15,max=100 { \"title\": \"Event stream 'newstream'\", \"id\": \"http://127.0.0.1:2113/streams/newstream\", \"updated\": \"2018-08-27T09:21:39.668888Z\", \"streamId\": \"newstream\", \"author\": { \"name\": \"EventStore\" }, \"headOfStream\": true, \"selfUrl\": \"http://127.0.0.1:2113/streams/newstream\", \"eTag\": \"1;-2060438500\", \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/newstream\", \"relation\": \"self\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/head/backward/20\", \"relation\": \"first\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/2/forward/20\", \"relation\": \"previous\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/metadata\", \"relation\": \"metadata\" } ], \"entries\": [ \"entries\": [ ] } Then fetch the previous rel link http://127.0.0.1:2113/streams/newstream/2/forward/20 and try it. It returns an empty feed. Request Response curl -i http://127.0.0.1:2113/streams/newstream/2/forward/20 -H \"Accept: application/json\" HTTP/1.1 200 OK Access-Control-Allow-Methods: GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Cache-Control: max-age=0, no-cache, must-revalidate Vary: Accept ETag: \"1;1391431453\" Content-Type: application/json; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Mon, 27 Aug 2018 09:53:14 GMT Content-Length: 786 Keep-Alive: timeout=15,max=100 { \"title\": \"Event stream 'newstream'\", \"id\": \"http://127.0.0.1:2113/streams/newstream\", \"updated\": \"0001-01-01T00:00:00Z\", \"streamId\": \"newstream\", \"author\": { \"name\": \"EventStore\" }, \"headOfStream\": true, \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/newstream\", \"relation\": \"self\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/head/backward/20\", \"relation\": \"first\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/0/forward/20\", \"relation\": \"last\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/1/backward/20\", \"relation\": \"next\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/metadata\", \"relation\": \"metadata\" } ], \"entries\": [] } The entries section is empty (there is no further data to provide). Now try the same URI with a long poll header. Request curl -i http://127.0.0.1:2113/streams/newstream/2/forward/20 -H \"Accept: application/json\" -H \"ES-LongPoll: 10\" If you do not insert any events into the stream while this is running it takes 10 seconds for the HTTP request to finish. If you append an event to the stream while its running you see the result for that request when you append the event."
  },
  "http-api/optional-http-headers/index.html": {
    "href": "http-api/optional-http-headers/index.html",
    "title": "Optional HTTP headers | Event Store",
    "keywords": "Optional HTTP headers <!-- TODO: Can Swagger replace this? And sub files --> Event Store supports custom HTTP headers for requests. The headers were previously in the form X-ES-ExpectedVersion but were changed to ES-ExpectedVersion in compliance with RFC-6648 . The headers supported are: Header Description ES-ExpectedVersion The expected version of the stream (allows optimistic concurrency) ES-ResolveLinkTo Whether to resolve linkTos in stream ES-RequiresMaster Whether this operation needs to run on the master node ES-TrustedAuth Allows a trusted intermediary to handle authentication ES-LongPoll Instructs the server to do a long poll operation on a stream read ES-HardDelete Instructs the server to hard delete the stream when deleting as opposed to the default soft delete ES-EventType Instructs the server the event type associated to a posted body ES-EventId Instructs the server the event id associated to a posted body"
  },
  "http-api/optional-http-headers/harddelete/index.html": {
    "href": "http-api/optional-http-headers/harddelete/index.html",
    "title": "Optional HTTP Headers: HardDelete | Event Store",
    "keywords": "Optional HTTP Headers: HardDelete The ES-HardDelete header controls deleting a stream. By default Event Store soft deletes a stream allowing you to later reuse that stream. If you set the ES-HardDelete header Event Store permanently deletes the stream. Request Response curl -X DELETE http://127.0.0.1:2113/streams/newstream -H \"ES-HardDelete:true\" HTTP/1.1 204 Stream deleted Content-Length: 0 Content-Type: text/plain; charset=utf-8 Server: Microsoft-HTTPAPI/2.0 Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER, Authorization Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location Date: Thu, 13 Mar 2014 20:56:55 GMT This changes the general behaviour from returning a '404' and recreatable to the stream now return a 410 Deleted response."
  },
  "http-api/optional-http-headers/expected-version/index.html": {
    "href": "http-api/optional-http-headers/expected-version/index.html",
    "title": "Optional HTTP Headers: Expected Version | Event Store",
    "keywords": "Optional HTTP Headers: Expected Version When you write to a stream you often want to use Expected Version to allow for optimistic concurrency with a stream. You commonly use this for a domain object projection. i.e., \"A write can succeed if I have seen everyone else's writes.\" You set ExpectedVersion with the syntax ES-ExpectedVersion: # , where # is an integer version number. There are other special values available: 0 , the stream should exist but be empty when writing. -1 , the stream should not exist when writing. -2 , the write should not conflict with anything and should always succeed. -4 , the stream or a metadata stream should exist when writing. If the ExpectedVersion does not match the version of the stream, Event Store returns an HTTP 400 Wrong expected EventNumber response. This response contains the current version of the stream in an ES-CurrentVersion header. In the following cURL command ExpectedVersion is not set, and it appends or create/append to the stream. Request Response curl -i -d \"@event.json\" \"http://127.0.0.1:2113/streams/newstream\" -H \"Content-Type:application/json\" -H \"ES-EventType: SomeEvent\" -H \"ES-EventId: C322E299-CB73-4B47-97C5-5054F920746E\" HTTP/1.1 201 Created Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER Access-Control-Allow-Origin: * Location: http://127.0.0.1:2113/streams/newstream/0 Content-Type: text/plain; charset: utf-8 Server: Mono-HTTPAPI/1.0 Date: Fri, 28 Jun 2013 12:17:59 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100 The stream 'newstream' has one event. If you append with an expected version of '3', you receive an error. Request Response curl -i -d @event-version.json \"http://127.0.0.1:2113/streams/newstream\" -H \"Content-Type:application/vnd.eventstore.events+json\" -H \"ES-ExpectedVersion: 3\" HTTP/1.1 400 Wrong expected EventNumber Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion ES-CurrentVersion: 0 Content-Type: text/plain; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Tue, 14 Aug 2018 14:08:44 GMT Content-Length: 0 Connection: close You can see from the ES-CurrentVersion header above that the stream is at version 0. Appending with an expected version of 0 works. The expected version is always the version of the last event known in the stream. Request Response curl -i -d @event-version.json \"http://127.0.0.1:2113/streams/newstream\" -H \"Content-Type:application/vnd.eventstore.events+json\" -H \"ES-CurrentVersion: 0\" HTTP/1.1 201 Created Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Location: http://127.0.0.1:2113/streams/newstream/2 Content-Type: text/plain; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Tue, 14 Aug 2018 10:02:08 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100"
  },
  "http-api/optional-http-headers/eventtype/index.html": {
    "href": "http-api/optional-http-headers/eventtype/index.html",
    "title": "Optional HTTP Headers: EventType | Event Store",
    "keywords": "Optional HTTP Headers: EventType When you write to a stream and don't the application/vnd.eventstore.events+json/+xml media type you must specify an event type with the event that you are posting. This isn't required with the custom media type as it's specified within the format itself. You use the ES-EventType header as follows. Request Response curl -i -d \"@event.json\" \"http://127.0.0.1:2113/streams/newstream\" -H \"Content-Type:application/json\" -H \"ES-EventType: SomeEvent\" -H \"ES-EventId: C322E299-CB73-4B47-97C5-5054F920746E\" HTTP/1.1 201 Created Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER Access-Control-Allow-Origin: * Location: http://127.0.0.1:2113/streams/newstream/0 Content-Type: text/plain; charset: utf-8 Server: Mono-HTTPAPI/1.0 Date: Fri, 28 Jun 2013 12:17:59 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100 If you view the event in the UI or with cURL it has the EventType of SomeEvent : <!-- TODO: Does this make sense? If I can't use the custom medi type --> Request Response curl -i http://127.0.0.1:2113/streams/newstream/0 -H \"accept:application/vnd.eventstore.atom+json\" { \"title\": \"0@newstream\", \"id\": \"http://127.0.0.1:2113/streams/newstream/0\", \"updated\": \"2018-08-27T08:27:58.986756Z\", \"author\": { \"name\": \"EventStore\" }, \"summary\": \"SomeEvent\", \"content\": { \"eventStreamId\": \"newstream\", \"eventNumber\": 0, \"eventType\": \"SomeEvent\", \"eventId\": \"c322e299-cb73-4b47-97c5-5054f920746e\", \"data\": { \"a\": \"1\" }, \"metadata\": \"\" }, \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/newstream/0\", \"relation\": \"edit\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/0\", \"relation\": \"alternate\" } ] }"
  },
  "http-api/optional-http-headers/eventid/index.html": {
    "href": "http-api/optional-http-headers/eventid/index.html",
    "title": "Optional HTTP headers: EventID | Event Store",
    "keywords": "Optional HTTP headers: EventID When you write to a stream and don't use the application/vnd.eventstore.events+json/+xml media type, you need to specify an event ID with the event you post. This is not required with the custom media type as it is specified within the format (there is an EventId on each entry in the format). Event Store uses EventId for impotency. You can include an event ID on an event by specifying this header. Request Response curl -i -d \"@event.json\" \"http://127.0.0.1:2113/streams/newstream\" -H \"Content-Type:application/json\" -H \"ES-EventType: SomeEvent\" -H \"ES-EventId: C322E299-CB73-4B47-97C5-5054F920746E\" HTTP/1.1 201 Created Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER Access-Control-Allow-Origin: * Location: http://127.0.0.1:2113/streams/newstream/0 Content-Type: text/plain; charset: utf-8 Server: Mono-HTTPAPI/1.0 Date: Fri, 28 Jun 2013 12:17:59 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100 If you don't add an ES-EventId header on an append where the body is considered the actual event (e.g., not using application/vnd.eventstore.events+json/+xml ) Event Store generates a unique identifier for you and redirects you to an idempotent URI where you can post your event. If you can create a UUID then you shouldn't use this feature, but it's useful when you cannot create a UUID. Request Response curl -i -d \"@event.json\" \"http://127.0.0.1:2113/streams/newstream\" -H \"Content-Type:application/json\" -H \"ES-EventType: SomeEvent\" HTTP/1.1 307 Temporary Redirect Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Location: http://127.0.0.1:2113/streams/newstream/incoming/8a00e469-3a99-4517-a0b0-8dc662ffad9b Content-Type: text/plain; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Tue, 24 Jul 2018 14:42:44 GMT Content-Length: 28 Keep-Alive: timeout=15,max=100 Forwarding to idempotent URI% Event Store returned a 307 Temporary Redirect with a location header that points to a generated URI that is idempotent for purposes of retrying the post."
  },
  "http-api/creating-writing-a-stream/index.html": {
    "href": "http-api/creating-writing-a-stream/index.html",
    "title": "Creating and writing to a stream | Event Store",
    "keywords": "Creating and writing to a stream You write to a stream over HTTP using a POST request to the resource of the stream. If the stream does not exist then the stream is implicitly created. Event Store media types Event Store supports a custom media type for posting events, application/vnd.eventstore.events+json or application/vnd.eventstore.events+xml . This format allows for extra functionality that posting events as application/json or application/xml does not. For example it allows you to post multiple events in a single batch. <!-- TODO: And more? Why not use it? And why are these examples not using it? --> The format represents data with the following jschema ( eventId must be a UUID). [ { \"eventId\" : \"string\", \"eventType\" : \"string\", \"data\" : \"object\", \"metadata\" : \"object\" } ] Writing a single event If you issue a POST request with data to a stream and the correct content type set it writes the event to the stream, and generates a 201 response from the server, giving you the location of the event. Using the following event, which you can also download as a file : { \"a\": \"1\" } POST the following request to create a stream and add an event to it: Request Response curl -i -d \"@event.json\" \"http://127.0.0.1:2113/streams/newstream\" -H \"Content-Type:application/json\" -H \"ES-EventType: SomeEvent\" -H \"ES-EventId: C322E299-CB73-4B47-97C5-5054F920746E\" HTTP/1.1 201 Created Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER Access-Control-Allow-Origin: * Location: http://127.0.0.1:2113/streams/newstream/0 Content-Type: text/plain; charset: utf-8 Server: Mono-HTTPAPI/1.0 Date: Fri, 28 Jun 2013 12:17:59 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100 Some clients may not be able to generate a unique identifier (or may not want to) for the event ID. You need this ID for idempotence purposes and Event Store can generate it for you. If you leave off the ES-EventId header you see different behavior: Request Response curl -i -d \"@event.json\" \"http://127.0.0.1:2113/streams/newstream\" -H \"Content-Type:application/json\" -H \"ES-EventType: SomeEvent\" HTTP/1.1 307 Temporary Redirect Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Location: http://127.0.0.1:2113/streams/newstream/incoming/8a00e469-3a99-4517-a0b0-8dc662ffad9b Content-Type: text/plain; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Tue, 24 Jul 2018 14:42:44 GMT Content-Length: 28 Keep-Alive: timeout=15,max=100 Forwarding to idempotent URI% In this case Event Store has responded with a 307 Temporary Redirect . The location points to another URI that you can post the event to. This new URI is idempotent for posting, even without an event ID. Request Response curl -i -d \"@event.json\" \"http://127.0.0.1:2113/streams/newstream/incoming/8a00e469-3a99-4517-a0b0-8dc662ffad9b\" -H \"Content-Type: application/json\" -H \"ES-EventType: SomeEvent\" HTTP/1.1 201 Created Access-Control-Allow-Methods: GET, POST, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Location: http://127.0.0.1:2113/streams/newstream/0 Content-Type: text/plain; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Tue, 24 Jul 2018 14:46:10 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100 It's generally recommended to include an event ID if possible as it results in fewer round trips between the client and the server. When posting to either the stream or to the returned redirect, clients must include the EventType header. If you forget to include the header you receive an error. Request Response curl -i -d \"@event.json\" \"http://127.0.0.1:2113/streams/newstream\" -H \"Content-Type:application/json\" HTTP/1.1 400 Must include an event type with the request either in body or as ES-EventType header. Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Content-Type: Server: Mono-HTTPAPI/1.0 Date: Tue, 24 Jul 2018 14:50:59 GMT Content-Length: 0 Connection: close Batch writes You can include more than one write in a single post by placing multiple events inside of the array representing the events, including metadata. For example, the below has two events: [ { \"eventId\": \"fbf4b1a1-b4a3-4dfe-a01f-ec52c34e16e4\", \"eventType\": \"event-type\", \"data\": { \"a\": \"1\" } }, { \"eventId\": \"0f9fad5b-d9cb-469f-a165-70867728951e\", \"eventType\": \"event-type\", \"data\": { \"b\": \"2\" } } ] When you write multiple events in a single post, Event Store treats them transactionally, it writes all events together or fails. Request Response curl -i -d \"@multiple-events.json\" \"http://127.0.0.1:2113/streams/newstream\" -H \"Content-Type:application/vnd.eventstore.events+json\" HTTP/1.1 201 Created Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER Access-Control-Allow-Origin: * Location: http://127.0.0.1:2113/streams/newstream/1 Content-Type: text/plain; charset: utf-8 Server: Mono-HTTPAPI/1.0 Date: Fri, 28 Jun 2013 12:32:18 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100 Appending events To append events, issue a POST request to the same resource with a new eventId : [ { \"eventId\": \"fbf4a1a1-b4a3-4dfe-a01f-ec52c34e16e5\", \"eventType\": \"event-type\", \"data\": { \"b\": \"2\" } } ] Request Response curl -i -d \"@event-append.json\" \"http://127.0.0.1:2113/streams/newstream\" -H \"Content-Type:application/vnd.eventstore.events+json\" -H \"ES-EventType: SomeEvent\" HTTP/1.1 201 Created Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER Access-Control-Allow-Origin: * Location: http://127.0.0.1:2113/streams/newstream/1 Content-Type: text/plain; charset: utf-8 Server: Mono-HTTPAPI/1.0 Date: Fri, 28 Jun 2013 12:32:18 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100 Data-only events Version 3.7.0 of Event Store added support for the application/octet-stream content type to support data-only binary events. When creating these events, you need to provide the ES-EventType and ES-EventId headers and cannot have metadata associated with the event. In the example below SGVsbG8gV29ybGQ= is the data you POST to the stream: Request Response curl -i -d \"SGVsbG8gV29ybGQ=\" \"http://127.0.0.1:2113/streams/newstream\" -H \"Content-Type:application/octet-stream\" -H \"ES-EventType:rawDataType\" -H \"ES-EventId:eeccf3ce-4f54-409d-8870-b35dd836cca6\" HTTP/1.1 201 Created Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTo, ES-ExpectedVersion Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position Location: http://127.0.0.1:2113/streams/newstream/0 Content-Type: text/plain; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Mon, 27 Jun 2016 13:15:27 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100 Expected version header The expected version header represents the version of the stream you expect. For example if you write to a stream at version 1, then you expect it to be at version 1 next time you write. This can allow for optimistic locking when multiple applications are reading/writing to streams. If your expected version is not the current version you receive an HTTP status code of 400. Warning See the idempotency section below, if you post the same event twice it is idempotent and won't return a version error. First write an event to a stream, setting a version: [ { \"eventId\": \"fbf4b1a1-b4a3-4dfe-a01f-ec52c34e16e4\", \"eventType\": \"event-type\", \"data\": { \"a\": \"1\" } } ] Download Request Response curl -i -d @event-version.json \"http://127.0.0.1:2113/streams/newstream\" -H \"Content-Type:application/vnd.eventstore.events+json\" -H \"ES-CurrentVersion: 0\" HTTP/1.1 201 Created Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Location: http://127.0.0.1:2113/streams/newstream/2 Content-Type: text/plain; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Tue, 14 Aug 2018 10:02:08 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100 If you now write to the stream with the incorrect version, you receive an HTTP status code 400 error. Request Response curl -i -d @event-version.json \"http://127.0.0.1:2113/streams/newstream\" -H \"Content-Type:application/vnd.eventstore.events+json\" -H \"ES-ExpectedVersion: 3\" HTTP/1.1 400 Wrong expected EventNumber Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion ES-CurrentVersion: 0 Content-Type: text/plain; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Tue, 14 Aug 2018 14:08:44 GMT Content-Length: 0 Connection: close There are special values you can use in the expected version header: -2 states that this write should never conflict and should always succeed. -1 states that the stream should not exist at the time of the writing (this write creates it). 0 states that the stream should exist but should be empty. Idempotency Appends to streams are idempotent based upon the EventId assigned in your post. If you were to re-run the last command it returns the same value again. This is important behaviour as it's how you implement error handling. If you receive a timeout, broken connection, no answer, etc from your HTTP POST then it's your responsibility to retry the post. You must also keep the same UUID that you assigned to the event in the first POST . If you are using the expected version parameter with your post, then Event Store is 100% idempotent. If you use -2 as your expected version value, Event Store does its best to keep events idempotent but cannot assure that everything is fully idempotent and you end up in 'at-least-once' messaging. Read this guide for more details on idempotency."
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Management.MultiStreamMessageWriter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Management.MultiStreamMessageWriter.html",
    "title": "Class MultiStreamMessageWriter | Event Store",
    "keywords": "Class MultiStreamMessageWriter Inheritance System.Object MultiStreamMessageWriter Implements IMultiStreamMessageWriter Namespace : EventStore.Projections.Core.Services.Management Assembly : EventStore.Projections.Core.dll Syntax public sealed class MultiStreamMessageWriter : object, IMultiStreamMessageWriter Constructors MultiStreamMessageWriter(IODispatcher) Declaration public MultiStreamMessageWriter(IODispatcher ioDispatcher) Parameters Type Name EventStore.Core.Helpers.IODispatcher ioDispatcher Methods PublishResponse(String, Guid, Object) Declaration public void PublishResponse(string command, Guid workerId, object body) Parameters Type Name System.String command Guid workerId System.Object body Reset() Declaration public void Reset() Implements IMultiStreamMessageWriter"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.ServerErrorException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.ServerErrorException.html",
    "title": "Class ServerErrorException | Event Store",
    "keywords": "Class ServerErrorException Exception thrown if a server-side error occurs during an operation. Inheritance System.Object System.Exception EventStoreConnectionException ServerErrorException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class ServerErrorException : EventStoreConnectionException, ISerializable Constructors ServerErrorException() Constructs a new instance of ServerErrorException . Declaration public ServerErrorException() ServerErrorException(SerializationInfo, StreamingContext) Constructs a new instance of ServerErrorException . Declaration protected ServerErrorException(SerializationInfo info, StreamingContext context) Parameters Type Name System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context ServerErrorException(String) Constructs a new instance of ServerErrorException . Declaration public ServerErrorException(string message) Parameters Type Name System.String message ServerErrorException(String, Exception) Constructs a new instance of ServerErrorException . Declaration public ServerErrorException(string message, Exception innerException) Parameters Type Name System.String message System.Exception innerException Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.CommittedEventDistributed.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.CommittedEventDistributed.html",
    "title": "Class ReaderSubscriptionMessage.CommittedEventDistributed | Event Store",
    "keywords": "Class ReaderSubscriptionMessage.CommittedEventDistributed Inheritance System.Object EventStore.Core.Messaging.Message ReaderSubscriptionMessage.SubscriptionMessage ReaderSubscriptionMessage.CommittedEventDistributed Inherited Members ReaderSubscriptionMessage.SubscriptionMessage.CorrelationId ReaderSubscriptionMessage.SubscriptionMessage.PreTagged ReaderSubscriptionMessage.SubscriptionMessage.Source EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class CommittedEventDistributed : ReaderSubscriptionMessage.SubscriptionMessage Constructors CommittedEventDistributed(Guid, ResolvedEvent, CheckpointTag) Declaration public CommittedEventDistributed(Guid correlationId, ResolvedEvent data, CheckpointTag preTagged = null) Parameters Type Name Guid correlationId ResolvedEvent data CheckpointTag preTagged CommittedEventDistributed(Guid, ResolvedEvent, Nullable<Int64>, Single, Object, CheckpointTag) Declaration public CommittedEventDistributed(Guid correlationId, ResolvedEvent data, long? safeTransactionFileReaderJoinPosition, float progress, object source = null, CheckpointTag preTagged = null) Parameters Type Name Guid correlationId ResolvedEvent data System.Nullable < System.Int64 > safeTransactionFileReaderJoinPosition System.Single progress System.Object source CheckpointTag preTagged Properties Data Declaration public ResolvedEvent Data { get; } Property Value Type ResolvedEvent MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ReaderSubscriptionMessage.SubscriptionMessage.MsgTypeId Progress Declaration public float Progress { get; } Property Value Type System.Single SafeTransactionFileReaderJoinPosition Declaration public long? SafeTransactionFileReaderJoinPosition { get; } Property Value Type System.Nullable < System.Int64 > Methods Sample(Guid, TFPos, TFPos, String, Int64, String, Int64, Boolean, Guid, String, Boolean, Byte[], Byte[], Nullable<Int64>, Single) Declaration public static ReaderSubscriptionMessage.CommittedEventDistributed Sample(Guid correlationId, TFPos position, TFPos originalPosition, string positionStreamId, long positionSequenceNumber, string eventStreamId, long eventSequenceNumber, bool resolvedLinkTo, Guid eventId, string eventType, bool isJson, byte[] data, byte[] metadata, long? safeTransactionFileReaderJoinPosition, float progress) Parameters Type Name Guid correlationId EventStore.Core.Data.TFPos position EventStore.Core.Data.TFPos originalPosition System.String positionStreamId System.Int64 positionSequenceNumber System.String eventStreamId System.Int64 eventSequenceNumber System.Boolean resolvedLinkTo Guid eventId System.String eventType System.Boolean isJson System.Byte [] data System.Byte [] metadata System.Nullable < System.Int64 > safeTransactionFileReaderJoinPosition System.Single progress Returns Type Description ReaderSubscriptionMessage.CommittedEventDistributed Sample(Guid, TFPos, String, Int64, Boolean, Guid, String, Boolean, Byte[], Byte[], Nullable<DateTime>) Declaration public static ReaderSubscriptionMessage.CommittedEventDistributed Sample(Guid correlationId, TFPos position, string eventStreamId, long eventSequenceNumber, bool resolvedLinkTo, Guid eventId, string eventType, bool isJson, byte[] data, byte[] metadata, DateTime? timestamp = null) Parameters Type Name Guid correlationId EventStore.Core.Data.TFPos position System.String eventStreamId System.Int64 eventSequenceNumber System.Boolean resolvedLinkTo Guid eventId System.String eventType System.Boolean isJson System.Byte [] data System.Byte [] metadata System.Nullable < DateTime > timestamp Returns Type Description ReaderSubscriptionMessage.CommittedEventDistributed"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.FeedPage.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.FeedPage.html",
    "title": "Class FeedReaderMessage.FeedPage | Event Store",
    "keywords": "Class FeedReaderMessage.FeedPage Inheritance System.Object EventStore.Core.Messaging.Message FeedReaderMessage.FeedReaderMessageBase FeedReaderMessage.FeedPage Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages.EventReaders.Feeds Assembly : EventStore.Projections.Core.dll Syntax public sealed class FeedPage : FeedReaderMessage.FeedReaderMessageBase Constructors FeedPage(Guid, FeedReaderMessage.FeedPage.ErrorStatus, TaggedResolvedEvent[], CheckpointTag) Declaration public FeedPage(Guid correlationId, FeedReaderMessage.FeedPage.ErrorStatus error, TaggedResolvedEvent[] events, CheckpointTag lastReaderPosition) Parameters Type Name Guid correlationId FeedReaderMessage.FeedPage.ErrorStatus error TaggedResolvedEvent [] events CheckpointTag lastReaderPosition Fields CorrelationId Declaration public readonly Guid CorrelationId Field Value Type Guid Error Declaration public readonly FeedReaderMessage.FeedPage.ErrorStatus Error Field Value Type FeedReaderMessage.FeedPage.ErrorStatus Events Declaration public readonly TaggedResolvedEvent[] Events Field Value Type TaggedResolvedEvent [] LastReaderPosition Declaration public readonly CheckpointTag LastReaderPosition Field Value Type CheckpointTag Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides FeedReaderMessage.FeedReaderMessageBase.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.html",
    "title": "Class ReaderSubscriptionMessage | Event Store",
    "keywords": "Class ReaderSubscriptionMessage Inheritance System.Object ReaderSubscriptionMessage Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public static class ReaderSubscriptionMessage : object"
  },
  "dotnet-api/code/EventStore.ClientAPI.StreamEventsSlice.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.StreamEventsSlice.html",
    "title": "Class StreamEventsSlice | Event Store",
    "keywords": "Class StreamEventsSlice A stream events slice represents the result of a single read operation to Event Store. Inheritance System.Object StreamEventsSlice Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class StreamEventsSlice Fields Events The events read represented as ResolvedEvent . Declaration public readonly ResolvedEvent[] Events Field Value Type ResolvedEvent [] FromEventNumber The starting point (represented as a sequence number) of the read operation. Declaration public readonly long FromEventNumber Field Value Type System.Int64 IsEndOfStream A boolean representing whether or not this is the end of the stream. Declaration public readonly bool IsEndOfStream Field Value Type System.Boolean LastEventNumber The last event number in the stream. Declaration public readonly long LastEventNumber Field Value Type System.Int64 NextEventNumber The next event number that can be read. Declaration public readonly long NextEventNumber Field Value Type System.Int64 ReadDirection The direction of read request. Declaration public readonly ReadDirection ReadDirection Field Value Type ReadDirection Status The SliceReadStatus representing the status of this read attempt. Declaration public readonly SliceReadStatus Status Field Value Type SliceReadStatus Stream The name of the stream to read. Declaration public readonly string Stream Field Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ICoreProjectionForProcessingPhase.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ICoreProjectionForProcessingPhase.html",
    "title": "Interface ICoreProjectionForProcessingPhase | Event Store",
    "keywords": "Interface ICoreProjectionForProcessingPhase Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public interface ICoreProjectionForProcessingPhase Properties LastProcessedEventPosition Declaration CheckpointTag LastProcessedEventPosition { get; } Property Value Type CheckpointTag Methods CompletePhase() Declaration void CompletePhase() EnsureTickPending() Declaration void EnsureTickPending() SetCurrentCheckpointSuggestedWorkItem(CheckpointSuggestedWorkItem) Declaration void SetCurrentCheckpointSuggestedWorkItem(CheckpointSuggestedWorkItem checkpointSuggestedWorkItem) Parameters Type Name CheckpointSuggestedWorkItem checkpointSuggestedWorkItem SetFaulted(Exception) Declaration void SetFaulted(Exception ex) Parameters Type Name Exception ex SetFaulted(String) Declaration void SetFaulted(string reason) Parameters Type Name System.String reason SetFaulting(String) Declaration void SetFaulting(string reason) Parameters Type Name System.String reason Subscribed() Declaration void Subscribed()"
  },
  "dotnet-api/code/EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.html",
    "title": "Class EventStoreStreamCatchUpSubscription | Event Store",
    "keywords": "Class EventStoreStreamCatchUpSubscription A catch-up subscription to a single stream in the Event Store. Inheritance System.Object EventStoreCatchUpSubscription EventStoreStreamCatchUpSubscription Inherited Members EventStoreCatchUpSubscription.IsSubscribedToAll EventStoreCatchUpSubscription.StreamId EventStoreCatchUpSubscription.SubscriptionName EventStoreCatchUpSubscription.Log EventStoreCatchUpSubscription.Connection EventStoreCatchUpSubscription.ResolveLinkTos EventStoreCatchUpSubscription.UserCredentials EventStoreCatchUpSubscription.ReadBatchSize EventStoreCatchUpSubscription.MaxPushQueueSize EventStoreCatchUpSubscription.EventAppeared EventStoreCatchUpSubscription.Verbose EventStoreCatchUpSubscription.Subscription EventStoreCatchUpSubscription.AllowProcessing EventStoreCatchUpSubscription.ShouldStop EventStoreCatchUpSubscription.Stop(TimeSpan) EventStoreCatchUpSubscription.Stop() EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync() EventStoreCatchUpSubscription.EnqueuePushedEvent(EventStoreSubscription, ResolvedEvent) EventStoreCatchUpSubscription.ServerSubscriptionDropped(EventStoreSubscription, SubscriptionDropReason, Exception) EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification(SubscriptionDropReason, Exception) EventStoreCatchUpSubscription.EnsureProcessingPushQueue() EventStoreCatchUpSubscription.EnqueueAction(Func<Task>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class EventStoreStreamCatchUpSubscription : EventStoreCatchUpSubscription Properties LastProcessedEventNumber The last event number processed on the subscription. Declaration public long LastProcessedEventNumber { get; } Property Value Type System.Int64 Methods LiveProcessingStarted(EventStoreCatchUpSubscription, Position) The callback invoked when the subscription switches to push notifications. Declaration protected override Task LiveProcessingStarted(EventStoreCatchUpSubscription eventStoreCatchUpSubscription, Position lastPosition) Parameters Type Name EventStoreCatchUpSubscription eventStoreCatchUpSubscription Position lastPosition Returns Type Description System.Threading.Tasks.Task Overrides EventStoreCatchUpSubscription.LiveProcessingStarted(EventStoreCatchUpSubscription, Position) ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>) Read events until the given event number async. Declaration protected override Task<Position> ReadEventsTillAsync(IEventStoreConnection connection, bool resolveLinkTos, UserCredentials userCredentials, long? lastCommitPosition, long? lastEventNumber) Parameters Type Name IEventStoreConnection connection System.Boolean resolveLinkTos UserCredentials userCredentials System.Nullable < System.Int64 > lastCommitPosition System.Nullable < System.Int64 > lastEventNumber Returns Type Description System.Threading.Tasks.Task < Position > Overrides EventStoreCatchUpSubscription.ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>) SubscribeToStreamAsync() Subscribes to the stream. Declaration protected override Task SubscribeToStreamAsync() Returns Type Description System.Threading.Tasks.Task Overrides EventStoreCatchUpSubscription.SubscribeToStreamAsync() TryProcessAsync(ResolvedEvent) Try to process a single ResolvedEvent . Declaration protected override Task TryProcessAsync(ResolvedEvent e) Parameters Type Name ResolvedEvent e Returns Type Description System.Threading.Tasks.Task Overrides EventStoreCatchUpSubscription.TryProcessAsync(ResolvedEvent)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.IQuerySources.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.IQuerySources.html",
    "title": "Interface IQuerySources | Event Store",
    "keywords": "Interface IQuerySources Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public interface IQuerySources Properties AllEvents Declaration bool AllEvents { get; } Property Value Type System.Boolean AllStreams Declaration bool AllStreams { get; } Property Value Type System.Boolean ByCustomPartitions Declaration bool ByCustomPartitions { get; } Property Value Type System.Boolean ByStreams Declaration bool ByStreams { get; } Property Value Type System.Boolean Categories Declaration string[] Categories { get; } Property Value Type System.String [] DefinesFold Declaration bool DefinesFold { get; } Property Value Type System.Boolean DefinesStateTransform Declaration bool DefinesStateTransform { get; } Property Value Type System.Boolean Events Declaration string[] Events { get; } Property Value Type System.String [] HandlesDeletedNotifications Declaration bool HandlesDeletedNotifications { get; } Property Value Type System.Boolean IncludeLinksOption Declaration bool IncludeLinksOption { get; } Property Value Type System.Boolean IsBiState Declaration bool IsBiState { get; } Property Value Type System.Boolean LimitingCommitPosition Declaration long? LimitingCommitPosition { get; } Property Value Type System.Nullable < System.Int64 > PartitionResultStreamNamePatternOption Declaration string PartitionResultStreamNamePatternOption { get; } Property Value Type System.String ProcessingLagOption Declaration int? ProcessingLagOption { get; } Property Value Type System.Nullable < System.Int32 > ProducesResults Declaration bool ProducesResults { get; } Property Value Type System.Boolean ReorderEventsOption Declaration bool ReorderEventsOption { get; } Property Value Type System.Boolean ResultStreamNameOption Declaration string ResultStreamNameOption { get; } Property Value Type System.String Streams Declaration string[] Streams { get; } Property Value Type System.String [] Extension Methods QuerySourcesExtensions.HasStreams(IQuerySources) QuerySourcesExtensions.HasCategories(IQuerySources) QuerySourcesExtensions.HasEvents(IQuerySources)"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.ProjectionCommandConflictException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.ProjectionCommandConflictException.html",
    "title": "Class ProjectionCommandConflictException | Event Store",
    "keywords": "Class ProjectionCommandConflictException Exception thrown if a projection command fails. Inheritance System.Object System.Exception EventStoreConnectionException ProjectionCommandFailedException ProjectionCommandConflictException Implements System.Runtime.Serialization.ISerializable Inherited Members ProjectionCommandFailedException.HttpStatusCode System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class ProjectionCommandConflictException : ProjectionCommandFailedException, ISerializable Constructors ProjectionCommandConflictException() Constructs a new ProjectionCommandFailedException . Declaration public ProjectionCommandConflictException() ProjectionCommandConflictException(Int32, String) Constructs a new ProjectionCommandFailedException . Declaration public ProjectionCommandConflictException(int httpStatusCode, string message) Parameters Type Name System.Int32 httpStatusCode System.String message ProjectionCommandConflictException(SerializationInfo, StreamingContext) Constructs a new ProjectionCommandFailedException . Declaration protected ProjectionCommandConflictException(SerializationInfo info, StreamingContext context) Parameters Type Name System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context ProjectionCommandConflictException(String, Exception) Constructs a new ProjectionCommandFailedException . Declaration public ProjectionCommandConflictException(string message, Exception innerException) Parameters Type Name System.String message System.Exception innerException Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Internal.Deleted.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Internal.Deleted.html",
    "title": "Class ProjectionManagementMessage.Internal.Deleted | Event Store",
    "keywords": "Class ProjectionManagementMessage.Internal.Deleted Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Internal.Deleted Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Deleted : Message Constructors Deleted(String, Guid) Declaration public Deleted(string name, Guid id) Parameters Type Name System.String name Guid id Properties Id Declaration public Guid Id { get; } Property Value Type Guid MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.EventReaders.Feeds.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.EventReaders.Feeds.html",
    "title": "Namespace EventStore.Projections.Core.EventReaders.Feeds | Event Store",
    "keywords": "Namespace EventStore.Projections.Core.EventReaders.Feeds Classes FeedReader FeedReaderService"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.PostBatchCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.PostBatchCommand.html",
    "title": "Class PostBatchCommand | Event Store",
    "keywords": "Class PostBatchCommand Inheritance System.Object PostBatchCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class PostBatchCommand : object Fields Projections Declaration public PostBatchCommand.ProjectionPost[] Projections Field Value Type PostBatchCommand.ProjectionPost [] RunAs Declaration public SerializedRunAs RunAs Field Value Type SerializedRunAs"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.IProjectionCheckpointManager.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.IProjectionCheckpointManager.html",
    "title": "Interface IProjectionCheckpointManager | Event Store",
    "keywords": "Interface IProjectionCheckpointManager Inherited Members EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.ReadyForCheckpoint>.Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint) EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.RestartRequested>.Handle(CoreProjectionProcessingMessage.RestartRequested) EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.Failed>.Handle(CoreProjectionProcessingMessage.Failed) Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public interface IProjectionCheckpointManager : IHandle<CoreProjectionProcessingMessage.ReadyForCheckpoint>, IHandle<CoreProjectionProcessingMessage.RestartRequested>, IHandle<CoreProjectionProcessingMessage.Failed>"
  },
  "dotnet-api/code/EventStore.ClientAPI.ClientErrorEventArgs.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ClientErrorEventArgs.html",
    "title": "Class ClientErrorEventArgs | Event Store",
    "keywords": "Class ClientErrorEventArgs Event Arguments for the event raised when an error occurs on an IEventStoreConnection . Inheritance System.Object System.EventArgs ClientErrorEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class ClientErrorEventArgs : EventArgs Constructors ClientErrorEventArgs(IEventStoreConnection, Exception) Constructs a new instance of ClientErrorEventArgs . Declaration public ClientErrorEventArgs(IEventStoreConnection connection, Exception exception) Parameters Type Name IEventStoreConnection connection System.Exception exception Properties Connection The IEventStoreConnection responsible for raising the event. Declaration public IEventStoreConnection Connection { get; } Property Value Type IEventStoreConnection Exception The thrown exception, if one was raised. Declaration public Exception Exception { get; } Property Value Type System.Exception"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProcessingStrategySelector.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProcessingStrategySelector.html",
    "title": "Class ProcessingStrategySelector | Event Store",
    "keywords": "Class ProcessingStrategySelector Inheritance System.Object ProcessingStrategySelector Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class ProcessingStrategySelector : object Constructors ProcessingStrategySelector(ReaderSubscriptionDispatcher) Declaration public ProcessingStrategySelector(ReaderSubscriptionDispatcher subscriptionDispatcher) Parameters Type Name ReaderSubscriptionDispatcher subscriptionDispatcher Methods CreateProjectionProcessingStrategy(String, ProjectionVersion, ProjectionNamesBuilder, IQuerySources, ProjectionConfig, IProjectionStateHandler, String, String) Declaration public ProjectionProcessingStrategy CreateProjectionProcessingStrategy(string name, ProjectionVersion projectionVersion, ProjectionNamesBuilder namesBuilder, IQuerySources sourceDefinition, ProjectionConfig projectionConfig, IProjectionStateHandler stateHandler, string handlerType, string query) Parameters Type Name System.String name ProjectionVersion projectionVersion ProjectionNamesBuilder namesBuilder IQuerySources sourceDefinition ProjectionConfig projectionConfig IProjectionStateHandler stateHandler System.String handlerType System.String query Returns Type Description ProjectionProcessingStrategy"
  },
  "dotnet-api/code/EventStore.ClientAPI.StreamPosition.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.StreamPosition.html",
    "title": "Class StreamPosition | Event Store",
    "keywords": "Class StreamPosition Constants for stream positions Inheritance System.Object StreamPosition Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public static class StreamPosition Fields End The last event in the stream. Declaration public const int End = -1 Field Value Type System.Int32 Start The first event in a stream Declaration public const int Start = 0 Field Value Type System.Int32"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedStreamsTracker.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedStreamsTracker.html",
    "title": "Class EmittedStreamsTracker | Event Store",
    "keywords": "Class EmittedStreamsTracker Inheritance System.Object EmittedStreamsTracker Implements IEmittedStreamsTracker Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class EmittedStreamsTracker : object, IEmittedStreamsTracker Constructors EmittedStreamsTracker(IODispatcher, ProjectionConfig, ProjectionNamesBuilder) Declaration public EmittedStreamsTracker(IODispatcher ioDispatcher, ProjectionConfig projectionConfig, ProjectionNamesBuilder projectionNamesBuilder) Parameters Type Name EventStore.Core.Helpers.IODispatcher ioDispatcher ProjectionConfig projectionConfig ProjectionNamesBuilder projectionNamesBuilder Methods Initialize() Declaration public void Initialize() TrackEmittedStream(EmittedEvent[]) Declaration public void TrackEmittedStream(EmittedEvent[] emittedEvents) Parameters Type Name EmittedEvent [] emittedEvents Implements IEmittedStreamsTracker"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.NotAuthorized.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.NotAuthorized.html",
    "title": "Class ProjectionManagementMessage.NotAuthorized | Event Store",
    "keywords": "Class ProjectionManagementMessage.NotAuthorized Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.OperationFailed ProjectionManagementMessage.NotAuthorized Inherited Members ProjectionManagementMessage.OperationFailed.Reason EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class NotAuthorized : ProjectionManagementMessage.OperationFailed Constructors NotAuthorized() Declaration public NotAuthorized() Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ProjectionManagementMessage.OperationFailed.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ReaderSubscriptionBase.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ReaderSubscriptionBase.html",
    "title": "Class ReaderSubscriptionBase | Event Store",
    "keywords": "Class ReaderSubscriptionBase Inheritance System.Object ReaderSubscriptionBase EventReorderingReaderSubscription ReaderSubscription Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class ReaderSubscriptionBase : object Constructors ReaderSubscriptionBase(IPublisher, Guid, CheckpointTag, IReaderStrategy, ITimeProvider, Nullable<Int64>, Nullable<Int32>, Int32, Boolean, Nullable<Int32>) Declaration protected ReaderSubscriptionBase(IPublisher publisher, Guid subscriptionId, CheckpointTag from, IReaderStrategy readerStrategy, ITimeProvider timeProvider, long? checkpointUnhandledBytesThreshold, int? checkpointProcessedEventsThreshold, int checkpointAfterMs, bool stopOnEof, int? stopAfterNEvents) Parameters Type Name EventStore.Core.Bus.IPublisher publisher Guid subscriptionId CheckpointTag from IReaderStrategy readerStrategy EventStore.Core.Services.TimerService.ITimeProvider timeProvider System.Nullable < System.Int64 > checkpointUnhandledBytesThreshold System.Nullable < System.Int32 > checkpointProcessedEventsThreshold System.Int32 checkpointAfterMs System.Boolean stopOnEof System.Nullable < System.Int32 > stopAfterNEvents Fields _eventFilter Declaration protected readonly EventFilter _eventFilter Field Value Type EventFilter _positionTagger Declaration protected readonly PositionTagger _positionTagger Field Value Type PositionTagger _positionTracker Declaration protected readonly PositionTracker _positionTracker Field Value Type PositionTracker _tag Declaration protected string _tag Field Value Type System.String Properties SubscriptionId Declaration public Guid SubscriptionId { get; } Property Value Type Guid Tag Declaration public string Tag { get; } Property Value Type System.String Methods CreatePausedEventReader(IPublisher, IODispatcher, Guid) Declaration public IEventReader CreatePausedEventReader(IPublisher publisher, IODispatcher ioDispatcher, Guid eventReaderId) Parameters Type Name EventStore.Core.Bus.IPublisher publisher EventStore.Core.Helpers.IODispatcher ioDispatcher Guid eventReaderId Returns Type Description IEventReader EofReached() Declaration protected virtual void EofReached() Handle(ReaderSubscriptionMessage.EventReaderEof) Declaration public void Handle(ReaderSubscriptionMessage.EventReaderEof message) Parameters Type Name ReaderSubscriptionMessage.EventReaderEof message Handle(ReaderSubscriptionMessage.EventReaderNotAuthorized) Declaration public void Handle(ReaderSubscriptionMessage.EventReaderNotAuthorized message) Parameters Type Name ReaderSubscriptionMessage.EventReaderNotAuthorized message Handle(ReaderSubscriptionMessage.EventReaderPartitionEof) Declaration public void Handle(ReaderSubscriptionMessage.EventReaderPartitionEof message) Parameters Type Name ReaderSubscriptionMessage.EventReaderPartitionEof message Handle(ReaderSubscriptionMessage.EventReaderStarting) Declaration public void Handle(ReaderSubscriptionMessage.EventReaderStarting message) Parameters Type Name ReaderSubscriptionMessage.EventReaderStarting message ProcessOne(ReaderSubscriptionMessage.CommittedEventDistributed) Declaration protected void ProcessOne(ReaderSubscriptionMessage.CommittedEventDistributed message) Parameters Type Name ReaderSubscriptionMessage.CommittedEventDistributed message PublishPartitionDeleted(String, CheckpointTag) Declaration protected void PublishPartitionDeleted(string partition, CheckpointTag deletePosition) Parameters Type Name System.String partition CheckpointTag deletePosition"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Management.ResponseWriter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Management.ResponseWriter.html",
    "title": "Class ResponseWriter | Event Store",
    "keywords": "Class ResponseWriter Inheritance System.Object ResponseWriter Implements IResponseWriter Namespace : EventStore.Projections.Core.Services.Management Assembly : EventStore.Projections.Core.dll Syntax public sealed class ResponseWriter : object, IResponseWriter Constructors ResponseWriter(IODispatcher) Declaration public ResponseWriter(IODispatcher ioDispatcher) Parameters Type Name EventStore.Core.Helpers.IODispatcher ioDispatcher Methods PublishCommand(String, Object) Declaration public void PublishCommand(string command, object body) Parameters Type Name System.String command System.Object body Reset() Declaration public void Reset() Implements IResponseWriter"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedEvent.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedEvent.html",
    "title": "Class EmittedEvent | Event Store",
    "keywords": "Class EmittedEvent Inheritance System.Object EmittedEvent EmittedDataEvent EmittedLinkTo EmittedLinkToWithRecategorization Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public abstract class EmittedEvent : object Constructors EmittedEvent(String, Guid, String, CheckpointTag, CheckpointTag, Action<Int64>) Declaration protected EmittedEvent(string streamId, Guid eventId, string eventType, CheckpointTag causedByTag, CheckpointTag expectedTag, Action<long> onCommitted = null) Parameters Type Name System.String streamId Guid eventId System.String eventType CheckpointTag causedByTag CheckpointTag expectedTag Action < System.Int64 > onCommitted Fields EventId Declaration public readonly Guid EventId Field Value Type Guid EventType Declaration public readonly string EventType Field Value Type System.String StreamId Declaration public readonly string StreamId Field Value Type System.String Properties CausedBy Declaration public Guid CausedBy { get; } Property Value Type Guid CausedByTag Declaration public CheckpointTag CausedByTag { get; } Property Value Type CheckpointTag CorrelationId Declaration public string CorrelationId { get; } Property Value Type System.String Data Declaration public abstract string Data { get; } Property Value Type System.String ExpectedTag Declaration public CheckpointTag ExpectedTag { get; } Property Value Type CheckpointTag IsJson Declaration public abstract bool IsJson { get; } Property Value Type System.Boolean OnCommitted Declaration public Action<long> OnCommitted { get; } Property Value Type Action < System.Int64 > Methods ExtraMetaData() Declaration public virtual IEnumerable<KeyValuePair<string, string>> ExtraMetaData() Returns Type Description IEnumerable < KeyValuePair < System.String , System.String >> IsReady() Declaration public abstract bool IsReady() Returns Type Description System.Boolean SetCausedBy(Guid) Declaration public void SetCausedBy(Guid causedBy) Parameters Type Name Guid causedBy SetCorrelationId(String) Declaration public void SetCorrelationId(string correlationId) Parameters Type Name System.String correlationId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderCoreServiceMessage.StopReader.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderCoreServiceMessage.StopReader.html",
    "title": "Class ReaderCoreServiceMessage.StopReader | Event Store",
    "keywords": "Class ReaderCoreServiceMessage.StopReader Inheritance System.Object EventStore.Core.Messaging.Message ReaderCoreServiceMessage.StopReader Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class StopReader : Message Constructors StopReader(Guid) Declaration public StopReader(Guid queueId) Parameters Type Name Guid queueId Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId QueueId Declaration public Guid QueueId { get; } Property Value Type Guid"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Unsubscribe.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Unsubscribe.html",
    "title": "Class ReaderSubscriptionManagement.Unsubscribe | Event Store",
    "keywords": "Class ReaderSubscriptionManagement.Unsubscribe Inheritance System.Object EventStore.Core.Messaging.Message ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage ReaderSubscriptionManagement.Unsubscribe Inherited Members ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage.SubscriptionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Unsubscribe : ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage Constructors Unsubscribe(Guid) Declaration public Unsubscribe(Guid subscriptionId) Parameters Type Name Guid subscriptionId Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.NotFound.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.NotFound.html",
    "title": "Class ProjectionManagementMessage.NotFound | Event Store",
    "keywords": "Class ProjectionManagementMessage.NotFound Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.OperationFailed ProjectionManagementMessage.NotFound Inherited Members ProjectionManagementMessage.OperationFailed.Reason EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class NotFound : ProjectionManagementMessage.OperationFailed Constructors NotFound() Declaration public NotFound() Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ProjectionManagementMessage.OperationFailed.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CheckpointTagVersion.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CheckpointTagVersion.html",
    "title": "Struct CheckpointTagVersion | Event Store",
    "keywords": "Struct CheckpointTagVersion Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public struct CheckpointTagVersion Fields ExtraMetadata Declaration public Dictionary<string, JToken> ExtraMetadata Field Value Type Dictionary < System.String , JToken > SystemVersion Declaration public int SystemVersion Field Value Type System.Int32 Tag Declaration public CheckpointTag Tag Field Value Type CheckpointTag Version Declaration public ProjectionVersion Version Field Value Type ProjectionVersion Methods AdjustBy(PositionTagger, ProjectionVersion) Declaration public CheckpointTag AdjustBy(PositionTagger tagger, ProjectionVersion version) Parameters Type Name PositionTagger tagger ProjectionVersion version Returns Type Description CheckpointTag Extension Methods EnumExtensions.EnumValueName<T>(T)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionSubsystemMessage.SubsystemRestarting.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionSubsystemMessage.SubsystemRestarting.html",
    "title": "Class ProjectionSubsystemMessage.SubsystemRestarting | Event Store",
    "keywords": "Class ProjectionSubsystemMessage.SubsystemRestarting Inheritance System.Object EventStore.Core.Messaging.Message ProjectionSubsystemMessage.SubsystemRestarting Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class SubsystemRestarting : Message Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.ProjectionWorkerStarted.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.ProjectionWorkerStarted.html",
    "title": "Class CoreProjectionStatusMessage.ProjectionWorkerStarted | Event Store",
    "keywords": "Class CoreProjectionStatusMessage.ProjectionWorkerStarted Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionStatusMessage.ProjectionWorkerStarted Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionWorkerStarted : Message Constructors ProjectionWorkerStarted(Guid) Declaration public ProjectionWorkerStarted(Guid workerId) Parameters Type Name Guid workerId Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId WorkerId Declaration public Guid WorkerId { get; } Property Value Type Guid"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.html",
    "title": "Namespace EventStore.Projections.Core.Messages | Event Store",
    "keywords": "Namespace EventStore.Projections.Core.Messages Classes CoreProjectionCheckpointWriterMessage CoreProjectionCheckpointWriterMessage.CheckpointWritten CoreProjectionCheckpointWriterMessage.RestartRequested CoreProjectionManagementControlMessage CoreProjectionManagementMessage CoreProjectionManagementMessage.CreateAndPrepare CoreProjectionManagementMessage.CreatePrepared CoreProjectionManagementMessage.Dispose CoreProjectionManagementMessage.GetResult CoreProjectionManagementMessage.GetState CoreProjectionManagementMessage.Kill CoreProjectionManagementMessage.LoadStopped CoreProjectionManagementMessage.Start CoreProjectionManagementMessage.Stop CoreProjectionManagementMessageBase CoreProjectionStatusMessage CoreProjectionStatusMessage.CoreProjectionStatusMessageBase CoreProjectionStatusMessage.DataReportBase CoreProjectionStatusMessage.Faulted CoreProjectionStatusMessage.Prepared CoreProjectionStatusMessage.ProjectionWorkerStarted CoreProjectionStatusMessage.ResultReport CoreProjectionStatusMessage.Started CoreProjectionStatusMessage.StateReport CoreProjectionStatusMessage.StatisticsReport CoreProjectionStatusMessage.Stopped CoreProjectionStatusMessage.Suspended EventReaderSubscriptionMessage EventReaderSubscriptionMessage.CheckpointSuggested A CheckpointSuggested message is sent to core projection to allow bookmarking a position that can be used to restore the projection processing (typically an event at this position does not satisfy projection filter) EventReaderSubscriptionMessage.CommittedEventReceived EventReaderSubscriptionMessage.EofReached EventReaderSubscriptionMessage.Failed EventReaderSubscriptionMessage.NotAuthorized EventReaderSubscriptionMessage.PartitionDeleted NOTEL the PartitionDeleted may appear out-of-order and is not guaranteed to appear at the same sequence position in a recovery EventReaderSubscriptionMessage.PartitionEofReached EventReaderSubscriptionMessage.ProgressChanged EventReaderSubscriptionMessage.ReaderAssignedReader EventReaderSubscriptionMessage.SubscriptionStarted EventReaderSubscriptionMessageBase ProjectionCoreServiceMessage ProjectionCoreServiceMessage.CoreTick ProjectionCoreServiceMessage.StartCore ProjectionCoreServiceMessage.StopCore ProjectionCoreServiceMessage.StopCoreTimeout ProjectionCoreServiceMessage.SubComponentStarted ProjectionCoreServiceMessage.SubComponentStopped ProjectionManagementMessage ProjectionManagementMessage.Command ProjectionManagementMessage.Command.Abort ProjectionManagementMessage.Command.ControlMessage ProjectionManagementMessage.Command.Delete ProjectionManagementMessage.Command.Disable ProjectionManagementMessage.Command.Enable ProjectionManagementMessage.Command.GetConfig ProjectionManagementMessage.Command.GetQuery ProjectionManagementMessage.Command.GetResult ProjectionManagementMessage.Command.GetState ProjectionManagementMessage.Command.GetStatistics ProjectionManagementMessage.Command.Post ProjectionManagementMessage.Command.PostBatch ProjectionManagementMessage.Command.PostBatch.ProjectionPost ProjectionManagementMessage.Command.Reset ProjectionManagementMessage.Command.SetRunAs ProjectionManagementMessage.Command.UpdateConfig ProjectionManagementMessage.Command.UpdateQuery ProjectionManagementMessage.Conflict ProjectionManagementMessage.Internal ProjectionManagementMessage.Internal.CleanupExpired ProjectionManagementMessage.Internal.Deleted ProjectionManagementMessage.Internal.ReadTimeout ProjectionManagementMessage.Internal.RegularTimeout ProjectionManagementMessage.NotAuthorized ProjectionManagementMessage.NotFound ProjectionManagementMessage.OperationFailed ProjectionManagementMessage.ProjectionConfig ProjectionManagementMessage.ProjectionDataBase ProjectionManagementMessage.ProjectionQuery ProjectionManagementMessage.ProjectionResult ProjectionManagementMessage.ProjectionState ProjectionManagementMessage.ReaderReady ProjectionManagementMessage.RunAs ProjectionManagementMessage.Starting ProjectionManagementMessage.Statistics ProjectionManagementMessage.Updated ProjectionSubsystemMessage ProjectionSubsystemMessage.ComponentStarted ProjectionSubsystemMessage.ComponentStopped ProjectionSubsystemMessage.InvalidSubsystemRestart ProjectionSubsystemMessage.RestartSubsystem ProjectionSubsystemMessage.StartComponents ProjectionSubsystemMessage.StopComponents ProjectionSubsystemMessage.SubsystemRestarting QuerySourcesDefinition QuerySourcesDefinitionOptions QuerySourcesExtensions ReaderCoreServiceMessage ReaderCoreServiceMessage.StartReader ReaderCoreServiceMessage.StopReader ReaderSubscriptionManagement ReaderSubscriptionManagement.Pause ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage ReaderSubscriptionManagement.Resume ReaderSubscriptionManagement.Subscribe ReaderSubscriptionManagement.Unsubscribe ReaderSubscriptionMessage ReaderSubscriptionMessage.CommittedEventDistributed ReaderSubscriptionMessage.EventReaderEof ReaderSubscriptionMessage.EventReaderIdle ReaderSubscriptionMessage.EventReaderNotAuthorized ReaderSubscriptionMessage.EventReaderPartitionDeleted ReaderSubscriptionMessage.EventReaderPartitionEof ReaderSubscriptionMessage.EventReaderStarting ReaderSubscriptionMessage.Faulted ReaderSubscriptionMessage.SubscriptionMessage Interfaces ICoreProjection IEmittedStreamContainer IProjectionCheckpointManager IQuerySources Enums ProjectionManagementMessage.Command.SetRunAs.SetRemove"
  },
  "dotnet-api/code/EventStore.ClientAPI.Projections.ProjectionsManager.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Projections.ProjectionsManager.html",
    "title": "Class ProjectionsManager | Event Store",
    "keywords": "Class ProjectionsManager API for managing projections in the Event Store through C# code. Communicates with the Event Store over the RESTful API. Inheritance System.Object ProjectionsManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI.Projections Assembly : EventStore.ClientAPI.dll Syntax public class ProjectionsManager Constructors ProjectionsManager(ILogger, EndPoint, TimeSpan, HttpMessageHandler, String) Creates a new instance of ProjectionsManager . Declaration public ProjectionsManager(ILogger log, EndPoint httpEndPoint, TimeSpan operationTimeout, HttpMessageHandler httpMessageHandler = null, string httpSchema = \"http\") Parameters Type Name ILogger log System.Net.EndPoint httpEndPoint System.TimeSpan operationTimeout System.Net.Http.HttpMessageHandler httpMessageHandler System.String httpSchema Methods AbortAsync(String, UserCredentials) Asynchronously disables a projection. Declaration public Task AbortAsync(string name, UserCredentials userCredentials = null) Parameters Type Name System.String name UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task A task representing the operation. CreateContinuousAsync(String, String, UserCredentials) Asynchronously creates a continuous projection. Declaration public Task CreateContinuousAsync(string name, string query, UserCredentials userCredentials = null) Parameters Type Name System.String name System.String query UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task CreateContinuousAsync(String, String, Boolean, UserCredentials) Asynchronously creates a continuous projection. Declaration public Task CreateContinuousAsync(string name, string query, bool trackEmittedStreams, UserCredentials userCredentials = null) Parameters Type Name System.String name System.String query System.Boolean trackEmittedStreams UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task CreateOneTimeAsync(String, UserCredentials) Asynchronously creates a one-time query. Declaration public Task CreateOneTimeAsync(string query, UserCredentials userCredentials = null) Parameters Type Name System.String query UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task CreateTransientAsync(String, String, UserCredentials) Asynchronously creates a one-time query. Declaration public Task CreateTransientAsync(string name, string query, UserCredentials userCredentials = null) Parameters Type Name System.String name System.String query UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task DeleteAsync(String, UserCredentials) Asynchronously deletes a projection Declaration public Task DeleteAsync(string name, UserCredentials userCredentials = null) Parameters Type Name System.String name UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task A task representing the operation. DeleteAsync(String, Boolean, UserCredentials) Asynchronously deletes a projection Declaration public Task DeleteAsync(string name, bool deleteEmittedStreams, UserCredentials userCredentials = null) Parameters Type Name System.String name System.Boolean deleteEmittedStreams UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task A task representing the operation. DisableAsync(String, UserCredentials) Asynchronously aborts and disables a projection without writing a checkpoint. Declaration public Task DisableAsync(string name, UserCredentials userCredentials = null) Parameters Type Name System.String name UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task A task representing the operation. EnableAsync(String, UserCredentials) Asynchronously enables a projection Declaration public Task EnableAsync(string name, UserCredentials userCredentials = null) Parameters Type Name System.String name UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task A task representing the operation. GetConfigAsync(String, UserCredentials) Asynchronously gets the projection config. Declaration public Task<ProjectionConfig> GetConfigAsync(string name, UserCredentials userCredentials = null) Parameters Type Name System.String name UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < ProjectionConfig > String of JSON containing projection config. GetPartitionResultAsync(String, String, UserCredentials) Asynchronously gets the state of a projection for a specified partition. Declaration public Task<string> GetPartitionResultAsync(string name, string partitionId, UserCredentials userCredentials = null) Parameters Type Name System.String name System.String partitionId UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < System.String > String of JSON containing projection state. GetPartitionStateAsync(String, String, UserCredentials) Asynchronously gets the state of a projection for a specified partition. Declaration public Task<string> GetPartitionStateAsync(string name, string partitionId, UserCredentials userCredentials = null) Parameters Type Name System.String name System.String partitionId UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < System.String > String of JSON containing projection state. GetQueryAsync(String, UserCredentials) Asynchronously gets the status of a query. Declaration public Task<string> GetQueryAsync(string name, UserCredentials userCredentials = null) Parameters Type Name System.String name UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < System.String > String of JSON containing query status. GetResultAsync(String, UserCredentials) Asynchronously gets the state of a projection. Declaration public Task<string> GetResultAsync(string name, UserCredentials userCredentials = null) Parameters Type Name System.String name UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < System.String > String of JSON containing projection state. GetStateAsync(String, UserCredentials) Asynchronously gets the state of a projection. Declaration public Task<string> GetStateAsync(string name, UserCredentials userCredentials = null) Parameters Type Name System.String name UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < System.String > String of JSON containing projection state. GetStatisticsAsync(String, UserCredentials) Asynchronously gets the statistics of a projection. Declaration public Task<string> GetStatisticsAsync(string name, UserCredentials userCredentials = null) Parameters Type Name System.String name UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < System.String > String of JSON containing projection statistics. GetStatusAsync(String, UserCredentials) Asynchronously gets the status of a projection. Declaration public Task<string> GetStatusAsync(string name, UserCredentials userCredentials = null) Parameters Type Name System.String name UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < System.String > String of JSON containing projection status. ListAllAsync(UserCredentials) Asynchronously lists this status of all projections. Declaration public Task<List<ProjectionDetails>> ListAllAsync(UserCredentials userCredentials = null) Parameters Type Name UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.List < ProjectionDetails >> List of all ProjectionDetails items containing projection statuses. ListContinuousAsync(UserCredentials) Synchronously lists this status of all continuous projections. Declaration public Task<List<ProjectionDetails>> ListContinuousAsync(UserCredentials userCredentials = null) Parameters Type Name UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.List < ProjectionDetails >> List of continuous ProjectionDetails items containing projection statuses. ListOneTimeAsync(UserCredentials) Asynchronously lists this status of all one-time projections. Declaration public Task<List<ProjectionDetails>> ListOneTimeAsync(UserCredentials userCredentials = null) Parameters Type Name UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.List < ProjectionDetails >> List of one-time ProjectionDetails items containing projection statuses. ResetAsync(String, UserCredentials) Asynchronously resets a projection Declaration public Task ResetAsync(string name, UserCredentials userCredentials = null) Parameters Type Name System.String name UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task A task representing the operation. UpdateConfigAsync(String, ProjectionConfig, UserCredentials) Asynchronously updates the projection config. Declaration public Task UpdateConfigAsync(string name, ProjectionConfig config, UserCredentials userCredentials = null) Parameters Type Name System.String name ProjectionConfig config UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task UpdateQueryAsync(String, String, UserCredentials) Asynchronously updates the definition of a query. Declaration public Task UpdateQueryAsync(string name, string query, UserCredentials userCredentials = null) Parameters Type Name System.String name System.String query UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task UpdateQueryAsync(String, String, Nullable<Boolean>, UserCredentials) Asynchronously updates the definition of a query. Declaration public Task UpdateQueryAsync(string name, string query, bool? emitEnabled = default(bool? ), UserCredentials userCredentials = null) Parameters Type Name System.String name System.String query System.Nullable < System.Boolean > emitEnabled UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CheckpointTag.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CheckpointTag.html",
    "title": "Class CheckpointTag | Event Store",
    "keywords": "Class CheckpointTag Inheritance System.Object CheckpointTag Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class CheckpointTag : IComparable<CheckpointTag> Fields CatalogPosition Declaration public readonly long CatalogPosition Field Value Type System.Int64 CatalogStream Declaration public readonly string CatalogStream Field Value Type System.String DataPosition Declaration public readonly long DataPosition Field Value Type System.Int64 DataStream Declaration public readonly string DataStream Field Value Type System.String Phase Declaration public readonly int Phase Field Value Type System.Int32 Position Declaration public readonly TFPos Position Field Value Type EventStore.Core.Data.TFPos Streams Declaration public readonly Dictionary<string, long> Streams Field Value Type Dictionary < System.String , System.Int64 > Properties CommitPosition Declaration public long? CommitPosition { get; } Property Value Type System.Nullable < System.Int64 > Completed Declaration public bool Completed { get; } Property Value Type System.Boolean Empty Declaration public static CheckpointTag Empty { get; } Property Value Type CheckpointTag PreparePosition Declaration public long? PreparePosition { get; } Property Value Type System.Nullable < System.Int64 > Methods Check(JsonToken, JsonReader) Declaration public static void Check(JsonToken type, JsonReader reader) Parameters Type Name JsonToken type JsonReader reader Check(Boolean, JsonReader) Declaration public static void Check(bool read, JsonReader reader) Parameters Type Name System.Boolean read JsonReader reader CompareTo(CheckpointTag) Declaration public int CompareTo(CheckpointTag other) Parameters Type Name CheckpointTag other Returns Type Description System.Int32 Equals(CheckpointTag) Declaration protected bool Equals(CheckpointTag other) Parameters Type Name CheckpointTag other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name System.Object obj Returns Type Description System.Boolean FromByStreamPosition(Int32, String, Int64, String, Int64, Int64) Declaration public static CheckpointTag FromByStreamPosition(int phase, string catalogStream, long catalogPosition, string dataStream, long dataPosition, long commitPosition) Parameters Type Name System.Int32 phase System.String catalogStream System.Int64 catalogPosition System.String dataStream System.Int64 dataPosition System.Int64 commitPosition Returns Type Description CheckpointTag FromEventTypeIndexPositions(Int32, TFPos, IDictionary<String, Int64>) Declaration public static CheckpointTag FromEventTypeIndexPositions(int phase, TFPos position, IDictionary<string, long> streams) Parameters Type Name System.Int32 phase EventStore.Core.Data.TFPos position IDictionary < System.String , System.Int64 > streams Returns Type Description CheckpointTag FromJson(JsonReader, ProjectionVersion, Boolean) Declaration public static CheckpointTagVersion FromJson(JsonReader reader, ProjectionVersion current, bool skipStartObject = false) Parameters Type Name JsonReader reader ProjectionVersion current System.Boolean skipStartObject Returns Type Description CheckpointTagVersion FromPhase(Int32, Boolean) Declaration public static CheckpointTag FromPhase(int phase, bool completed) Parameters Type Name System.Int32 phase System.Boolean completed Returns Type Description CheckpointTag FromPosition(Int32, TFPos) Declaration public static CheckpointTag FromPosition(int phase, TFPos position) Parameters Type Name System.Int32 phase EventStore.Core.Data.TFPos position Returns Type Description CheckpointTag FromPosition(Int32, Int64, Int64) Declaration public static CheckpointTag FromPosition(int phase, long commitPosition, long preparePosition) Parameters Type Name System.Int32 phase System.Int64 commitPosition System.Int64 preparePosition Returns Type Description CheckpointTag FromPreparePosition(Int32, Int64) Declaration public static CheckpointTag FromPreparePosition(int phase, long preparePosition) Parameters Type Name System.Int32 phase System.Int64 preparePosition Returns Type Description CheckpointTag FromStreamPosition(Int32, String, Int64) Declaration public static CheckpointTag FromStreamPosition(int phase, string stream, long sequenceNumber) Parameters Type Name System.Int32 phase System.String stream System.Int64 sequenceNumber Returns Type Description CheckpointTag FromStreamPositions(Int32, IDictionary<String, Int64>) Declaration public static CheckpointTag FromStreamPositions(int phase, IDictionary<string, long> streams) Parameters Type Name System.Int32 phase IDictionary < System.String , System.Int64 > streams Returns Type Description CheckpointTag GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 ToJsonBytes(ProjectionVersion, IEnumerable<KeyValuePair<String, JToken>>) Declaration public byte[] ToJsonBytes(ProjectionVersion projectionVersion, IEnumerable<KeyValuePair<string, JToken>> extraMetaData = null) Parameters Type Name ProjectionVersion projectionVersion IEnumerable < KeyValuePair < System.String , JToken >> extraMetaData Returns Type Description System.Byte [] ToJsonRaw(IEnumerable<KeyValuePair<String, JToken>>) Declaration public JRaw ToJsonRaw(IEnumerable<KeyValuePair<string, JToken>> extraMetaData = null) Parameters Type Name IEnumerable < KeyValuePair < System.String , JToken >> extraMetaData Returns Type Description JRaw ToJsonString(ProjectionVersion, IEnumerable<KeyValuePair<String, JToken>>) Declaration public string ToJsonString(ProjectionVersion projectionVersion, IEnumerable<KeyValuePair<string, JToken>> extraMetaData = null) Parameters Type Name ProjectionVersion projectionVersion IEnumerable < KeyValuePair < System.String , JToken >> extraMetaData Returns Type Description System.String ToJsonString(IEnumerable<KeyValuePair<String, JToken>>) Declaration public string ToJsonString(IEnumerable<KeyValuePair<string, JToken>> extraMetaData = null) Parameters Type Name IEnumerable < KeyValuePair < System.String , JToken >> extraMetaData Returns Type Description System.String ToString() Declaration public override string ToString() Returns Type Description System.String UpdateEventTypeIndexPosition(TFPos) Declaration public CheckpointTag UpdateEventTypeIndexPosition(TFPos position) Parameters Type Name EventStore.Core.Data.TFPos position Returns Type Description CheckpointTag UpdateEventTypeIndexPosition(TFPos, String, Int64) Declaration public CheckpointTag UpdateEventTypeIndexPosition(TFPos position, string eventType, long eventSequenceNumber) Parameters Type Name EventStore.Core.Data.TFPos position System.String eventType System.Int64 eventSequenceNumber Returns Type Description CheckpointTag UpdateStreamPosition(String, Int64) Declaration public CheckpointTag UpdateStreamPosition(string streamId, long eventSequenceNumber) Parameters Type Name System.String streamId System.Int64 eventSequenceNumber Returns Type Description CheckpointTag WriteTo(ProjectionVersion, IEnumerable<KeyValuePair<String, JToken>>, JsonWriter) Declaration public void WriteTo(ProjectionVersion projectionVersion, IEnumerable<KeyValuePair<string, JToken>> extraMetaData, JsonWriter jsonWriter) Parameters Type Name ProjectionVersion projectionVersion IEnumerable < KeyValuePair < System.String , JToken >> extraMetaData JsonWriter jsonWriter Operators Equality(CheckpointTag, CheckpointTag) Declaration public static bool operator ==(CheckpointTag left, CheckpointTag right) Parameters Type Name CheckpointTag left CheckpointTag right Returns Type Description System.Boolean GreaterThan(CheckpointTag, CheckpointTag) Declaration public static bool operator>(CheckpointTag left, CheckpointTag right) Parameters Type Name CheckpointTag left CheckpointTag right Returns Type Description System.Boolean GreaterThanOrEqual(CheckpointTag, CheckpointTag) Declaration public static bool operator >=(CheckpointTag left, CheckpointTag right) Parameters Type Name CheckpointTag left CheckpointTag right Returns Type Description System.Boolean Inequality(CheckpointTag, CheckpointTag) Declaration public static bool operator !=(CheckpointTag left, CheckpointTag right) Parameters Type Name CheckpointTag left CheckpointTag right Returns Type Description System.Boolean LessThan(CheckpointTag, CheckpointTag) Declaration public static bool operator <(CheckpointTag left, CheckpointTag right) Parameters Type Name CheckpointTag left CheckpointTag right Returns Type Description System.Boolean LessThanOrEqual(CheckpointTag, CheckpointTag) Declaration public static bool operator <=(CheckpointTag left, CheckpointTag right) Parameters Type Name CheckpointTag left CheckpointTag right Returns Type Description System.Boolean"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Management.ProjectionManagerMessageDispatcher.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Management.ProjectionManagerMessageDispatcher.html",
    "title": "Class ProjectionManagerMessageDispatcher | Event Store",
    "keywords": "Class ProjectionManagerMessageDispatcher Inheritance System.Object ProjectionManagerMessageDispatcher Implements EventStore.Core.Bus.IHandle < CoreProjectionManagementControlMessage > Namespace : EventStore.Projections.Core.Services.Management Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionManagerMessageDispatcher : object, IHandle<CoreProjectionManagementControlMessage> Constructors ProjectionManagerMessageDispatcher(IDictionary<Guid, IPublisher>) Declaration public ProjectionManagerMessageDispatcher(IDictionary<Guid, IPublisher> queueMap) Parameters Type Name IDictionary < Guid , EventStore.Core.Bus.IPublisher > queueMap Methods Handle(CoreProjectionManagementControlMessage) Declaration public void Handle(CoreProjectionManagementControlMessage message) Parameters Type Name CoreProjectionManagementControlMessage message Implements EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.MultiStreamPositionTagger.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.MultiStreamPositionTagger.html",
    "title": "Class MultiStreamPositionTagger | Event Store",
    "keywords": "Class MultiStreamPositionTagger Inheritance System.Object PositionTagger MultiStreamPositionTagger Inherited Members PositionTagger.Phase Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class MultiStreamPositionTagger : PositionTagger Constructors MultiStreamPositionTagger(Int32, String[]) Declaration public MultiStreamPositionTagger(int phase, string[] streams) Parameters Type Name System.Int32 phase System.String [] streams Methods AdjustTag(CheckpointTag) Declaration public override CheckpointTag AdjustTag(CheckpointTag tag) Parameters Type Name CheckpointTag tag Returns Type Description CheckpointTag Overrides PositionTagger.AdjustTag(CheckpointTag) IsCompatible(CheckpointTag) Declaration public override bool IsCompatible(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag Returns Type Description System.Boolean Overrides PositionTagger.IsCompatible(CheckpointTag) IsMessageAfterCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public override bool IsMessageAfterCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.CommittedEventDistributed committedEvent Returns Type Description System.Boolean Overrides PositionTagger.IsMessageAfterCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.CommittedEventDistributed committedEvent Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionDeleted) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.EventReaderPartitionDeleted partitionDeleted) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.EventReaderPartitionDeleted partitionDeleted Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionDeleted) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionEof) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.EventReaderPartitionEof partitionEof) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.EventReaderPartitionEof partitionEof Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionEof) MakeZeroCheckpointTag() Declaration public override CheckpointTag MakeZeroCheckpointTag() Returns Type Description CheckpointTag Overrides PositionTagger.MakeZeroCheckpointTag()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.html",
    "title": "Namespace EventStore.Projections.Core.Services | Event Store",
    "keywords": "Namespace EventStore.Projections.Core.Services Classes ProjectionConfig ProjectionEventTypes ProjectionStateHandlerTestExtensions ProjectionStatistics PublishSubscribeDispatcher<TGuid, TSubscribeRequest, TControlMessageBase, TResponseBase> ReaderSubscriptionDispatcher Interfaces IProjectionCheckpointHandler IProjectionStateHandler ISingletonTimeoutScheduler ISourceDefinitionSource Enums ProjectionMode ReadWrite"
  },
  "dotnet-api/code/EventStore.ClientAPI.StreamAcl.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.StreamAcl.html",
    "title": "Class StreamAcl | Event Store",
    "keywords": "Class StreamAcl Represents an access control list for a stream Inheritance System.Object StreamAcl Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class StreamAcl Constructors StreamAcl(String, String, String, String, String) Creates a new Stream Access Control List Declaration public StreamAcl(string readRole, string writeRole, string deleteRole, string metaReadRole, string metaWriteRole) Parameters Type Name System.String readRole System.String writeRole System.String deleteRole System.String metaReadRole System.String metaWriteRole StreamAcl(String[], String[], String[], String[], String[]) Declaration public StreamAcl(string[] readRoles, string[] writeRoles, string[] deleteRoles, string[] metaReadRoles, string[] metaWriteRoles) Parameters Type Name System.String [] readRoles System.String [] writeRoles System.String [] deleteRoles System.String [] metaReadRoles System.String [] metaWriteRoles Fields DeleteRoles Roles and users permitted to delete the stream Declaration public readonly string[] DeleteRoles Field Value Type System.String [] MetaReadRoles Roles and users permitted to read stream metadata Declaration public readonly string[] MetaReadRoles Field Value Type System.String [] MetaWriteRoles Roles and users permitted to write stream metadata Declaration public readonly string[] MetaWriteRoles Field Value Type System.String [] ReadRoles Roles and users permitted to read the stream Declaration public readonly string[] ReadRoles Field Value Type System.String [] WriteRoles Roles and users permitted to write to the stream Declaration public readonly string[] WriteRoles Field Value Type System.String [] Properties DeleteRole Role or user permitted to delete from the stream Declaration public string DeleteRole { get; } Property Value Type System.String MetaReadRole Role or user permitted to read the stream metadata Declaration public string MetaReadRole { get; } Property Value Type System.String MetaWriteRole Role or user permitted to write to the stream metadata Declaration public string MetaWriteRole { get; } Property Value Type System.String ReadRole Role or user permitted to read the stream Declaration public string ReadRole { get; } Property Value Type System.String WriteRole Role or user permitted to write to the stream Declaration public string WriteRole { get; } Property Value Type System.String Methods ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description System.String A string that represents the current object. Overrides System.Object.ToString()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived.html",
    "title": "Class EventReaderSubscriptionMessage.CommittedEventReceived | Event Store",
    "keywords": "Class EventReaderSubscriptionMessage.CommittedEventReceived Inheritance System.Object EventStore.Core.Messaging.Message EventReaderSubscriptionMessageBase EventReaderSubscriptionMessage.CommittedEventReceived Inherited Members EventReaderSubscriptionMessageBase.CheckpointTag EventReaderSubscriptionMessageBase.Progress EventReaderSubscriptionMessageBase.SubscriptionMessageSequenceNumber EventReaderSubscriptionMessageBase.SubscriptionId EventReaderSubscriptionMessageBase.Source EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class CommittedEventReceived : EventReaderSubscriptionMessageBase Properties Data Declaration public ResolvedEvent Data { get; } Property Value Type ResolvedEvent EventCategory Declaration public string EventCategory { get; } Property Value Type System.String MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventReaderSubscriptionMessageBase.MsgTypeId Methods FromCommittedEventDistributed(ReaderSubscriptionMessage.CommittedEventDistributed, CheckpointTag, String, Guid, Int64) Declaration public static EventReaderSubscriptionMessage.CommittedEventReceived FromCommittedEventDistributed(ReaderSubscriptionMessage.CommittedEventDistributed message, CheckpointTag checkpointTag, string eventCategory, Guid subscriptionId, long subscriptionMessageSequenceNumber) Parameters Type Name ReaderSubscriptionMessage.CommittedEventDistributed message CheckpointTag checkpointTag System.String eventCategory Guid subscriptionId System.Int64 subscriptionMessageSequenceNumber Returns Type Description EventReaderSubscriptionMessage.CommittedEventReceived Sample(ResolvedEvent, CheckpointTag, Guid, Int64) Declaration public static EventReaderSubscriptionMessage.CommittedEventReceived Sample(ResolvedEvent data, CheckpointTag checkpointTag, Guid subscriptionId, long subscriptionMessageSequenceNumber) Parameters Type Name ResolvedEvent data CheckpointTag checkpointTag Guid subscriptionId System.Int64 subscriptionMessageSequenceNumber Returns Type Description EventReaderSubscriptionMessage.CommittedEventReceived Sample(ResolvedEvent, Guid, Int64) Declaration public static EventReaderSubscriptionMessage.CommittedEventReceived Sample(ResolvedEvent data, Guid subscriptionId, long subscriptionMessageSequenceNumber) Parameters Type Name ResolvedEvent data Guid subscriptionId System.Int64 subscriptionMessageSequenceNumber Returns Type Description EventReaderSubscriptionMessage.CommittedEventReceived ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.EventReaders.Feeds.FeedReaderService.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.EventReaders.Feeds.FeedReaderService.html",
    "title": "Class FeedReaderService | Event Store",
    "keywords": "Class FeedReaderService Inheritance System.Object FeedReaderService Implements EventStore.Core.Bus.IHandle < FeedReaderMessage.ReadPage > Namespace : EventStore.Projections.Core.EventReaders.Feeds Assembly : EventStore.Projections.Core.dll Syntax public class FeedReaderService : object, IHandle<FeedReaderMessage.ReadPage> Constructors FeedReaderService(PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase>, ITimeProvider) Declaration public FeedReaderService(PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase> subscriptionDispatcher, ITimeProvider timeProvider) Parameters Type Name PublishSubscribeDispatcher < Guid , ReaderSubscriptionManagement.Subscribe , ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage , EventReaderSubscriptionMessageBase > subscriptionDispatcher EventStore.Core.Services.TimerService.ITimeProvider timeProvider Methods Handle(FeedReaderMessage.ReadPage) Declaration public void Handle(FeedReaderMessage.ReadPage message) Parameters Type Name FeedReaderMessage.ReadPage message Implements EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.ClientAPI.AllCheckpoint.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.AllCheckpoint.html",
    "title": "Class AllCheckpoint | Event Store",
    "keywords": "Class AllCheckpoint This class contains constants to be used when setting up subscriptions using the IEventStoreConnection.SubscribeToAllFrom method on IEventStoreConnection . Inheritance System.Object AllCheckpoint Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public static class AllCheckpoint Fields AllStart Indicates that a catch-up subscription should receive all events in the database. Declaration public static Position? AllStart Field Value Type System.Nullable < Position >"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.ISourceDefinitionSource.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.ISourceDefinitionSource.html",
    "title": "Interface ISourceDefinitionSource | Event Store",
    "keywords": "Interface ISourceDefinitionSource Namespace : EventStore.Projections.Core.Services Assembly : EventStore.Projections.Core.dll Syntax public interface ISourceDefinitionSource Methods GetSourceDefinition() Declaration IQuerySources GetSourceDefinition() Returns Type Description IQuerySources"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.MultiStreamEventFilter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.MultiStreamEventFilter.html",
    "title": "Class MultiStreamEventFilter | Event Store",
    "keywords": "Class MultiStreamEventFilter Inheritance System.Object EventFilter MultiStreamEventFilter Inherited Members EventFilter.Passes(Boolean, String, String, Boolean) EventFilter.PassesDeleteNotification(String) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class MultiStreamEventFilter : EventFilter Constructors MultiStreamEventFilter(HashSet<String>, Boolean, HashSet<String>) Declaration public MultiStreamEventFilter(HashSet<string> streams, bool allEvents, HashSet<string> events) Parameters Type Name HashSet < System.String > streams System.Boolean allEvents HashSet < System.String > events Methods DeletedNotificationPasses(String) Declaration protected override bool DeletedNotificationPasses(string positionStreamId) Parameters Type Name System.String positionStreamId Returns Type Description System.Boolean Overrides EventFilter.DeletedNotificationPasses(String) GetCategory(String) Declaration public override string GetCategory(string positionStreamId) Parameters Type Name System.String positionStreamId Returns Type Description System.String Overrides EventFilter.GetCategory(String) PassesSource(Boolean, String, String) Declaration public override bool PassesSource(bool resolvedFromLinkTo, string positionStreamId, string eventType) Parameters Type Name System.Boolean resolvedFromLinkTo System.String positionStreamId System.String eventType Returns Type Description System.Boolean Overrides EventFilter.PassesSource(Boolean, String, String)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.QueryProcessingStrategy.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.QueryProcessingStrategy.html",
    "title": "Class QueryProcessingStrategy | Event Store",
    "keywords": "Class QueryProcessingStrategy Inheritance System.Object ProjectionProcessingStrategy EventReaderBasedProjectionProcessingStrategy DefaultProjectionProcessingStrategy QueryProcessingStrategy Inherited Members DefaultProjectionProcessingStrategy.CreateFirstProcessingPhase(IPublisher, IPublisher, Guid, PartitionStateCache, Action, CoreProjection, ReaderSubscriptionDispatcher, CheckpointTag, ICoreProjectionCheckpointManager, IReaderStrategy, IResultWriter, IEmittedStreamsTracker) DefaultProjectionProcessingStrategy.CreateStatePartitionSelector() EventReaderBasedProjectionProcessingStrategy._projectionConfig EventReaderBasedProjectionProcessingStrategy._sourceDefinition EventReaderBasedProjectionProcessingStrategy.CreateProcessingPhases(IPublisher, IPublisher, Guid, PartitionStateCache, Action, CoreProjection, ProjectionNamesBuilder, ITimeProvider, IODispatcher, CoreProjectionCheckpointWriter) EventReaderBasedProjectionProcessingStrategy.CreateReaderStrategy(ITimeProvider) EventReaderBasedProjectionProcessingStrategy.GetSourceDefinition() EventReaderBasedProjectionProcessingStrategy.GetRequiresRootPartition() EventReaderBasedProjectionProcessingStrategy.EnrichStatistics(ProjectionStatistics) EventReaderBasedProjectionProcessingStrategy.CreateCheckpointManager(Guid, IPublisher, IODispatcher, ProjectionNamesBuilder, CoreProjectionCheckpointWriter, Boolean, IReaderStrategy) EventReaderBasedProjectionProcessingStrategy.CreateFirstPhaseResultWriter(IEmittedEventWriter, CheckpointTag, ProjectionNamesBuilder) ProjectionProcessingStrategy._name ProjectionProcessingStrategy._projectionVersion ProjectionProcessingStrategy._logger ProjectionProcessingStrategy.Create(Guid, IPublisher, Guid, IPrincipal, IPublisher, IODispatcher, ReaderSubscriptionDispatcher, ITimeProvider) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class QueryProcessingStrategy : DefaultProjectionProcessingStrategy Constructors QueryProcessingStrategy(String, ProjectionVersion, IProjectionStateHandler, ProjectionConfig, IQuerySources, ILogger, ReaderSubscriptionDispatcher) Declaration public QueryProcessingStrategy(string name, ProjectionVersion projectionVersion, IProjectionStateHandler stateHandler, ProjectionConfig projectionConfig, IQuerySources sourceDefinition, ILogger logger, ReaderSubscriptionDispatcher subscriptionDispatcher) Parameters Type Name System.String name ProjectionVersion projectionVersion IProjectionStateHandler stateHandler ProjectionConfig projectionConfig IQuerySources sourceDefinition EventStore.Common.Log.ILogger logger ReaderSubscriptionDispatcher subscriptionDispatcher Methods CreateFirstPhaseResultEmitter(ProjectionNamesBuilder) Declaration protected override IResultEventEmitter CreateFirstPhaseResultEmitter(ProjectionNamesBuilder namingBuilder) Parameters Type Name ProjectionNamesBuilder namingBuilder Returns Type Description IResultEventEmitter Overrides EventReaderBasedProjectionProcessingStrategy.CreateFirstPhaseResultEmitter(ProjectionNamesBuilder) CreateProjectionProcessingPhases(IPublisher, IPublisher, Guid, ProjectionNamesBuilder, PartitionStateCache, CoreProjection, IODispatcher, IProjectionProcessingPhase) Declaration protected override IProjectionProcessingPhase[] CreateProjectionProcessingPhases(IPublisher publisher, IPublisher inputQueue, Guid projectionCorrelationId, ProjectionNamesBuilder namingBuilder, PartitionStateCache partitionStateCache, CoreProjection coreProjection, IODispatcher ioDispatcher, IProjectionProcessingPhase firstPhase) Parameters Type Name EventStore.Core.Bus.IPublisher publisher EventStore.Core.Bus.IPublisher inputQueue Guid projectionCorrelationId ProjectionNamesBuilder namingBuilder PartitionStateCache partitionStateCache CoreProjection coreProjection EventStore.Core.Helpers.IODispatcher ioDispatcher IProjectionProcessingPhase firstPhase Returns Type Description IProjectionProcessingPhase [] Overrides EventReaderBasedProjectionProcessingStrategy.CreateProjectionProcessingPhases(IPublisher, IPublisher, Guid, ProjectionNamesBuilder, PartitionStateCache, CoreProjection, IODispatcher, IProjectionProcessingPhase) GetProducesRunningResults() Declaration public override bool GetProducesRunningResults() Returns Type Description System.Boolean Overrides ProjectionProcessingStrategy.GetProducesRunningResults() GetStopOnEof() Declaration public override bool GetStopOnEof() Returns Type Description System.Boolean Overrides ProjectionProcessingStrategy.GetStopOnEof() GetUseCheckpoints() Declaration public override bool GetUseCheckpoints() Returns Type Description System.Boolean Overrides ProjectionProcessingStrategy.GetUseCheckpoints()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventProcessingProjectionProcessingPhase.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventProcessingProjectionProcessingPhase.html",
    "title": "Class EventProcessingProjectionProcessingPhase | Event Store",
    "keywords": "Class EventProcessingProjectionProcessingPhase Inheritance System.Object EventSubscriptionBasedProjectionProcessingPhase EventProcessingProjectionProcessingPhase Implements IProjectionPhaseCompleter IProjectionPhaseCheckpointManager EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.ProgressChanged > EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.SubscriptionStarted > EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.NotAuthorized > EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.EofReached > EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.CheckpointSuggested > EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.ReaderAssignedReader > EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.Failed > IProjectionProcessingPhase IDisposable EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.GetState > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.GetResult > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.PrerecordedEventsLoaded > EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.CommittedEventReceived > EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.PartitionEofReached > EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.PartitionDeleted > IEventProcessingProjectionPhase IProjectionPhaseStateManager Inherited Members EventSubscriptionBasedProjectionProcessingPhase._publisher EventSubscriptionBasedProjectionProcessingPhase._coreProjection EventSubscriptionBasedProjectionProcessingPhase._projectionCorrelationId EventSubscriptionBasedProjectionProcessingPhase._checkpointManager EventSubscriptionBasedProjectionProcessingPhase._progressResultWriter EventSubscriptionBasedProjectionProcessingPhase._projectionConfig EventSubscriptionBasedProjectionProcessingPhase._projectionName EventSubscriptionBasedProjectionProcessingPhase._logger EventSubscriptionBasedProjectionProcessingPhase._zeroCheckpointTag EventSubscriptionBasedProjectionProcessingPhase._processingQueue EventSubscriptionBasedProjectionProcessingPhase._partitionStateCache EventSubscriptionBasedProjectionProcessingPhase._subscriptionDispatcher EventSubscriptionBasedProjectionProcessingPhase._readerStrategy EventSubscriptionBasedProjectionProcessingPhase._resultWriter EventSubscriptionBasedProjectionProcessingPhase._useCheckpoints EventSubscriptionBasedProjectionProcessingPhase._expectedSubscriptionMessageSequenceNumber EventSubscriptionBasedProjectionProcessingPhase._currentSubscriptionId EventSubscriptionBasedProjectionProcessingPhase._subscribed EventSubscriptionBasedProjectionProcessingPhase._state EventSubscriptionBasedProjectionProcessingPhase._stopOnEof EventSubscriptionBasedProjectionProcessingPhase._emittedStreamsTracker EventSubscriptionBasedProjectionProcessingPhase.UnlockAndForgetBefore(CheckpointTag) EventSubscriptionBasedProjectionProcessingPhase.LastProcessedEventPosition EventSubscriptionBasedProjectionProcessingPhase.CheckpointManager EventSubscriptionBasedProjectionProcessingPhase.EmittedStreamsTracker EventSubscriptionBasedProjectionProcessingPhase.IsOutOfOrderSubscriptionMessage(EventReaderSubscriptionMessageBase) EventSubscriptionBasedProjectionProcessingPhase.RegisterSubscriptionMessage(EventReaderSubscriptionMessageBase) EventSubscriptionBasedProjectionProcessingPhase.EnsureTickPending() EventSubscriptionBasedProjectionProcessingPhase.ProcessEvent() EventSubscriptionBasedProjectionProcessingPhase.Handle(EventReaderSubscriptionMessage.ProgressChanged) EventSubscriptionBasedProjectionProcessingPhase.Handle(EventReaderSubscriptionMessage.SubscriptionStarted) EventSubscriptionBasedProjectionProcessingPhase.Handle(EventReaderSubscriptionMessage.NotAuthorized) EventSubscriptionBasedProjectionProcessingPhase.Unsubscribed() EventSubscriptionBasedProjectionProcessingPhase.Handle(EventReaderSubscriptionMessage.EofReached) EventSubscriptionBasedProjectionProcessingPhase.Handle(EventReaderSubscriptionMessage.CheckpointSuggested) EventSubscriptionBasedProjectionProcessingPhase.Handle(CoreProjectionManagementMessage.GetState) EventSubscriptionBasedProjectionProcessingPhase.Handle(CoreProjectionManagementMessage.GetResult) EventSubscriptionBasedProjectionProcessingPhase.Handle(EventReaderSubscriptionMessage.Failed) EventSubscriptionBasedProjectionProcessingPhase.UnsubscribeFromPreRecordedOrderEvents() EventSubscriptionBasedProjectionProcessingPhase.Subscribed(Guid) EventSubscriptionBasedProjectionProcessingPhase.GetSubscriptionOptions() EventSubscriptionBasedProjectionProcessingPhase.SubscribeReaders(CheckpointTag) EventSubscriptionBasedProjectionProcessingPhase.SubscribeToPreRecordedOrderEvents() EventSubscriptionBasedProjectionProcessingPhase.Subscribe(CheckpointTag, Boolean) EventSubscriptionBasedProjectionProcessingPhase.Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded) EventSubscriptionBasedProjectionProcessingPhase.AdjustTag(CheckpointTag) EventSubscriptionBasedProjectionProcessingPhase.SetFaulting(String, Exception) EventSubscriptionBasedProjectionProcessingPhase.ValidateEmittedEvents(EmittedEventEnvelope[]) EventSubscriptionBasedProjectionProcessingPhase.InitializeFromCheckpoint(CheckpointTag) EventSubscriptionBasedProjectionProcessingPhase.GetBufferedEventCount() EventSubscriptionBasedProjectionProcessingPhase.GetStatus() EventSubscriptionBasedProjectionProcessingPhase.InternalCommittedEventProcessed(String, EventReaderSubscriptionMessage.CommittedEventReceived, EmittedEventEnvelope[], PartitionState, PartitionState) EventSubscriptionBasedProjectionProcessingPhase.InternalPartitionDeletedProcessed(String, CheckpointTag, PartitionState) EventSubscriptionBasedProjectionProcessingPhase.BeginGetPartitionStateAt(String, CheckpointTag, Action<PartitionState>, Boolean) EventSubscriptionBasedProjectionProcessingPhase.FinalizeEventProcessing(EventProcessedResult, CheckpointTag, Single) EventSubscriptionBasedProjectionProcessingPhase.EmitEofResult(String, String, CheckpointTag, Guid, String) EventSubscriptionBasedProjectionProcessingPhase.RecordEventOrder(ResolvedEvent, CheckpointTag, Action) EventSubscriptionBasedProjectionProcessingPhase.Complete() EventSubscriptionBasedProjectionProcessingPhase.SetCurrentCheckpointSuggestedWorkItem(CheckpointSuggestedWorkItem) EventSubscriptionBasedProjectionProcessingPhase.MakeZeroCheckpointTag() EventSubscriptionBasedProjectionProcessingPhase.EnsureUnsubscribed() EventSubscriptionBasedProjectionProcessingPhase._subscriptionStartedAtLastCommitPosition EventSubscriptionBasedProjectionProcessingPhase.Handle(EventReaderSubscriptionMessage.ReaderAssignedReader) EventSubscriptionBasedProjectionProcessingPhase.SetProjectionState(PhaseState) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class EventProcessingProjectionProcessingPhase : EventSubscriptionBasedProjectionProcessingPhase, IProjectionPhaseCompleter, IProjectionPhaseCheckpointManager, IHandle<EventReaderSubscriptionMessage.ProgressChanged>, IHandle<EventReaderSubscriptionMessage.SubscriptionStarted>, IHandle<EventReaderSubscriptionMessage.NotAuthorized>, IHandle<EventReaderSubscriptionMessage.EofReached>, IHandle<EventReaderSubscriptionMessage.CheckpointSuggested>, IHandle<EventReaderSubscriptionMessage.ReaderAssignedReader>, IHandle<EventReaderSubscriptionMessage.Failed>, IProjectionProcessingPhase, IDisposable, IHandle<CoreProjectionManagementMessage.GetState>, IHandle<CoreProjectionManagementMessage.GetResult>, IHandle<CoreProjectionProcessingMessage.PrerecordedEventsLoaded>, IHandle<EventReaderSubscriptionMessage.CommittedEventReceived>, IHandle<EventReaderSubscriptionMessage.PartitionEofReached>, IHandle<EventReaderSubscriptionMessage.PartitionDeleted>, IEventProcessingProjectionPhase, IProjectionPhaseStateManager Constructors EventProcessingProjectionProcessingPhase(CoreProjection, Guid, IPublisher, IPublisher, ProjectionConfig, Action, IProjectionStateHandler, PartitionStateCache, Boolean, String, ILogger, CheckpointTag, ICoreProjectionCheckpointManager, StatePartitionSelector, ReaderSubscriptionDispatcher, IReaderStrategy, IResultWriter, Boolean, Boolean, Boolean, Boolean, IEmittedStreamsTracker) Declaration public EventProcessingProjectionProcessingPhase(CoreProjection coreProjection, Guid projectionCorrelationId, IPublisher publisher, IPublisher inputQueue, ProjectionConfig projectionConfig, Action updateStatistics, IProjectionStateHandler projectionStateHandler, PartitionStateCache partitionStateCache, bool definesStateTransform, string projectionName, ILogger logger, CheckpointTag zeroCheckpointTag, ICoreProjectionCheckpointManager coreProjectionCheckpointManager, StatePartitionSelector statePartitionSelector, ReaderSubscriptionDispatcher subscriptionDispatcher, IReaderStrategy readerStrategy, IResultWriter resultWriter, bool useCheckpoints, bool stopOnEof, bool isBiState, bool orderedPartitionProcessing, IEmittedStreamsTracker emittedStreamsTracker) Parameters Type Name CoreProjection coreProjection Guid projectionCorrelationId EventStore.Core.Bus.IPublisher publisher EventStore.Core.Bus.IPublisher inputQueue ProjectionConfig projectionConfig Action updateStatistics IProjectionStateHandler projectionStateHandler PartitionStateCache partitionStateCache System.Boolean definesStateTransform System.String projectionName EventStore.Common.Log.ILogger logger CheckpointTag zeroCheckpointTag ICoreProjectionCheckpointManager coreProjectionCheckpointManager StatePartitionSelector statePartitionSelector ReaderSubscriptionDispatcher subscriptionDispatcher IReaderStrategy readerStrategy IResultWriter resultWriter System.Boolean useCheckpoints System.Boolean stopOnEof System.Boolean isBiState System.Boolean orderedPartitionProcessing IEmittedStreamsTracker emittedStreamsTracker Methods Dispose() Declaration public override void Dispose() Overrides EventSubscriptionBasedProjectionProcessingPhase.Dispose() GetStatistics(ProjectionStatistics) Declaration public override void GetStatistics(ProjectionStatistics info) Parameters Type Name ProjectionStatistics info Overrides EventSubscriptionBasedProjectionProcessingPhase.GetStatistics(ProjectionStatistics) Handle(EventReaderSubscriptionMessage.CommittedEventReceived) Declaration public void Handle(EventReaderSubscriptionMessage.CommittedEventReceived message) Parameters Type Name EventReaderSubscriptionMessage.CommittedEventReceived message Handle(EventReaderSubscriptionMessage.PartitionDeleted) Declaration public void Handle(EventReaderSubscriptionMessage.PartitionDeleted message) Parameters Type Name EventReaderSubscriptionMessage.PartitionDeleted message Handle(EventReaderSubscriptionMessage.PartitionEofReached) Declaration public void Handle(EventReaderSubscriptionMessage.PartitionEofReached message) Parameters Type Name EventReaderSubscriptionMessage.PartitionEofReached message NewCheckpointStarted(CheckpointTag) Declaration public override void NewCheckpointStarted(CheckpointTag at) Parameters Type Name CheckpointTag at Overrides EventSubscriptionBasedProjectionProcessingPhase.NewCheckpointStarted(CheckpointTag) ProcessCommittedEvent(EventReaderSubscriptionMessage.CommittedEventReceived, String) Declaration public EventProcessedResult ProcessCommittedEvent(EventReaderSubscriptionMessage.CommittedEventReceived message, string partition) Parameters Type Name EventReaderSubscriptionMessage.CommittedEventReceived message System.String partition Returns Type Description EventProcessedResult ProcessPartitionDeleted(String, CheckpointTag) Declaration public EventProcessedResult ProcessPartitionDeleted(string partition, CheckpointTag deletedPosition) Parameters Type Name System.String partition CheckpointTag deletedPosition Returns Type Description EventProcessedResult Implements IProjectionPhaseCompleter IProjectionPhaseCheckpointManager EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> IProjectionProcessingPhase IDisposable EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> IEventProcessingProjectionPhase IProjectionPhaseStateManager"
  },
  "dotnet-api/code/EventStore.ClientAPI.EventStorePersistentSubscription.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.EventStorePersistentSubscription.html",
    "title": "Class EventStorePersistentSubscription | Event Store",
    "keywords": "Class EventStorePersistentSubscription Represents a persistent subscription connection. Inheritance System.Object EventStorePersistentSubscriptionBase EventStorePersistentSubscription Inherited Members EventStorePersistentSubscriptionBase.DefaultBufferSize EventStorePersistentSubscriptionBase.Acknowledge(ResolvedEvent) EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable<ResolvedEvent>) EventStorePersistentSubscriptionBase.Acknowledge(Guid) EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable<Guid>) EventStorePersistentSubscriptionBase.Fail(ResolvedEvent, PersistentSubscriptionNakEventAction, String) EventStorePersistentSubscriptionBase.Fail(IEnumerable<ResolvedEvent>, PersistentSubscriptionNakEventAction, String) EventStorePersistentSubscriptionBase.Stop(TimeSpan) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class EventStorePersistentSubscription : EventStorePersistentSubscriptionBase"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Prepared.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Prepared.html",
    "title": "Class CoreProjectionStatusMessage.Prepared | Event Store",
    "keywords": "Class CoreProjectionStatusMessage.Prepared Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionStatusMessage.CoreProjectionStatusMessageBase CoreProjectionStatusMessage.Prepared Inherited Members CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Prepared : CoreProjectionStatusMessage.CoreProjectionStatusMessageBase Constructors Prepared(Guid, ProjectionSourceDefinition) Declaration public Prepared(Guid projectionId, ProjectionSourceDefinition sourceDefinition) Parameters Type Name Guid projectionId ProjectionSourceDefinition sourceDefinition Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionStatusMessage.CoreProjectionStatusMessageBase.MsgTypeId SourceDefinition Declaration public ProjectionSourceDefinition SourceDefinition { get; } Property Value Type ProjectionSourceDefinition"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Http.ProjectionStatisticsHttpFormatted.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Http.ProjectionStatisticsHttpFormatted.html",
    "title": "Class ProjectionStatisticsHttpFormatted | Event Store",
    "keywords": "Class ProjectionStatisticsHttpFormatted Inheritance System.Object ProjectionStatisticsHttpFormatted Namespace : EventStore.Projections.Core.Services.Http Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionStatisticsHttpFormatted : object Constructors ProjectionStatisticsHttpFormatted(ProjectionStatistics, Func<String, String>) Declaration public ProjectionStatisticsHttpFormatted(ProjectionStatistics source, Func<string, string> makeAbsoluteUrl) Parameters Type Name ProjectionStatistics source Func < System.String , System.String > makeAbsoluteUrl Properties BufferedEvents Declaration public int BufferedEvents { get; set; } Property Value Type System.Int32 CheckpointStatus Declaration public string CheckpointStatus { get; set; } Property Value Type System.String CoreProcessingTime Declaration public long CoreProcessingTime { get; set; } Property Value Type System.Int64 DisableCommandUrl Declaration public string DisableCommandUrl { get; set; } Property Value Type System.String EffectiveName Declaration public string EffectiveName { get; set; } Property Value Type System.String EnableCommandUrl Declaration public string EnableCommandUrl { get; set; } Property Value Type System.String Epoch Declaration public long Epoch { get; set; } Property Value Type System.Int64 EventsProcessedAfterRestart Declaration public int EventsProcessedAfterRestart { get; set; } Property Value Type System.Int32 LastCheckpoint Declaration public string LastCheckpoint { get; set; } Property Value Type System.String Mode Declaration public ProjectionMode Mode { get; set; } Property Value Type ProjectionMode Name Declaration public string Name { get; set; } Property Value Type System.String PartitionsCached Declaration public int PartitionsCached { get; set; } Property Value Type System.Int32 Position Declaration public string Position { get; set; } Property Value Type System.String Progress Declaration public float Progress { get; set; } Property Value Type System.Single QueryUrl Declaration public string QueryUrl { get; set; } Property Value Type System.String ReadsInProgress Declaration public int ReadsInProgress { get; set; } Property Value Type System.Int32 ResultStreamUrl Declaration public string ResultStreamUrl { get; set; } Property Value Type System.String ResultUrl Declaration public string ResultUrl { get; set; } Property Value Type System.String StateReason Declaration public string StateReason { get; set; } Property Value Type System.String StateUrl Declaration public string StateUrl { get; set; } Property Value Type System.String Status Declaration public string Status { get; set; } Property Value Type System.String StatusUrl Declaration public string StatusUrl { get; set; } Property Value Type System.String Version Declaration public long Version { get; set; } Property Value Type System.Int64 WritePendingEventsAfterCheckpoint Declaration public int WritePendingEventsAfterCheckpoint { get; set; } Property Value Type System.Int32 WritePendingEventsBeforeCheckpoint Declaration public int WritePendingEventsBeforeCheckpoint { get; set; } Property Value Type System.Int32 WritesInProgress Declaration public int WritesInProgress { get; set; } Property Value Type System.Int32"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.IProjectionStateHandler.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.IProjectionStateHandler.html",
    "title": "Interface IProjectionStateHandler | Event Store",
    "keywords": "Interface IProjectionStateHandler Inherited Members ISourceDefinitionSource.GetSourceDefinition() Namespace : EventStore.Projections.Core.Services Assembly : EventStore.Projections.Core.dll Syntax public interface IProjectionStateHandler : IDisposable, ISourceDefinitionSource Methods GetStatePartition(CheckpointTag, String, ResolvedEvent) Get state partition from the event Declaration string GetStatePartition(CheckpointTag eventPosition, string category, ResolvedEvent data) Parameters Type Name CheckpointTag eventPosition System.String category ResolvedEvent data Returns Type Description System.String partition name Initialize() Declaration void Initialize() InitializeShared() Declaration void InitializeShared() Load(String) Declaration void Load(string state) Parameters Type Name System.String state LoadShared(String) Declaration void LoadShared(string state) Parameters Type Name System.String state ProcessEvent(String, CheckpointTag, String, ResolvedEvent, out String, out String, out EmittedEventEnvelope[]) Processes event and updates internal state if necessary. Declaration bool ProcessEvent(string partition, CheckpointTag eventPosition, string category, ResolvedEvent data, out string newState, out string newSharedState, out EmittedEventEnvelope[] emittedEvents) Parameters Type Name System.String partition CheckpointTag eventPosition System.String category ResolvedEvent data System.String newState System.String newSharedState EmittedEventEnvelope [] emittedEvents Returns Type Description System.Boolean true - if event was processed (new state must be returned) ProcessPartitionCreated(String, CheckpointTag, ResolvedEvent, out EmittedEventEnvelope[]) Processes partition created notification and updates internal state if necessary. Declaration bool ProcessPartitionCreated(string partition, CheckpointTag createPosition, ResolvedEvent data, out EmittedEventEnvelope[] emittedEvents) Parameters Type Name System.String partition CheckpointTag createPosition ResolvedEvent data EmittedEventEnvelope [] emittedEvents Returns Type Description System.Boolean true - if notification was processed (new state must be returned) ProcessPartitionDeleted(String, CheckpointTag, out String) Processes partition deleted notification and updates internal state if necessary. Declaration bool ProcessPartitionDeleted(string partition, CheckpointTag deletePosition, out string newState) Parameters Type Name System.String partition CheckpointTag deletePosition System.String newState Returns Type Description System.Boolean true - if event was processed (new state must be returned) TransformStateToResult() Transforms current state into a projection result. Should not call any emit/linkTo etc Declaration string TransformStateToResult() Returns Type Description System.String result JSON or NULL if current state has been skipped Extension Methods ProjectionStateHandlerTestExtensions.ProcessEvent(IProjectionStateHandler, String, CheckpointTag, String, String, String, Guid, Int64, String, String, out String, out EmittedEventEnvelope[], Boolean) ProjectionStateHandlerTestExtensions.ProcessEvent(IProjectionStateHandler, String, CheckpointTag, String, String, String, Guid, Int64, String, String, out String, out String, out EmittedEventEnvelope[], Boolean)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionCheckpointWriterMessage.CheckpointWritten.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionCheckpointWriterMessage.CheckpointWritten.html",
    "title": "Class CoreProjectionCheckpointWriterMessage.CheckpointWritten | Event Store",
    "keywords": "Class CoreProjectionCheckpointWriterMessage.CheckpointWritten Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionCheckpointWriterMessage.CheckpointWritten Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public sealed class CheckpointWritten : Message Constructors CheckpointWritten(CheckpointTag) Declaration public CheckpointWritten(CheckpointTag position) Parameters Type Name CheckpointTag position Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId Position Declaration public CheckpointTag Position { get; } Property Value Type CheckpointTag"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.UpdateQuery.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.UpdateQuery.html",
    "title": "Class ProjectionManagementMessage.Command.UpdateQuery | Event Store",
    "keywords": "Class ProjectionManagementMessage.Command.UpdateQuery Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Command.ControlMessage ProjectionManagementMessage.Command.UpdateQuery Inherited Members ProjectionManagementMessage.Command.ControlMessage.RunAs ProjectionManagementMessage.Command.ControlMessage.Envelope EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class UpdateQuery : ProjectionManagementMessage.Command.ControlMessage Constructors UpdateQuery(IEnvelope, String, ProjectionManagementMessage.RunAs, String, String, Nullable<Boolean>) Declaration public UpdateQuery(IEnvelope envelope, string name, ProjectionManagementMessage.RunAs runAs, string handlerType, string query, bool? emitEnabled) Parameters Type Name EventStore.Core.Messaging.IEnvelope envelope System.String name ProjectionManagementMessage.RunAs runAs System.String handlerType System.String query System.Nullable < System.Boolean > emitEnabled Properties EmitEnabled Declaration public bool? EmitEnabled { get; } Property Value Type System.Nullable < System.Boolean > HandlerType Declaration public string HandlerType { get; } Property Value Type System.String MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ProjectionManagementMessage.Command.ControlMessage.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String Query Declaration public string Query { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.Filter.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Filter.html",
    "title": "Class Filter | Event Store",
    "keywords": "Class Filter A Filter, used to filter events when reading from the $all stream. Inheritance System.Object Filter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class Filter Properties EventType Filters by EventType. Declaration public static FilterContext EventType { get; } Property Value Type FilterContext ExcludeSystemEvents A Filter that excludes all system events. Declaration public static Filter ExcludeSystemEvents { get; } Property Value Type Filter StreamId Filters by StreamId. Declaration public static FilterContext StreamId { get; } Property Value Type FilterContext Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "dotnet-api/code/EventStore.Projections.Core.v8.Js1.LogDelegate.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.v8.Js1.LogDelegate.html",
    "title": "Delegate Js1.LogDelegate | Event Store",
    "keywords": "Delegate Js1.LogDelegate Namespace : EventStore.Projections.Core.v8 Assembly : EventStore.Projections.Core.dll Syntax public delegate void LogDelegate(string message); Parameters Type Name Description System.String message"
  },
  "dotnet-api/code/EventStore.ClientAPI.EventStoreSubscription.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.EventStoreSubscription.html",
    "title": "Class EventStoreSubscription | Event Store",
    "keywords": "Class EventStoreSubscription Represents a subscription to a single stream or to the stream of all events in the Event Store. Inheritance System.Object EventStoreSubscription Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public abstract class EventStoreSubscription : IDisposable Fields LastCommitPosition The last commit position seen on the subscription (if this is a subscription to all events). Declaration public readonly long LastCommitPosition Field Value Type System.Int64 LastEventNumber The last event number seen on the subscription (if this is a subscription to a single stream). Declaration public readonly long? LastEventNumber Field Value Type System.Nullable < System.Int64 > Properties IsSubscribedToAll True if this subscription is to all streams. Declaration public bool IsSubscribedToAll { get; } Property Value Type System.Boolean StreamId The name of the stream to which the subscription is subscribed. Declaration public string StreamId { get; } Property Value Type System.String Methods Close() Unsubscribes from the stream. Declaration public void Close() Dispose() Unsubscribes from the stream. Declaration public void Dispose() Unsubscribe() Unsubscribes from the stream Declaration public abstract void Unsubscribe() Implements System.IDisposable"
  },
  "dotnet-api/code/EventStore.Projections.Core.ProjectionManagerNode.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.ProjectionManagerNode.html",
    "title": "Class ProjectionManagerNode | Event Store",
    "keywords": "Class ProjectionManagerNode Inheritance System.Object ProjectionManagerNode Namespace : EventStore.Projections.Core Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionManagerNode : object Methods CreateManagerService(StandardComponents, ProjectionsStandardComponents, IDictionary<Guid, IPublisher>, TimeSpan) Declaration public static void CreateManagerService(StandardComponents standardComponents, ProjectionsStandardComponents projectionsStandardComponents, IDictionary<Guid, IPublisher> queues, TimeSpan projectionQueryExpiry) Parameters Type Name EventStore.Core.StandardComponents standardComponents ProjectionsStandardComponents projectionsStandardComponents IDictionary < Guid , EventStore.Core.Bus.IPublisher > queues TimeSpan projectionQueryExpiry"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Started.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Started.html",
    "title": "Class CoreProjectionStatusMessage.Started | Event Store",
    "keywords": "Class CoreProjectionStatusMessage.Started Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionStatusMessage.CoreProjectionStatusMessageBase CoreProjectionStatusMessage.Started Inherited Members CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Started : CoreProjectionStatusMessage.CoreProjectionStatusMessageBase Constructors Started(Guid) Declaration public Started(Guid projectionId) Parameters Type Name Guid projectionId Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionStatusMessage.CoreProjectionStatusMessageBase.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IEmittedStreamsWriter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IEmittedStreamsWriter.html",
    "title": "Interface IEmittedStreamsWriter | Event Store",
    "keywords": "Interface IEmittedStreamsWriter Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public interface IEmittedStreamsWriter Methods WriteEvents(String, Int64, Event[], IPrincipal, Action<ClientMessage.WriteEventsCompleted>) Declaration void WriteEvents(string streamId, long expectedVersion, Event[] events, IPrincipal writeAs, Action<ClientMessage.WriteEventsCompleted> complete) Parameters Type Name System.String streamId System.Int64 expectedVersion EventStore.Core.Data.Event [] events IPrincipal writeAs Action < EventStore.Core.Messages.ClientMessage.WriteEventsCompleted > complete"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.html",
    "title": "Class ReaderSubscriptionManagement | Event Store",
    "keywords": "Class ReaderSubscriptionManagement Inheritance System.Object ReaderSubscriptionManagement Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public static class ReaderSubscriptionManagement : object"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Management.ManagedProjectionState.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Management.ManagedProjectionState.html",
    "title": "Enum ManagedProjectionState | Event Store",
    "keywords": "Enum ManagedProjectionState Namespace : EventStore.Projections.Core.Services.Management Assembly : EventStore.Projections.Core.dll Syntax public enum ManagedProjectionState : int Fields Name Description Aborted Aborting Completed Creating Deleting Faulted Loaded Loading LoadingStopped Prepared Preparing Running Starting Stopped Stopping Extension Methods EnumExtensions.EnumValueName<ManagedProjectionState>()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.QuerySourcesExtensions.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.QuerySourcesExtensions.html",
    "title": "Class QuerySourcesExtensions | Event Store",
    "keywords": "Class QuerySourcesExtensions Inheritance System.Object QuerySourcesExtensions Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public static class QuerySourcesExtensions : object Methods HasCategories(IQuerySources) Declaration public static bool HasCategories(this IQuerySources sources) Parameters Type Name IQuerySources sources Returns Type Description System.Boolean HasEvents(IQuerySources) Declaration public static bool HasEvents(this IQuerySources sources) Parameters Type Name IQuerySources sources Returns Type Description System.Boolean HasStreams(IQuerySources) Declaration public static bool HasStreams(this IQuerySources sources) Parameters Type Name IQuerySources sources Returns Type Description System.Boolean"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Http.ProjectionsController.ReadEventsBody.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Http.ProjectionsController.ReadEventsBody.html",
    "title": "Class ProjectionsController.ReadEventsBody | Event Store",
    "keywords": "Class ProjectionsController.ReadEventsBody Inheritance System.Object ProjectionsController.ReadEventsBody Namespace : EventStore.Projections.Core.Services.Http Assembly : EventStore.Projections.Core.dll Syntax public class ReadEventsBody : object Properties MaxEvents Declaration public int? MaxEvents { get; set; } Property Value Type System.Nullable < System.Int32 > Position Declaration public JObject Position { get; set; } Property Value Type JObject Query Declaration public QuerySourcesDefinition Query { get; set; } Property Value Type QuerySourcesDefinition"
  },
  "dotnet-api/code/EventStore.ClientAPI.ClientOperations.MaximumSubscribersReachedException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ClientOperations.MaximumSubscribersReachedException.html",
    "title": "Class MaximumSubscribersReachedException | Event Store",
    "keywords": "Class MaximumSubscribersReachedException Thrown when max subscribers is set on subscription and it has been reached Inheritance System.Object System.Exception MaximumSubscribersReachedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.ClientOperations Assembly : EventStore.ClientAPI.dll Syntax public class MaximumSubscribersReachedException : Exception, ISerializable Constructors MaximumSubscribersReachedException() Constructs a MaximumSubscribersReachedException Declaration public MaximumSubscribersReachedException() Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Common.ProjectionConsts.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Common.ProjectionConsts.html",
    "title": "Class ProjectionConsts | Event Store",
    "keywords": "Class ProjectionConsts Inheritance System.Object ProjectionConsts Namespace : EventStore.Projections.Core.Common Assembly : EventStore.Projections.Core.dll Syntax public static class ProjectionConsts : object Fields CheckpointAfterMs Declaration public static TimeSpan CheckpointAfterMs Field Value Type TimeSpan CheckpointHandledThreshold Declaration public const int CheckpointHandledThreshold = null Field Value Type System.Int32 CheckpointUnhandledBytesThreshold Declaration public const int CheckpointUnhandledBytesThreshold = null Field Value Type System.Int32 MaxAllowedWritesInFlight Declaration public const int MaxAllowedWritesInFlight = null Field Value Type System.Int32 MaxWriteBatchLength Declaration public const int MaxWriteBatchLength = null Field Value Type System.Int32 PendingEventsThreshold Declaration public const int PendingEventsThreshold = null Field Value Type System.Int32"
  },
  "dotnet-api/code/EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings.html",
    "title": "Class CatchUpSubscriptionFilteredSettings | Event Store",
    "keywords": "Class CatchUpSubscriptionFilteredSettings Settings for EventStoreCatchUpSubscription . Inheritance System.Object CatchUpSubscriptionSettings CatchUpSubscriptionFilteredSettings Inherited Members CatchUpSubscriptionSettings.MaxLiveQueueSize CatchUpSubscriptionSettings.ReadBatchSize CatchUpSubscriptionSettings.VerboseLogging CatchUpSubscriptionSettings.ResolveLinkTos CatchUpSubscriptionSettings.SubscriptionName System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class CatchUpSubscriptionFilteredSettings : CatchUpSubscriptionSettings Constructors CatchUpSubscriptionFilteredSettings(Int32, Int32, Boolean, Boolean, Int32, String) Constructs a new CatchUpSubscriptionFilteredSettings Declaration public CatchUpSubscriptionFilteredSettings(int maxLiveQueueSize, int readBatchSize, bool verboseLogging, bool resolveLinkTos, int maxSearchWindow, string subscriptionName = \"\") Parameters Type Name System.Int32 maxLiveQueueSize System.Int32 readBatchSize System.Boolean verboseLogging System.Boolean resolveLinkTos System.Int32 maxSearchWindow System.String subscriptionName Fields Default The default CatchUpSubscriptionFilteredSettings . Declaration public static readonly CatchUpSubscriptionFilteredSettings Default Field Value Type CatchUpSubscriptionFilteredSettings Properties MaxSearchWindow The maximum number of events the server will search through before returning the AllEventsSlice . Declaration public int MaxSearchWindow { get; } Property Value Type System.Int32"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.QuerySourceOptions.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.QuerySourceOptions.html",
    "title": "Class QuerySourceOptions | Event Store",
    "keywords": "Class QuerySourceOptions Inheritance System.Object QuerySourceOptions Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class QuerySourceOptions : object Properties DefinesFold Declaration public bool DefinesFold { get; set; } Property Value Type System.Boolean DefinesStateTransform Declaration public bool DefinesStateTransform { get; set; } Property Value Type System.Boolean HandlesDeletedNotifications Declaration public bool HandlesDeletedNotifications { get; set; } Property Value Type System.Boolean IncludeLinks Declaration public bool IncludeLinks { get; set; } Property Value Type System.Boolean IsBiState Declaration public bool IsBiState { get; set; } Property Value Type System.Boolean PartitionResultStreamNamePattern Declaration public string PartitionResultStreamNamePattern { get; set; } Property Value Type System.String ProcessingLag Declaration public int ProcessingLag { get; set; } Property Value Type System.Int32 ProducesResults Declaration public bool ProducesResults { get; set; } Property Value Type System.Boolean ReorderEvents Declaration public bool ReorderEvents { get; set; } Property Value Type System.Boolean ResultStreamName Declaration public string ResultStreamName { get; set; } Property Value Type System.String Methods Equals(QuerySourceOptions) Declaration protected bool Equals(QuerySourceOptions other) Parameters Type Name QuerySourceOptions other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name System.Object obj Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.QuerySourcesDefinitionOptions.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.QuerySourcesDefinitionOptions.html",
    "title": "Class QuerySourcesDefinitionOptions | Event Store",
    "keywords": "Class QuerySourcesDefinitionOptions Inheritance System.Object QuerySourcesDefinitionOptions Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class QuerySourcesDefinitionOptions : object Properties DefinesFold Declaration public bool DefinesFold { get; set; } Property Value Type System.Boolean DefinesStateTransform Declaration public bool DefinesStateTransform { get; set; } Property Value Type System.Boolean HandlesDeletedNotifications Declaration public bool HandlesDeletedNotifications { get; set; } Property Value Type System.Boolean IncludeLinks Declaration public bool IncludeLinks { get; set; } Property Value Type System.Boolean IsBiState Declaration public bool IsBiState { get; set; } Property Value Type System.Boolean PartitionResultStreamNamePattern Declaration public string PartitionResultStreamNamePattern { get; set; } Property Value Type System.String ProcessingLag Declaration public int? ProcessingLag { get; set; } Property Value Type System.Nullable < System.Int32 > ProducesResults Declaration public bool ProducesResults { get; set; } Property Value Type System.Boolean ReorderEvents Declaration public bool ReorderEvents { get; set; } Property Value Type System.Boolean ResultStreamName Declaration public string ResultStreamName { get; set; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.DeleteCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.DeleteCommand.html",
    "title": "Class DeleteCommand | Event Store",
    "keywords": "Class DeleteCommand Inheritance System.Object DeleteCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class DeleteCommand : object Fields DeleteCheckpointStream Declaration public bool DeleteCheckpointStream Field Value Type System.Boolean DeleteEmittedStreams Declaration public bool DeleteEmittedStreams Field Value Type System.Boolean DeleteStateStream Declaration public bool DeleteStateStream Field Value Type System.Boolean Name Declaration public string Name Field Value Type System.String RunAs Declaration public SerializedRunAs RunAs Field Value Type SerializedRunAs"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedStream.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedStream.html",
    "title": "Class EmittedStream | Event Store",
    "keywords": "Class EmittedStream Inheritance System.Object EmittedStream Implements EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.EmittedStreamWriteCompleted > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Internal.ReadTimeout > Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class EmittedStream : IDisposable, IHandle<CoreProjectionProcessingMessage.EmittedStreamWriteCompleted>, IHandle<ProjectionManagementMessage.Internal.ReadTimeout> Constructors EmittedStream(String, EmittedStream.WriterConfiguration, ProjectionVersion, PositionTagger, CheckpointTag, IPublisher, IODispatcher, IEmittedStreamContainer, Boolean) Declaration public EmittedStream(string streamId, EmittedStream.WriterConfiguration writerConfiguration, ProjectionVersion projectionVersion, PositionTagger positionTagger, CheckpointTag fromCheckpointPosition, IPublisher publisher, IODispatcher ioDispatcher, IEmittedStreamContainer readyHandler, bool noCheckpoints = false) Parameters Type Name System.String streamId EmittedStream.WriterConfiguration writerConfiguration ProjectionVersion projectionVersion PositionTagger positionTagger CheckpointTag fromCheckpointPosition EventStore.Core.Bus.IPublisher publisher EventStore.Core.Helpers.IODispatcher ioDispatcher IEmittedStreamContainer readyHandler System.Boolean noCheckpoints Methods Checkpoint() Declaration public void Checkpoint() Dispose() Declaration public void Dispose() EmitEvents(EmittedEvent[]) Declaration public void EmitEvents(EmittedEvent[] events) Parameters Type Name EmittedEvent [] events GetReadsInProgress() Declaration public int GetReadsInProgress() Returns Type Description System.Int32 GetWritePendingEvents() Declaration public int GetWritePendingEvents() Returns Type Description System.Int32 GetWritesInProgress() Declaration public int GetWritesInProgress() Returns Type Description System.Int32 Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted) Declaration public void Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted message) Parameters Type Name CoreProjectionProcessingMessage.EmittedStreamWriteCompleted message Handle(ProjectionManagementMessage.Internal.ReadTimeout) Declaration public void Handle(ProjectionManagementMessage.Internal.ReadTimeout message) Parameters Type Name ProjectionManagementMessage.Internal.ReadTimeout message Start() Declaration public void Start() Implements EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ResolvedEvent.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ResolvedEvent.html",
    "title": "Class ResolvedEvent | Event Store",
    "keywords": "Class ResolvedEvent Inheritance System.Object ResolvedEvent Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class ResolvedEvent : object Constructors ResolvedEvent(ResolvedEvent, Byte[]) Declaration public ResolvedEvent(ResolvedEvent resolvedEvent, byte[] streamMetadata) Parameters Type Name EventStore.Core.Data.ResolvedEvent resolvedEvent System.Byte [] streamMetadata ResolvedEvent(String, Int64, String, Int64, Boolean, TFPos, TFPos, Guid, String, Boolean, Byte[], Byte[], Byte[], Byte[], DateTime) Declaration public ResolvedEvent(string positionStreamId, long positionSequenceNumber, string eventStreamId, long eventSequenceNumber, bool resolvedLinkTo, TFPos position, TFPos eventOrLinkTargetPosition, Guid eventId, string eventType, bool isJson, byte[] data, byte[] metadata, byte[] positionMetadata, byte[] streamMetadata, DateTime timestamp) Parameters Type Name System.String positionStreamId System.Int64 positionSequenceNumber System.String eventStreamId System.Int64 eventSequenceNumber System.Boolean resolvedLinkTo EventStore.Core.Data.TFPos position EventStore.Core.Data.TFPos eventOrLinkTargetPosition Guid eventId System.String eventType System.Boolean isJson System.Byte [] data System.Byte [] metadata System.Byte [] positionMetadata System.Byte [] streamMetadata DateTime timestamp ResolvedEvent(String, Int64, String, Int64, Boolean, TFPos, Guid, String, Boolean, String, String, String, String) Declaration public ResolvedEvent(string positionStreamId, long positionSequenceNumber, string eventStreamId, long eventSequenceNumber, bool resolvedLinkTo, TFPos position, Guid eventId, string eventType, bool isJson, string data, string metadata, string positionMetadata = null, string streamMetadata = null) Parameters Type Name System.String positionStreamId System.Int64 positionSequenceNumber System.String eventStreamId System.Int64 eventSequenceNumber System.Boolean resolvedLinkTo EventStore.Core.Data.TFPos position Guid eventId System.String eventType System.Boolean isJson System.String data System.String metadata System.String positionMetadata System.String streamMetadata Fields Data Declaration public readonly string Data Field Value Type System.String EventId Declaration public readonly Guid EventId Field Value Type Guid EventType Declaration public readonly string EventType Field Value Type System.String IsJson Declaration public readonly bool IsJson Field Value Type System.Boolean IsLinkToDeletedStream Declaration public readonly bool IsLinkToDeletedStream Field Value Type System.Boolean IsLinkToDeletedStreamTombstone Declaration public readonly bool IsLinkToDeletedStreamTombstone Field Value Type System.Boolean Metadata Declaration public readonly string Metadata Field Value Type System.String PositionMetadata Declaration public readonly string PositionMetadata Field Value Type System.String StreamMetadata Declaration public readonly string StreamMetadata Field Value Type System.String Timestamp Declaration public readonly DateTime Timestamp Field Value Type DateTime Properties EventOrLinkTargetPosition Declaration public TFPos EventOrLinkTargetPosition { get; } Property Value Type EventStore.Core.Data.TFPos EventSequenceNumber Declaration public long EventSequenceNumber { get; } Property Value Type System.Int64 EventStreamId Declaration public string EventStreamId { get; } Property Value Type System.String IsStreamDeletedEvent Declaration public bool IsStreamDeletedEvent { get; } Property Value Type System.Boolean LinkOrEventPosition Declaration public TFPos LinkOrEventPosition { get; } Property Value Type EventStore.Core.Data.TFPos Position Declaration public TFPos Position { get; } Property Value Type EventStore.Core.Data.TFPos PositionSequenceNumber Declaration public long PositionSequenceNumber { get; } Property Value Type System.Int64 PositionStreamId Declaration public string PositionStreamId { get; } Property Value Type System.String ResolvedLinkTo Declaration public bool ResolvedLinkTo { get; } Property Value Type System.Boolean"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventReaderCoreService.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventReaderCoreService.html",
    "title": "Class EventReaderCoreService | Event Store",
    "keywords": "Class EventReaderCoreService Inheritance System.Object EventReaderCoreService Implements EventStore.Core.Bus.IHandle < ReaderCoreServiceMessage.StartReader > EventStore.Core.Bus.IHandle < ReaderCoreServiceMessage.StopReader > EventStore.Core.Bus.IHandle < ReaderSubscriptionManagement.Subscribe > EventStore.Core.Bus.IHandle < ReaderSubscriptionManagement.Unsubscribe > EventStore.Core.Bus.IHandle < ReaderSubscriptionManagement.Pause > EventStore.Core.Bus.IHandle < ReaderSubscriptionManagement.Resume > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.CommittedEventDistributed > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.EventReaderIdle > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.EventReaderStarting > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.EventReaderNotAuthorized > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.EventReaderEof > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.EventReaderPartitionEof > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.EventReaderPartitionDeleted > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.Faulted > Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class EventReaderCoreService : object, IHandle<ReaderCoreServiceMessage.StartReader>, IHandle<ReaderCoreServiceMessage.StopReader>, IHandle<ReaderSubscriptionManagement.Subscribe>, IHandle<ReaderSubscriptionManagement.Unsubscribe>, IHandle<ReaderSubscriptionManagement.Pause>, IHandle<ReaderSubscriptionManagement.Resume>, IHandle<ReaderSubscriptionMessage.CommittedEventDistributed>, IHandle<ReaderSubscriptionMessage.EventReaderIdle>, IHandle<ReaderSubscriptionMessage.EventReaderStarting>, IHandle<ReaderSubscriptionMessage.EventReaderNotAuthorized>, IHandle<ReaderSubscriptionMessage.EventReaderEof>, IHandle<ReaderSubscriptionMessage.EventReaderPartitionEof>, IHandle<ReaderSubscriptionMessage.EventReaderPartitionDeleted>, IHandle<ReaderSubscriptionMessage.Faulted> Constructors EventReaderCoreService(IPublisher, IODispatcher, Int32, ICheckpoint, Boolean, Boolean) Declaration public EventReaderCoreService(IPublisher publisher, IODispatcher ioDispatcher, int eventCacheSize, ICheckpoint writerCheckpoint, bool runHeadingReader, bool faultOutOfOrderProjections) Parameters Type Name EventStore.Core.Bus.IPublisher publisher EventStore.Core.Helpers.IODispatcher ioDispatcher System.Int32 eventCacheSize EventStore.Core.TransactionLog.Checkpoint.ICheckpoint writerCheckpoint System.Boolean runHeadingReader System.Boolean faultOutOfOrderProjections Fields SubComponentName Declaration public const string SubComponentName = null Field Value Type System.String Methods Handle(ReaderCoreServiceMessage.StartReader) Declaration public void Handle(ReaderCoreServiceMessage.StartReader message) Parameters Type Name ReaderCoreServiceMessage.StartReader message Handle(ReaderCoreServiceMessage.StopReader) Declaration public void Handle(ReaderCoreServiceMessage.StopReader message) Parameters Type Name ReaderCoreServiceMessage.StopReader message Handle(ReaderSubscriptionManagement.Pause) Declaration public void Handle(ReaderSubscriptionManagement.Pause message) Parameters Type Name ReaderSubscriptionManagement.Pause message Handle(ReaderSubscriptionManagement.Resume) Declaration public void Handle(ReaderSubscriptionManagement.Resume message) Parameters Type Name ReaderSubscriptionManagement.Resume message Handle(ReaderSubscriptionManagement.Subscribe) Declaration public void Handle(ReaderSubscriptionManagement.Subscribe message) Parameters Type Name ReaderSubscriptionManagement.Subscribe message Handle(ReaderSubscriptionManagement.Unsubscribe) Declaration public void Handle(ReaderSubscriptionManagement.Unsubscribe message) Parameters Type Name ReaderSubscriptionManagement.Unsubscribe message Handle(ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public void Handle(ReaderSubscriptionMessage.CommittedEventDistributed message) Parameters Type Name ReaderSubscriptionMessage.CommittedEventDistributed message Handle(ReaderSubscriptionMessage.EventReaderEof) Declaration public void Handle(ReaderSubscriptionMessage.EventReaderEof message) Parameters Type Name ReaderSubscriptionMessage.EventReaderEof message Handle(ReaderSubscriptionMessage.EventReaderIdle) Declaration public void Handle(ReaderSubscriptionMessage.EventReaderIdle message) Parameters Type Name ReaderSubscriptionMessage.EventReaderIdle message Handle(ReaderSubscriptionMessage.EventReaderNotAuthorized) Declaration public void Handle(ReaderSubscriptionMessage.EventReaderNotAuthorized message) Parameters Type Name ReaderSubscriptionMessage.EventReaderNotAuthorized message Handle(ReaderSubscriptionMessage.EventReaderPartitionDeleted) Declaration public void Handle(ReaderSubscriptionMessage.EventReaderPartitionDeleted message) Parameters Type Name ReaderSubscriptionMessage.EventReaderPartitionDeleted message Handle(ReaderSubscriptionMessage.EventReaderPartitionEof) Declaration public void Handle(ReaderSubscriptionMessage.EventReaderPartitionEof message) Parameters Type Name ReaderSubscriptionMessage.EventReaderPartitionEof message Handle(ReaderSubscriptionMessage.EventReaderStarting) Declaration public void Handle(ReaderSubscriptionMessage.EventReaderStarting message) Parameters Type Name ReaderSubscriptionMessage.EventReaderStarting message Handle(ReaderSubscriptionMessage.Faulted) Declaration public void Handle(ReaderSubscriptionMessage.Faulted message) Parameters Type Name ReaderSubscriptionMessage.Faulted message Implements EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.UpdateConfig.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.UpdateConfig.html",
    "title": "Class ProjectionManagementMessage.Command.UpdateConfig | Event Store",
    "keywords": "Class ProjectionManagementMessage.Command.UpdateConfig Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Command.ControlMessage ProjectionManagementMessage.Command.UpdateConfig Inherited Members ProjectionManagementMessage.Command.ControlMessage.RunAs ProjectionManagementMessage.Command.ControlMessage.Envelope EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class UpdateConfig : ProjectionManagementMessage.Command.ControlMessage Constructors UpdateConfig(IEnvelope, String, Boolean, Boolean, Int32, Int32, Int32, Int32, Int32, Int32, ProjectionManagementMessage.RunAs) Declaration public UpdateConfig(IEnvelope envelope, string name, bool emitEnabled, bool trackEmittedStreams, int checkpointAfterMs, int checkpointHandledThreshold, int checkpointUnhandledBytesThreshold, int pendingEventsThreshold, int maxWriteBatchLength, int maxAllowedWritesInFlight, ProjectionManagementMessage.RunAs runAs) Parameters Type Name EventStore.Core.Messaging.IEnvelope envelope System.String name System.Boolean emitEnabled System.Boolean trackEmittedStreams System.Int32 checkpointAfterMs System.Int32 checkpointHandledThreshold System.Int32 checkpointUnhandledBytesThreshold System.Int32 pendingEventsThreshold System.Int32 maxWriteBatchLength System.Int32 maxAllowedWritesInFlight ProjectionManagementMessage.RunAs runAs Properties CheckpointAfterMs Declaration public int CheckpointAfterMs { get; } Property Value Type System.Int32 CheckpointHandledThreshold Declaration public int CheckpointHandledThreshold { get; } Property Value Type System.Int32 CheckpointUnhandledBytesThreshold Declaration public int CheckpointUnhandledBytesThreshold { get; } Property Value Type System.Int32 EmitEnabled Declaration public bool EmitEnabled { get; } Property Value Type System.Boolean MaxAllowedWritesInFlight Declaration public int MaxAllowedWritesInFlight { get; } Property Value Type System.Int32 MaxWriteBatchLength Declaration public int MaxWriteBatchLength { get; } Property Value Type System.Int32 MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ProjectionManagementMessage.Command.ControlMessage.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String PendingEventsThreshold Declaration public int PendingEventsThreshold { get; } Property Value Type System.Int32 TrackEmittedStreams Declaration public bool TrackEmittedStreams { get; } Property Value Type System.Boolean"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Stopped.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Stopped.html",
    "title": "Class CoreProjectionStatusMessage.Stopped | Event Store",
    "keywords": "Class CoreProjectionStatusMessage.Stopped Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionStatusMessage.CoreProjectionStatusMessageBase CoreProjectionStatusMessage.Stopped Inherited Members CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Stopped : CoreProjectionStatusMessage.CoreProjectionStatusMessageBase Constructors Stopped(Guid, String, Boolean) Declaration public Stopped(Guid projectionId, string name, bool completed) Parameters Type Name Guid projectionId System.String name System.Boolean completed Properties Completed Declaration public bool Completed { get; } Property Value Type System.Boolean MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionStatusMessage.CoreProjectionStatusMessageBase.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionDeleted.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionDeleted.html",
    "title": "Class EventReaderSubscriptionMessage.PartitionDeleted | Event Store",
    "keywords": "Class EventReaderSubscriptionMessage.PartitionDeleted NOTEL the PartitionDeleted may appear out-of-order and is not guaranteed to appear at the same sequence position in a recovery Inheritance System.Object EventStore.Core.Messaging.Message EventReaderSubscriptionMessageBase EventReaderSubscriptionMessage.PartitionDeleted Inherited Members EventReaderSubscriptionMessageBase.CheckpointTag EventReaderSubscriptionMessageBase.Progress EventReaderSubscriptionMessageBase.SubscriptionMessageSequenceNumber EventReaderSubscriptionMessageBase.SubscriptionId EventReaderSubscriptionMessageBase.Source EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class PartitionDeleted : EventReaderSubscriptionMessageBase Constructors PartitionDeleted(Guid, CheckpointTag, String, Int64, Object) Declaration public PartitionDeleted(Guid subscriptionId, CheckpointTag checkpointTag, string partition, long subscriptionMessageSequenceNumber, object source = null) Parameters Type Name Guid subscriptionId CheckpointTag checkpointTag System.String partition System.Int64 subscriptionMessageSequenceNumber System.Object source Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventReaderSubscriptionMessageBase.MsgTypeId Partition Declaration public string Partition { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.v8.Js1.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.v8.Js1.html",
    "title": "Class Js1 | Event Store",
    "keywords": "Class Js1 Inheritance System.Object Js1 Namespace : EventStore.Projections.Core.v8 Assembly : EventStore.Projections.Core.dll Syntax public static class Js1 : object Methods ApiVersion() Declaration public static IntPtr ApiVersion() Returns Type Description IntPtr CompileModule(IntPtr, String, String) Declaration public static IntPtr CompileModule(IntPtr prelude, string script, string fileName) Parameters Type Name IntPtr prelude System.String script System.String fileName Returns Type Description IntPtr CompilePrelude(String, String, Js1.LoadModuleDelegate, Js1.EnterCancellableRegionDelegate, Js1.ExitCancellableRegionDelegate, Js1.LogDelegate) Declaration public static IntPtr CompilePrelude(string prelude, string fileName, Js1.LoadModuleDelegate loadModuleHandler, Js1.EnterCancellableRegionDelegate enterCancellableRegionHandler, Js1.ExitCancellableRegionDelegate exitCancellableRegionHandler, Js1.LogDelegate logHandler) Parameters Type Name System.String prelude System.String fileName Js1.LoadModuleDelegate loadModuleHandler Js1.EnterCancellableRegionDelegate enterCancellableRegionHandler Js1.ExitCancellableRegionDelegate exitCancellableRegionHandler Js1.LogDelegate logHandler Returns Type Description IntPtr CompileQuery(IntPtr, String, String, Js1.CommandHandlerRegisteredDelegate, Js1.ReverseCommandHandlerDelegate) Declaration public static IntPtr CompileQuery(IntPtr prelude, string script, string fileName, Js1.CommandHandlerRegisteredDelegate commandHandlerRegisteredCallback, Js1.ReverseCommandHandlerDelegate reverseCommandHandler) Parameters Type Name IntPtr prelude System.String script System.String fileName Js1.CommandHandlerRegisteredDelegate commandHandlerRegisteredCallback Js1.ReverseCommandHandlerDelegate reverseCommandHandler Returns Type Description IntPtr DisposeScript(IntPtr) Declaration public static void DisposeScript(IntPtr scriptHandle) Parameters Type Name IntPtr scriptHandle ExecuteCommandHandler(IntPtr, IntPtr, String, String[], Int32, out IntPtr, out IntPtr, out IntPtr) Declaration public static bool ExecuteCommandHandler(IntPtr scriptHandle, IntPtr eventHandlerHandle, string dataJson, string[] dataOther, int otherLength, out IntPtr resultJson, out IntPtr result2Json, out IntPtr memoryHandle) Parameters Type Name IntPtr scriptHandle IntPtr eventHandlerHandle System.String dataJson System.String [] dataOther System.Int32 otherLength IntPtr resultJson IntPtr result2Json IntPtr memoryHandle Returns Type Description System.Boolean FreeResult(IntPtr) Declaration public static void FreeResult(IntPtr resultHandle) Parameters Type Name IntPtr resultHandle ReportErrors(IntPtr, Js1.ReportErrorDelegate) Declaration public static void ReportErrors(IntPtr scriptHandle, Js1.ReportErrorDelegate reportErrorCallback) Parameters Type Name IntPtr scriptHandle Js1.ReportErrorDelegate reportErrorCallback TerminateExecution(IntPtr) Declaration public static void TerminateExecution(IntPtr scriptHandle) Parameters Type Name IntPtr scriptHandle"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.html",
    "title": "Class RequestResponseQueueForwarder | Event Store",
    "keywords": "Class RequestResponseQueueForwarder Inheritance System.Object RequestResponseQueueForwarder Implements EventStore.Core.Bus.IHandle < EventStore.Core.Messages.ClientMessage.ReadEvent > EventStore.Core.Bus.IHandle < EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward > EventStore.Core.Bus.IHandle < EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward > EventStore.Core.Bus.IHandle < EventStore.Core.Messages.ClientMessage.ReadAllEventsForward > EventStore.Core.Bus.IHandle < EventStore.Core.Messages.ClientMessage.WriteEvents > EventStore.Core.Bus.IHandle < EventStore.Core.Messages.ClientMessage.DeleteStream > EventStore.Core.Bus.IHandle < EventStore.Core.Messages.SystemMessage.SubSystemInitialized > EventStore.Core.Bus.IHandle < ProjectionCoreServiceMessage.SubComponentStarted > EventStore.Core.Bus.IHandle < ProjectionCoreServiceMessage.SubComponentStopped > Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class RequestResponseQueueForwarder : object, IHandle<ClientMessage.ReadEvent>, IHandle<ClientMessage.ReadStreamEventsBackward>, IHandle<ClientMessage.ReadStreamEventsForward>, IHandle<ClientMessage.ReadAllEventsForward>, IHandle<ClientMessage.WriteEvents>, IHandle<ClientMessage.DeleteStream>, IHandle<SystemMessage.SubSystemInitialized>, IHandle<ProjectionCoreServiceMessage.SubComponentStarted>, IHandle<ProjectionCoreServiceMessage.SubComponentStopped> Constructors RequestResponseQueueForwarder(IPublisher, IPublisher) Declaration public RequestResponseQueueForwarder(IPublisher inputQueue, IPublisher externalRequestQueue) Parameters Type Name EventStore.Core.Bus.IPublisher inputQueue EventStore.Core.Bus.IPublisher externalRequestQueue Methods Handle(ClientMessage.DeleteStream) Declaration public void Handle(ClientMessage.DeleteStream msg) Parameters Type Name EventStore.Core.Messages.ClientMessage.DeleteStream msg Handle(ClientMessage.ReadAllEventsForward) Declaration public void Handle(ClientMessage.ReadAllEventsForward msg) Parameters Type Name EventStore.Core.Messages.ClientMessage.ReadAllEventsForward msg Handle(ClientMessage.ReadEvent) Declaration public void Handle(ClientMessage.ReadEvent msg) Parameters Type Name EventStore.Core.Messages.ClientMessage.ReadEvent msg Handle(ClientMessage.ReadStreamEventsBackward) Declaration public void Handle(ClientMessage.ReadStreamEventsBackward msg) Parameters Type Name EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward msg Handle(ClientMessage.ReadStreamEventsForward) Declaration public void Handle(ClientMessage.ReadStreamEventsForward msg) Parameters Type Name EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward msg Handle(ClientMessage.WriteEvents) Declaration public void Handle(ClientMessage.WriteEvents msg) Parameters Type Name EventStore.Core.Messages.ClientMessage.WriteEvents msg Handle(SystemMessage.SubSystemInitialized) Declaration public void Handle(SystemMessage.SubSystemInitialized msg) Parameters Type Name EventStore.Core.Messages.SystemMessage.SubSystemInitialized msg Explicit Interface Implementations IHandle<ProjectionCoreServiceMessage.SubComponentStarted>.Handle(ProjectionCoreServiceMessage.SubComponentStarted) Declaration void IHandle<ProjectionCoreServiceMessage.SubComponentStarted>.Handle(ProjectionCoreServiceMessage.SubComponentStarted message) Parameters Type Name ProjectionCoreServiceMessage.SubComponentStarted message IHandle<ProjectionCoreServiceMessage.SubComponentStopped>.Handle(ProjectionCoreServiceMessage.SubComponentStopped) Declaration void IHandle<ProjectionCoreServiceMessage.SubComponentStopped>.Handle(ProjectionCoreServiceMessage.SubComponentStopped message) Parameters Type Name ProjectionCoreServiceMessage.SubComponentStopped message Implements EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.ClientAPI.Transport.Http.HttpResponse.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Transport.Http.HttpResponse.html",
    "title": "Class HttpResponse | Event Store",
    "keywords": "Class HttpResponse An Http response Inheritance System.Object HttpResponse Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI.Transport.Http Assembly : EventStore.ClientAPI.dll Syntax public class HttpResponse Constructors HttpResponse(HttpResponseMessage) Constructs a new HttpResponse . Declaration public HttpResponse(HttpResponseMessage responseMessage) Parameters Type Name System.Net.Http.HttpResponseMessage responseMessage Fields CharacterSet The character set of the response. Declaration public readonly string CharacterSet Field Value Type System.String ContentEncoding The character encoding of the response. Declaration public readonly string ContentEncoding Field Value Type System.String ContentLength The Content-Length header. Declaration public readonly long ContentLength Field Value Type System.Int64 ContentType The Content-Type header. Declaration public readonly string ContentType Field Value Type System.String Headers A Collection of Http response headers. Declaration public readonly HttpResponseHeaders Headers Field Value Type System.Net.Http.Headers.HttpResponseHeaders HttpStatusCode The Http response's status code. Declaration public readonly int HttpStatusCode Field Value Type System.Int32 Method The Http method used. Declaration public readonly string Method Field Value Type System.String StatusDescription The Http response's status description. Declaration public readonly string StatusDescription Field Value Type System.String Properties Body The Http response body. Declaration public string Body { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CoreProjectionCheckpointManager.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CoreProjectionCheckpointManager.html",
    "title": "Class CoreProjectionCheckpointManager | Event Store",
    "keywords": "Class CoreProjectionCheckpointManager Inheritance System.Object CoreProjectionCheckpointManager DefaultCheckpointManager Implements IProjectionCheckpointManager EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.ReadyForCheckpoint > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.RestartRequested > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.Failed > ICoreProjectionCheckpointManager IEmittedEventWriter Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public abstract class CoreProjectionCheckpointManager : object, IProjectionCheckpointManager, IHandle<CoreProjectionProcessingMessage.ReadyForCheckpoint>, IHandle<CoreProjectionProcessingMessage.RestartRequested>, IHandle<CoreProjectionProcessingMessage.Failed>, ICoreProjectionCheckpointManager, IEmittedEventWriter Constructors CoreProjectionCheckpointManager(IPublisher, Guid, ProjectionConfig, String, PositionTagger, ProjectionNamesBuilder, Boolean) Declaration protected CoreProjectionCheckpointManager(IPublisher publisher, Guid projectionCorrelationId, ProjectionConfig projectionConfig, string name, PositionTagger positionTagger, ProjectionNamesBuilder namingBuilder, bool usePersistentCheckpoints) Parameters Type Name EventStore.Core.Bus.IPublisher publisher Guid projectionCorrelationId ProjectionConfig projectionConfig System.String name PositionTagger positionTagger ProjectionNamesBuilder namingBuilder System.Boolean usePersistentCheckpoints Fields _currentCheckpoint Declaration protected ProjectionCheckpoint _currentCheckpoint Field Value Type ProjectionCheckpoint _logger Declaration protected readonly ILogger _logger Field Value Type EventStore.Common.Log.ILogger _namingBuilder Declaration protected readonly ProjectionNamesBuilder _namingBuilder Field Value Type ProjectionNamesBuilder _projectionConfig Declaration protected readonly ProjectionConfig _projectionConfig Field Value Type ProjectionConfig _publisher Declaration protected readonly IPublisher _publisher Field Value Type EventStore.Core.Bus.IPublisher _stopped Declaration protected bool _stopped Field Value Type System.Boolean _stopping Declaration protected bool _stopping Field Value Type System.Boolean Properties LastProcessedEventPosition Declaration public CheckpointTag LastProcessedEventPosition { get; } Property Value Type CheckpointTag Methods BeginLoadPartitionStateAt(String, CheckpointTag, Action<PartitionState>) Declaration public abstract void BeginLoadPartitionStateAt(string statePartition, CheckpointTag requestedStateCheckpointTag, Action<PartitionState> loadCompleted) Parameters Type Name System.String statePartition CheckpointTag requestedStateCheckpointTag Action < PartitionState > loadCompleted BeginLoadPrerecordedEvents(CheckpointTag) Declaration public virtual void BeginLoadPrerecordedEvents(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag BeginWriteCheckpoint(CheckpointTag, String) Declaration protected abstract void BeginWriteCheckpoint(CheckpointTag requestedCheckpointPosition, string requestedCheckpointState) Parameters Type Name CheckpointTag requestedCheckpointPosition System.String requestedCheckpointState CapturePartitionStateUpdated(String, PartitionState, PartitionState) Declaration protected abstract void CapturePartitionStateUpdated(string partition, PartitionState oldState, PartitionState newState) Parameters Type Name System.String partition PartitionState oldState PartitionState newState CheckpointSuggested(CheckpointTag, Single) Declaration public bool CheckpointSuggested(CheckpointTag checkpointTag, float progress) Parameters Type Name CheckpointTag checkpointTag System.Single progress Returns Type Description System.Boolean CheckpointWritten(CheckpointTag) Declaration protected void CheckpointWritten(CheckpointTag lastCompletedCheckpointPosition) Parameters Type Name CheckpointTag lastCompletedCheckpointPosition CreateProjectionCheckpoint(CheckpointTag) Declaration protected abstract ProjectionCheckpoint CreateProjectionCheckpoint(CheckpointTag checkpointPosition) Parameters Type Name CheckpointTag checkpointPosition Returns Type Description ProjectionCheckpoint EmitPartitionCheckpoints() Declaration protected abstract void EmitPartitionCheckpoints() EnsureStarted() Declaration protected void EnsureStarted() EventProcessed(CheckpointTag, Single) Declaration public void EventProcessed(CheckpointTag checkpointTag, float progress) Parameters Type Name CheckpointTag checkpointTag System.Single progress EventsEmitted(EmittedEventEnvelope[], Guid, String) Declaration public void EventsEmitted(EmittedEventEnvelope[] scheduledWrites, Guid causedBy, string correlationId) Parameters Type Name EmittedEventEnvelope [] scheduledWrites Guid causedBy System.String correlationId GetStatistics(ProjectionStatistics) Declaration public virtual void GetStatistics(ProjectionStatistics info) Parameters Type Name ProjectionStatistics info Handle(CoreProjectionProcessingMessage.Failed) Declaration public void Handle(CoreProjectionProcessingMessage.Failed message) Parameters Type Name CoreProjectionProcessingMessage.Failed message Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint) Declaration public void Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint message) Parameters Type Name CoreProjectionProcessingMessage.ReadyForCheckpoint message Handle(CoreProjectionProcessingMessage.RestartRequested) Declaration public void Handle(CoreProjectionProcessingMessage.RestartRequested message) Parameters Type Name CoreProjectionProcessingMessage.RestartRequested message Initialize() Declaration public virtual void Initialize() PartitionCompleted(String) Declaration public abstract void PartitionCompleted(string partition) Parameters Type Name System.String partition PrerecordedEventsLoaded(CheckpointTag) Declaration protected void PrerecordedEventsLoaded(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag Progress(Single) Declaration public void Progress(float progress) Parameters Type Name System.Single progress RecordEventOrder(ResolvedEvent, CheckpointTag, Action) Declaration public abstract void RecordEventOrder(ResolvedEvent resolvedEvent, CheckpointTag orderCheckpointTag, Action committed) Parameters Type Name ResolvedEvent resolvedEvent CheckpointTag orderCheckpointTag Action committed RequestRestart(String) Declaration protected void RequestRestart(string reason) Parameters Type Name System.String reason SendPrerecordedEvent(ResolvedEvent, CheckpointTag, Int64) Declaration protected void SendPrerecordedEvent(ResolvedEvent pair, CheckpointTag positionTag, long prerecordedEventMessageSequenceNumber) Parameters Type Name EventStore.Core.Data.ResolvedEvent pair CheckpointTag positionTag System.Int64 prerecordedEventMessageSequenceNumber Start(CheckpointTag, PartitionState) Declaration public virtual void Start(CheckpointTag checkpointTag, PartitionState rootPartitionState) Parameters Type Name CheckpointTag checkpointTag PartitionState rootPartitionState StateUpdated(String, PartitionState, PartitionState) Declaration public void StateUpdated(string partition, PartitionState oldState, PartitionState newState) Parameters Type Name System.String partition PartitionState oldState PartitionState newState Stopped() Declaration public void Stopped() Stopping() Declaration public void Stopping() Implements IProjectionCheckpointManager EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> ICoreProjectionCheckpointManager IEmittedEventWriter"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.SetRunAs.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.SetRunAs.html",
    "title": "Class ProjectionManagementMessage.Command.SetRunAs | Event Store",
    "keywords": "Class ProjectionManagementMessage.Command.SetRunAs Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Command.ControlMessage ProjectionManagementMessage.Command.SetRunAs Inherited Members ProjectionManagementMessage.Command.ControlMessage.RunAs ProjectionManagementMessage.Command.ControlMessage.Envelope EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class SetRunAs : ProjectionManagementMessage.Command.ControlMessage Constructors SetRunAs(IEnvelope, String, ProjectionManagementMessage.RunAs, ProjectionManagementMessage.Command.SetRunAs.SetRemove) Declaration public SetRunAs(IEnvelope envelope, string name, ProjectionManagementMessage.RunAs runAs, ProjectionManagementMessage.Command.SetRunAs.SetRemove action) Parameters Type Name EventStore.Core.Messaging.IEnvelope envelope System.String name ProjectionManagementMessage.RunAs runAs ProjectionManagementMessage.Command.SetRunAs.SetRemove action Properties Action Declaration public ProjectionManagementMessage.Command.SetRunAs.SetRemove Action { get; } Property Value Type ProjectionManagementMessage.Command.SetRunAs.SetRemove MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ProjectionManagementMessage.Command.ControlMessage.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.ClusterSettings.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ClusterSettings.html",
    "title": "Class ClusterSettings | Event Store",
    "keywords": "Class ClusterSettings Contains settings relating to a connection to a cluster. Inheritance System.Object ClusterSettings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public sealed class ClusterSettings Fields ClusterDns The DNS name to use for discovering endpoints. Declaration public readonly string ClusterDns Field Value Type System.String ExternalGossipPort The well-known endpoint on which cluster managers are running. Declaration public readonly int ExternalGossipPort Field Value Type System.Int32 GossipSeeds Endpoints for seeding gossip if not using DNS. Declaration public readonly GossipSeed[] GossipSeeds Field Value Type GossipSeed [] GossipTimeout Timeout for cluster gossip. Declaration public TimeSpan GossipTimeout Field Value Type System.TimeSpan MaxDiscoverAttempts The maximum number of attempts for discovering endpoints. Declaration public readonly int MaxDiscoverAttempts Field Value Type System.Int32 NodePreference Prefer a randomly selected node. Declaration public NodePreference NodePreference Field Value Type NodePreference Methods Create() Creates a new set of ClusterSettings Declaration public static ClusterSettingsBuilder Create() Returns Type Description ClusterSettingsBuilder A ClusterSettingsBuilder that can be used to build up a ClusterSettings"
  },
  "dotnet-api/code/EventStore.ClientAPI.UserManagement.UsersManager.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.UserManagement.UsersManager.html",
    "title": "Class UsersManager | Event Store",
    "keywords": "Class UsersManager API for managing users in Event Store through C# code. Communicates with Event Store over the RESTful API. All methods in this class are asynchronous. Inheritance System.Object UsersManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI.UserManagement Assembly : EventStore.ClientAPI.dll Syntax public class UsersManager Constructors UsersManager(ILogger, EndPoint, TimeSpan, Boolean, HttpMessageHandler) Creates a new instance of UsersManager . Declaration public UsersManager(ILogger log, EndPoint httpEndPoint, TimeSpan operationTimeout, bool tlsTerminatedEndpoint = false, HttpMessageHandler httpMessageHandler = null) Parameters Type Name ILogger log System.Net.EndPoint httpEndPoint System.TimeSpan operationTimeout System.Boolean tlsTerminatedEndpoint System.Net.Http.HttpMessageHandler httpMessageHandler Methods ChangePasswordAsync(String, String, String, UserCredentials) Change a users password. Declaration public Task ChangePasswordAsync(string login, string oldPassword, string newPassword, UserCredentials userCredentials = null) Parameters Type Name System.String login System.String oldPassword System.String newPassword UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task A task representing the operation. CreateUserAsync(String, String, String[], String, UserCredentials) Create a new user. Declaration public Task CreateUserAsync(string login, string fullName, string[] groups, string password, UserCredentials userCredentials = null) Parameters Type Name System.String login System.String fullName System.String [] groups System.String password UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task A task representing the operation. DeleteUserAsync(String, UserCredentials) Deletes a user. Declaration public Task DeleteUserAsync(string login, UserCredentials userCredentials = null) Parameters Type Name System.String login UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task A task representing the operation. DisableAsync(String, UserCredentials) Disables a user Declaration public Task DisableAsync(string login, UserCredentials userCredentials = null) Parameters Type Name System.String login UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task A task representing the operation. EnableAsync(String, UserCredentials) Enables a user Declaration public Task EnableAsync(string login, UserCredentials userCredentials = null) Parameters Type Name System.String login UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task A task representing the operation. GetCurrentUserAsync(UserCredentials) Gets the current users details Declaration public Task<UserDetails> GetCurrentUserAsync(UserCredentials userCredentials) Parameters Type Name UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < UserDetails > A UserDetails object for the currently logged in user. GetUserAsync(String, UserCredentials) Gets a users details. Declaration public Task<UserDetails> GetUserAsync(string login, UserCredentials userCredentials) Parameters Type Name System.String login UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < UserDetails > A UserDetails object for the user ListAllAsync(UserCredentials) Lists all users. Declaration public Task<List<UserDetails>> ListAllAsync(UserCredentials userCredentials = null) Parameters Type Name UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.List < UserDetails >> String of JSON containing user full names and logins. ResetPasswordAsync(String, String, UserCredentials) Reset a users password. Declaration public Task ResetPasswordAsync(string login, string newPassword, UserCredentials userCredentials = null) Parameters Type Name System.String login System.String newPassword UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task A task representing the operation. UpdateUserAsync(String, String, String[], UserCredentials) Update an existing user. Declaration public Task UpdateUserAsync(string login, string fullName, string[] groups, UserCredentials userCredentials = null) Parameters Type Name System.String login System.String fullName System.String [] groups UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task A task representing the operation."
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Grpc.ProjectionManagement.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Grpc.ProjectionManagement.html",
    "title": "Class ProjectionManagement | Event Store",
    "keywords": "Class ProjectionManagement Inheritance System.Object ProjectionManagement Namespace : EventStore.Projections.Core.Services.Grpc Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionManagement : Projections.ProjectionsBase Constructors ProjectionManagement(IQueuedHandler, IAuthenticationProvider) Declaration public ProjectionManagement(IQueuedHandler queue, IAuthenticationProvider authenticationProvider) Parameters Type Name EventStore.Core.Bus.IQueuedHandler queue EventStore.Core.Authentication.IAuthenticationProvider authenticationProvider Methods Create(CreateReq, ServerCallContext) Declaration public override Task<CreateResp> Create(CreateReq request, ServerCallContext context) Parameters Type Name CreateReq request ServerCallContext context Returns Type Description Task < CreateResp > Delete(DeleteReq, ServerCallContext) Declaration public override Task<DeleteResp> Delete(DeleteReq request, ServerCallContext context) Parameters Type Name DeleteReq request ServerCallContext context Returns Type Description Task < DeleteResp > Disable(DisableReq, ServerCallContext) Declaration public override Task<DisableResp> Disable(DisableReq request, ServerCallContext context) Parameters Type Name DisableReq request ServerCallContext context Returns Type Description Task < DisableResp > Enable(EnableReq, ServerCallContext) Declaration public override Task<EnableResp> Enable(EnableReq request, ServerCallContext context) Parameters Type Name EnableReq request ServerCallContext context Returns Type Description Task < EnableResp > Reset(ResetReq, ServerCallContext) Declaration public override Task<ResetResp> Reset(ResetReq request, ServerCallContext context) Parameters Type Name ResetReq request ServerCallContext context Returns Type Description Task < ResetResp > Result(ResultReq, ServerCallContext) Declaration public override Task<ResultResp> Result(ResultReq request, ServerCallContext context) Parameters Type Name ResultReq request ServerCallContext context Returns Type Description Task < ResultResp > State(StateReq, ServerCallContext) Declaration public override Task<StateResp> State(StateReq request, ServerCallContext context) Parameters Type Name StateReq request ServerCallContext context Returns Type Description Task < StateResp > Statistics(StatisticsReq, IServerStreamWriter<StatisticsResp>, ServerCallContext) Declaration public override Task Statistics(StatisticsReq request, IServerStreamWriter<StatisticsResp> responseStream, ServerCallContext context) Parameters Type Name StatisticsReq request IServerStreamWriter < StatisticsResp > responseStream ServerCallContext context Returns Type Description Task Update(UpdateReq, ServerCallContext) Declaration public override Task<UpdateResp> Update(UpdateReq request, ServerCallContext context) Parameters Type Name UpdateReq request ServerCallContext context Returns Type Description Task < UpdateResp >"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Management.IMultiStreamMessageWriter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Management.IMultiStreamMessageWriter.html",
    "title": "Interface IMultiStreamMessageWriter | Event Store",
    "keywords": "Interface IMultiStreamMessageWriter Namespace : EventStore.Projections.Core.Services.Management Assembly : EventStore.Projections.Core.dll Syntax public interface IMultiStreamMessageWriter Methods PublishResponse(String, Guid, Object) Declaration void PublishResponse(string command, Guid workerId, object body) Parameters Type Name System.String command Guid workerId System.Object body Reset() Declaration void Reset()"
  },
  "dotnet-api/code/EventStore.ClientAPI.DeleteResult.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.DeleteResult.html",
    "title": "Struct DeleteResult | Event Store",
    "keywords": "Struct DeleteResult Result type returned after deleting a stream. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public struct DeleteResult Constructors DeleteResult(Position) Constructs a new DeleteResult . Declaration public DeleteResult(Position logPosition) Parameters Type Name Position logPosition Fields LogPosition The LogPosition of the write. Declaration public readonly Position LogPosition Field Value Type Position Extension Methods EnumExtensions.EnumValueName<T>(T)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessageBase.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessageBase.html",
    "title": "Class CoreProjectionManagementMessageBase | Event Store",
    "keywords": "Class CoreProjectionManagementMessageBase Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionManagementControlMessage CoreProjectionStatusMessage.CoreProjectionStatusMessageBase Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public abstract class CoreProjectionManagementMessageBase : Message Constructors CoreProjectionManagementMessageBase(Guid) Declaration protected CoreProjectionManagementMessageBase(Guid projectionId) Parameters Type Name Guid projectionId Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId ProjectionId Declaration public Guid ProjectionId { get; } Property Value Type Guid"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.OperationFailed.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.OperationFailed.html",
    "title": "Class ProjectionManagementMessage.OperationFailed | Event Store",
    "keywords": "Class ProjectionManagementMessage.OperationFailed Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.OperationFailed ProjectionManagementMessage.Conflict ProjectionManagementMessage.NotAuthorized ProjectionManagementMessage.NotFound Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class OperationFailed : Message Constructors OperationFailed(String) Declaration public OperationFailed(string reason) Parameters Type Name System.String reason Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId Reason Declaration public string Reason { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ICoreProjection.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ICoreProjection.html",
    "title": "Interface ICoreProjection | Event Store",
    "keywords": "Interface ICoreProjection Inherited Members EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.CheckpointLoaded>.Handle(CoreProjectionProcessingMessage.CheckpointLoaded) EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.PrerecordedEventsLoaded>.Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded) EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.CheckpointCompleted>.Handle(CoreProjectionProcessingMessage.CheckpointCompleted) EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.RestartRequested>.Handle(CoreProjectionProcessingMessage.RestartRequested) EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.Failed>.Handle(CoreProjectionProcessingMessage.Failed) Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public interface ICoreProjection : IHandle<CoreProjectionProcessingMessage.CheckpointLoaded>, IHandle<CoreProjectionProcessingMessage.PrerecordedEventsLoaded>, IHandle<CoreProjectionProcessingMessage.CheckpointCompleted>, IHandle<CoreProjectionProcessingMessage.RestartRequested>, IHandle<CoreProjectionProcessingMessage.Failed>"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.IEmittedStreamContainer.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.IEmittedStreamContainer.html",
    "title": "Interface IEmittedStreamContainer | Event Store",
    "keywords": "Interface IEmittedStreamContainer Inherited Members EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.ReadyForCheckpoint>.Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint) EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.RestartRequested>.Handle(CoreProjectionProcessingMessage.RestartRequested) EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.Failed>.Handle(CoreProjectionProcessingMessage.Failed) EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.EmittedStreamAwaiting>.Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting) EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.EmittedStreamWriteCompleted>.Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted) Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public interface IEmittedStreamContainer : IProjectionCheckpointManager, IHandle<CoreProjectionProcessingMessage.ReadyForCheckpoint>, IHandle<CoreProjectionProcessingMessage.RestartRequested>, IHandle<CoreProjectionProcessingMessage.Failed>, IHandle<CoreProjectionProcessingMessage.EmittedStreamAwaiting>, IHandle<CoreProjectionProcessingMessage.EmittedStreamWriteCompleted>"
  },
  "dotnet-api/code/EventStore.ClientAPI.ConditionalWriteStatus.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ConditionalWriteStatus.html",
    "title": "Enum ConditionalWriteStatus | Event Store",
    "keywords": "Enum ConditionalWriteStatus The reason why a conditional write fails Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public enum ConditionalWriteStatus Fields Name Description StreamDeleted The stream has been deleted Succeeded The write operation succeeded VersionMismatch The expected version does not match actual stream version Extension Methods EnumExtensions.EnumValueName<ConditionalWriteStatus>()"
  },
  "dotnet-api/code/EventStore.ClientAPI.ConnectionString.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ConnectionString.html",
    "title": "Class ConnectionString | Event Store",
    "keywords": "Class ConnectionString Methods for dealing with connection strings. Inheritance System.Object ConnectionString Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class ConnectionString Methods GetConnectionSettings(String, ConnectionSettingsBuilder) Returns a ConnectionSettings for a given connection string. Declaration public static ConnectionSettings GetConnectionSettings(string connectionString, ConnectionSettingsBuilder builder = null) Parameters Type Name System.String connectionString ConnectionSettingsBuilder builder Returns Type Description ConnectionSettings a ConnectionSettings from the connection string"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.ProjectionResult.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.ProjectionResult.html",
    "title": "Class ProjectionManagementMessage.ProjectionResult | Event Store",
    "keywords": "Class ProjectionManagementMessage.ProjectionResult Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.ProjectionDataBase ProjectionManagementMessage.ProjectionResult Inherited Members ProjectionManagementMessage.ProjectionDataBase.Name ProjectionManagementMessage.ProjectionDataBase.Exception ProjectionManagementMessage.ProjectionDataBase.Partition ProjectionManagementMessage.ProjectionDataBase.Position EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionResult : ProjectionManagementMessage.ProjectionDataBase Constructors ProjectionResult(String, String, String, CheckpointTag, Exception) Declaration public ProjectionResult(string name, string partition, string result, CheckpointTag position, Exception exception = null) Parameters Type Name System.String name System.String partition System.String result CheckpointTag position Exception exception Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ProjectionManagementMessage.ProjectionDataBase.MsgTypeId Result Declaration public string Result { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.TransactionFilePositionTagger.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.TransactionFilePositionTagger.html",
    "title": "Class TransactionFilePositionTagger | Event Store",
    "keywords": "Class TransactionFilePositionTagger Inheritance System.Object PositionTagger TransactionFilePositionTagger Inherited Members PositionTagger.Phase Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class TransactionFilePositionTagger : PositionTagger Constructors TransactionFilePositionTagger(Int32) Declaration public TransactionFilePositionTagger(int phase) Parameters Type Name System.Int32 phase Methods AdjustTag(CheckpointTag) Declaration public override CheckpointTag AdjustTag(CheckpointTag tag) Parameters Type Name CheckpointTag tag Returns Type Description CheckpointTag Overrides PositionTagger.AdjustTag(CheckpointTag) IsCompatible(CheckpointTag) Declaration public override bool IsCompatible(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag Returns Type Description System.Boolean Overrides PositionTagger.IsCompatible(CheckpointTag) IsMessageAfterCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public override bool IsMessageAfterCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.CommittedEventDistributed committedEvent Returns Type Description System.Boolean Overrides PositionTagger.IsMessageAfterCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.CommittedEventDistributed committedEvent Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionDeleted) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.EventReaderPartitionDeleted partitionDeleted) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.EventReaderPartitionDeleted partitionDeleted Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionDeleted) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionEof) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.EventReaderPartitionEof partitionEof) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.EventReaderPartitionEof partitionEof Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionEof) MakeZeroCheckpointTag() Declaration public override CheckpointTag MakeZeroCheckpointTag() Returns Type Description CheckpointTag Overrides PositionTagger.MakeZeroCheckpointTag()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ExtraMetaData.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ExtraMetaData.html",
    "title": "Class ExtraMetaData | Event Store",
    "keywords": "Class ExtraMetaData Inheritance System.Object ExtraMetaData Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class ExtraMetaData : object Constructors ExtraMetaData(Dictionary<String, JRaw>) Declaration public ExtraMetaData(Dictionary<string, JRaw> metadata) Parameters Type Name Dictionary < System.String , JRaw > metadata ExtraMetaData(Dictionary<String, String>) Declaration public ExtraMetaData(Dictionary<string, string> metadata) Parameters Type Name Dictionary < System.String , System.String > metadata Properties Metadata Declaration public Dictionary<string, string> Metadata { get; } Property Value Type Dictionary < System.String , System.String >"
  },
  "dotnet-api/code/EventStore.ClientAPI.ClientOperations.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ClientOperations.html",
    "title": "Namespace EventStore.ClientAPI.ClientOperations | Event Store",
    "keywords": "Namespace EventStore.ClientAPI.ClientOperations Classes MaximumSubscribersReachedException Thrown when max subscribers is set on subscription and it has been reached PersistentSubscriptionDeletedException Thrown when the persistent subscription has been deleted to subscribers connected to it"
  },
  "http-api/stream-metadata/index.html": {
    "href": "http-api/stream-metadata/index.html",
    "title": "Stream metadata | Event Store",
    "keywords": "Stream metadata Every stream in Event Store has metadata stream associated with it, prefixed by $$ , so the metadata stream from a stream called foo is $$foo . Internally, the metadata includes information such as the ACL of the stream, the maximum count and age for the events in the stream. Client code can also add information into stream metadata for use with projections or the client API. Stream metadata is stored internally as JSON, and you can access it over the HTTP API. Reading stream metadata To read the metadata, issue a GET request to the attached metadata resource, which is typically of the form: http://{eventstore-ip-address}/streams/{stream-name}/metadata You should not access metadata by constructing this URL yourself, as the right to change the resource address is reserved. Instead, you should follow the link from the stream itself, which enables your client to tolerate future changes to the addressing structure. Request Response curl -i -H \"Accept:application/vnd.eventstore.atom+json\" http://127.0.0.1:2113/streams/%24users --user admin:changeit HTTP/1.1 200 OK Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Cache-Control: max-age=0, no-cache, must-revalidate Vary: Accept ETag: \"3;-2060438500\" Content-Type: application/vnd.eventstore.atom+json; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Thu, 23 Aug 2018 10:03:34 GMT Content-Length: 2670 Keep-Alive: timeout=15,max=100 { \"title\": \"Event stream '$users'\", \"id\": \"http://127.0.0.1:2113/streams/%24users\", \"updated\": \"2018-08-23T09:19:37.880827Z\", \"streamId\": \"$users\", \"author\": { \"name\": \"EventStore\" }, \"headOfStream\": true, \"selfUrl\": \"http://127.0.0.1:2113/streams/%24users\", \"eTag\": \"3;-2060438500\", \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/%24users\", \"relation\": \"self\" }, { \"uri\": \"http://127.0.0.1:2113/streams/%24users/head/backward/20\", \"relation\": \"first\" }, { \"uri\": \"http://127.0.0.1:2113/streams/%24users/4/forward/20\", \"relation\": \"previous\" }, { \"uri\": \"http://127.0.0.1:2113/streams/%24users/metadata\", \"relation\": \"metadata\" } ], \"entries\": [ ] } Once you have the URI of the metadata stream, issue a GET request to retrieve the metadata: Request curl -i -H \"Accept:application/vnd.eventstore.atom+json\" http://127.0.0.1:2113/streams/%24users/metadata --user admin:changeit If you have security enabled, reading metadata may require that you pass credentials, as in the examples above. If credentials are required and you do not pass them, then you receive a '401 Unauthorized' response. Request Response curl -i -H \"Accept:application/vnd.eventstore.atom+json\" http://127.0.0.1:2113/streams/%24users HTTP/1.1 401 Unauthorized Access-Control-Allow-Methods: GET, POST, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion WWW-Authenticate: Basic realm=\"ES\" Content-Type: text/plain; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Thu, 23 Aug 2018 10:26:52 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100 Writing metadata To update the metadata for a stream, issue a POST request to the metadata resource. Inside a file named metadata.json : [ { \"eventId\": \"7c314750-05e1-439f-b2eb-f5b0e019be72\", \"eventType\": \"$user-updated\", \"data\": { \"readRole\": \"$all\", \"metaReadRole\": \"$all\" } } ] You can also add user-specified metadata here. Some examples user-specified metadata are: Which adapter populates a stream. Which projection created a stream. A correlation ID to a business process. You then post this information is then posted to the stream: Request Response curl -i -d @metadata.json http://127.0.0.1:2113/streams/%24users/metadata --user admin:changeit -H \"Content-Type: application/vnd.eventstore.events+json\" HTTP/1.1 201 Created Access-Control-Allow-Methods: GET, POST, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Location: http://127.0.0.1:2113/streams/%24%24%24users/0 Content-Type: text/plain; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Thu, 23 Aug 2018 10:35:19 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100 If the specified user does not have permissions to write to the stream metadata, you receive a '401 Unauthorized' response."
  },
  "http-api/security/index.html": {
    "href": "http-api/security/index.html",
    "title": "Security | Event Store",
    "keywords": "Security Event Store supports basic authentication for HTTP API calls, and access control lists (ACL). Authentication Creating users Event Store supports basic HTTP authentication to internal users. You create these users with the RESTful API or the admin console. You need to use the credentials of the default user in the request, which has the user name of admin , and the password of changeit . Request Response curl -i -d \"@new-user.json\" \"http://127.0.0.1:2113/users\" -H \"Content-Type:application/json\" HTTP/1.1 201 Created Access-Control-Allow-Methods: GET, POST, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Location: http://127.0.0.1:2113/users/adminuser Content-Type: application/json; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Thu, 23 Aug 2018 09:08:40 GMT Content-Length: 90 Keep-Alive: timeout=15,max=100 { \"loginName\": \"adminuser\", \"success\": true, \"error\": \"Success\", \"msgTypeId\": 50 }% Once you have added users, you can use their details with requests. Note You can also use the 'trusted intermediary' header for externalized authentication that allows you to integrate almost any authentication system with Event Store. Read more about the trusted intermediary header . If you were to use the wrong user or no user when a request requires one, you receive a 401 Unauthorized response. Request Response curl -i 'http://127.0.0.1:2113/streams/$all' -u admin:password HTTP/1.1 401 Unauthorized Access-Control-Allow-Methods: Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion WWW-Authenticate: Basic realm=\"ES\" Content-Type: Server: Mono-HTTPAPI/1.0 Date: Thu, 23 Aug 2018 09:27:34 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100 As you pass the username and password in the request we recommend you run Event Store over HTTP, and enable SSL to encrypt the user information. Read this guide for instructions . If you are running the clustered version you can also setup SSL for the replication protocol. <!-- TODO: Does this need further explanation? Any more details anywhere? --> Access control lists Alongside authentication, Event Store supports per stream configuration of Access Control Lists (ACL). To configure the ACL of a stream go to its head and look for the metadata relationship link to fetch the metadata for the stream. To set access control lists over HTTP you can post to the metadata stream as with setting any other metadata . You can also set Access Control Lists for a stream in the admin UI. For more information on the structure of Access Control Lists read Access Control Lists . <!-- TODO: Merge ACL here? -->"
  },
  "http-api/reading-streams/index.html": {
    "href": "http-api/reading-streams/index.html",
    "title": "Reading streams and events | Event Store",
    "keywords": "Reading streams and events Reading a stream Event Store exposes streams as a resource located at http(s)://{yourdomain.com}:{port}/streams/{stream} . If you issue a simple GET request to this resource, you receive a standard AtomFeed document as a response. Request Response curl -i -H \"Accept:application/vnd.eventstore.atom+json\" \"http://127.0.0.1:2113/streams/newstream\" HTTP/1.1 200 OK Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Cache-Control: max-age=0, no-cache, must-revalidate Vary: Accept ETag: \"0;-2060438500\" Content-Type: application/vnd.eventstore.atom+json; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Fri, 15 Dec 2017 12:23:23 GMT Content-Length: 1262 Keep-Alive: timeout=15,max=100 { \"title\": \"Event stream 'newstream'\", \"id\": \"http://127.0.0.1:2113/streams/newstream\", \"updated\": \"2017-12-15T12:19:32.021776Z\", \"streamId\": \"newstream\", \"author\": { \"name\": \"EventStore\" }, \"headOfStream\": true, \"selfUrl\": \"http://127.0.0.1:2113/streams/newstream\", \"eTag\": \"0;-2060438500\", \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/newstream\", \"relation\": \"self\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/head/backward/20\", \"relation\": \"first\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/1/forward/20\", \"relation\": \"previous\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/metadata\", \"relation\": \"metadata\" } ], \"entries\": [ { \"title\": \"0@newstream\", \"id\": \"http://127.0.0.1:2113/streams/newstream/0\", \"updated\": \"2017-12-15T12:19:32.021776Z\", \"author\": { \"name\": \"EventStore\" }, \"summary\": \"event-type\", \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/newstream/0\", \"relation\": \"edit\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/0\", \"relation\": \"alternate\" } ] } ] } Reading an event from a stream The feed has one item in it, and if there are more than one, then items are sorted from newest to oldest. For each entry, there are a series of links to the actual events, we cover embedding data into a stream later . To GET an event, follow the alternate link and set your Accept headers to the mime type you would like the event in. The accepted content types for GET requests are: application/xml application/atom+xml application/json application/vnd.eventstore.atom+json text/xml text/html The non-atom version of the event has fewer details about the event. Request Response curl -i http://127.0.0.1:2113/streams/newstream/0 -H \"Accept: application/json\" HTTP/1.1 200 OK Access-Control-Allow-Methods: GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER Access-Control-Allow-Origin: * Cache-Control: max-age=31536000, public Vary: Accept Content-Type: application/json; charset: utf-8 Server: Mono-HTTPAPI/1.0 Date: Wed, 03 Jul 2013 11:09:12 GMT Content-Length: 14 Keep-Alive: timeout=15,max=100 { \"a\": \"1\" } Feed paging The next step in understanding how to read a stream is the first / last / previous / next links within a stream. Event Store supplies these links so you can read through a stream, and they follow the pattern defined in RFC 5005 . In the example above the server returned the following links as part of its result: \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/newstream\", \"relation\": \"self\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/head/backward/20\", \"relation\": \"first\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/2/forward/20\", \"relation\": \"previous\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/metadata\", \"relation\": \"metadata\" } ], This shows that there is not a next URL as all the information is in this request and that the URL requested is the first link. When dealing with these URLs, there are two ways of reading the data in the stream. You GET the last link and move backwards following previous links, or You GET the first link and follow the next links, and the final item will not have a next link. If you want to follow a live stream, then you keep following the previous links. When you reach the end of a stream, you receive an empty document with no entries or previous link. You then continue polling this URI (in the future a document will appear). You can see this by trying the previous link from the above feed. Request Response curl -i http://127.0.0.1:2113/streams/newstream/1/forward/20 -H \"Accept:application/vnd.eventstore.atom+json\" HTTP/1.1 200 OK Access-Control-Allow-Methods: GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTo, ES-ExpectedVersion Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position Cache-Control: max-age=0, no-cache, must-revalidate Vary: Accept ETag: \"0;248368668\" Content-Type: application/vnd.eventstore.atom+json; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Fri, 13 Mar 2015 14:04:47 GMT Content-Length: 795 Keep-Alive: timeout=15,max=100 { \"title\": \"Event stream 'newstream'\", \"id\": \"<http://127.0.0.1:2113/streams/newstream\">, \"updated\": \"0001-01-01T00:00:00Z\", \"streamId\": \"newstream\", \"author\": { \"name\": \"EventStore\" }, \"headOfStream\": false, \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/newstream\", \"relation\": \"self\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/head/backward/20\", \"relation\": \"first\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/0/forward/20\", \"relation\": \"last\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/0/backward/20\", \"relation\": \"next\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/metadata\", \"relation\": \"metadata\" } ], \"entries\": \\[] } When parsing an atom subscription, the IDs of events always stay the same. This is important for figuring out if you are referring to the same event. Paging through events Let's now try an example with more than a single page. First create the multiple events: Request Response curl -i -d \"@paging-events.json\" \"http://127.0.0.1:2113/streams/alphabet\" -H \"Content-Type:application/vnd.eventstore.events+json\" HTTP/1.1 100 Continue HTTP/1.1 201 Created Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Location: http://127.0.0.1:2113/streams/alphabet/0 Content-Type: text/plain; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Tue, 21 Aug 2018 09:53:46 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100 If you request the stream of events, you see a series of links above the events: Request Response curl -i http://127.0.0.1:2113/streams/alphabet -H \"Accept:application/vnd.eventstore.atom+json\" HTTP/1.1 200 OK Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Cache-Control: max-age=0, no-cache, must-revalidate Vary: Accept ETag: \"26;-2060438500\" Content-Type: application/vnd.eventstore.atom+json; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Tue, 21 Aug 2018 10:12:31 GMT Content-Length: 10727 Keep-Alive: timeout=15,max=100 { \"title\": \"Event stream 'alphabet'\", \"id\": \"http://127.0.0.1:2113/streams/alphabet\", \"updated\": \"2018-08-21T09:53:46.869815Z\", \"streamId\": \"alphabet\", \"author\": { \"name\": \"EventStore\" }, \"headOfStream\": true, \"selfUrl\": \"http://127.0.0.1:2113/streams/alphabet\", \"eTag\": \"26;-2060438500\", \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/alphabet\", \"relation\": \"self\" }, { \"uri\": \"http://127.0.0.1:2113/streams/alphabet/head/backward/20\", \"relation\": \"first\" }, { \"uri\": \"http://127.0.0.1:2113/streams/alphabet/0/forward/20\", \"relation\": \"last\" }, { \"uri\": \"http://127.0.0.1:2113/streams/alphabet/6/backward/20\", \"relation\": \"next\" }, { \"uri\": \"http://127.0.0.1:2113/streams/alphabet/27/forward/20\", \"relation\": \"previous\" }, { \"uri\": \"http://127.0.0.1:2113/streams/alphabet/metadata\", \"relation\": \"metadata\" } ], \"entries\": [ ] } Using the links in the stream of events, you can traverse through all the events in the stream by going to the last URL and following previous links, or by following next links from the first link. For example, if you request the last link from above: Request Response curl -i http://127.0.0.1:2113/streams/alphabet/0/forward/20 -H \"Accept:application/vnd.eventstore.atom+json\" HTTP/1.1 200 OK Access-Control-Allow-Methods: GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Cache-Control: max-age=31536000, public Vary: Accept Content-Type: application/vnd.eventstore.atom+json; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Tue, 21 Aug 2018 10:24:28 GMT Content-Length: 10403 Keep-Alive: timeout=15,max=100 { \"title\": \"Event stream 'alphabet'\", \"id\": \"http://127.0.0.1:2113/streams/alphabet\", \"updated\": \"2018-08-21T09:53:46.869716Z\", \"streamId\": \"alphabet\", \"author\": { \"name\": \"EventStore\" }, \"headOfStream\": false, \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/alphabet\", \"relation\": \"self\" }, { \"uri\": \"http://127.0.0.1:2113/streams/alphabet/head/backward/20\", \"relation\": \"first\" }, { \"uri\": \"http://127.0.0.1:2113/streams/alphabet/20/forward/20\", \"relation\": \"previous\" }, { \"uri\": \"http://127.0.0.1:2113/streams/alphabet/metadata\", \"relation\": \"metadata\" } ], \"entries\": [ ] } You then follow previous links until you are back to the head of the stream, where you can continue reading events in real time by polling the previous link. Note All links except the head link are fully cacheable as you can see in the HTTP header Cache-Control: max-age=31536000, public . This is important when discussing intermediaries and performance as you commonly replay a stream from storage. You should never bookmark links aside from the head of the stream resource, and always follow links. We may in the future change how internal links work, and bookmarking links other than the head may break. Reading all events $all is a special paged stream for all events. You can use the same paged form of reading described above to read all events for a node by pointing the stream at /streams/$all . As it's a stream like any other, you can perform all operations, except posting to it. Note To access the $all stream, you must use admin details. Find more information on the security page. Request Response curl -i http://127.0.0.1:2113/streams/%24all -H \"Accept:application/vnd.eventstore.atom+json\" -u admin:changeit HTTP/1.1 200 OK Access-Control-Allow-Methods: POST, DELETE, GET, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTo, ES-ExpectedVersion Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position Cache-Control: max-age=0, no-cache, must-revalidate Vary: Accept ETag: \"25159393;248368668\" Content-Type: application/vnd.eventstore.atom+json; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Fri, 13 Mar 2015 16:19:09 GMT Content-Length: 12157 Keep-Alive: timeout=15,max=100 { \"title\": \"All events\", \"id\": \"<http://127.0.0.1:2113/streams/%24all\">, \"updated\": \"2015-03-13T16:19:06.548415Z\", \"author\": { \"name\": \"EventStore\" }, \"headOfStream\": false, \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/%24all\", \"relation\": \"self\" }, { \"uri\": \"http://127.0.0.1:2113/streams/%24all/head/backward/20\", \"relation\": \"first\" }, { \"uri\": \"http://127.0.0.1:2113/streams/%24all/00000000000000000000000000000000/forward/20\", \"relation\": \"last\" }, { \"uri\": \"http://127.0.0.1:2113/streams/%24all/00000000017BC0D000000000017BC0D0/backward/20\", \"relation\": \"next\" }, { \"uri\": \"http://127.0.0.1:2113/streams/%24all/0000000001801EBF0000000001801EBF/forward/20\", \"relation\": \"previous\" }, { \"uri\": \"http://127.0.0.1:2113/streams/%24all/metadata\", \"relation\": \"metadata\" } ], \"entries\": [] # TODO: Make complete Conditional GETs The head link supports conditional GET s with the use of ETAGS , a well-known HTTP construct. You can include the ETAG of your last request and issue a conditional GET to the server. If nothing has changed, it won't return the full feed. For example the earlier request has an ETAG: Request Response curl -i http://127.0.0.1:2113/streams/alphabet -H \"Accept:application/vnd.eventstore.atom+json\" ETag: \"26;-2060438500\" You can use this in your next request when polling the stream for changes by putting it in the If-None-Match header. This tells the server to check if the response is the one you already know and returning a '304 not modified' response. If the tags have changed, the server returns a '200 OK' response. You can use this method to optimise your application by not sending large streams if there are no changes. Request Response curl -i http://127.0.0.1:2113/streams/alphabet -H \"Accept:application/vnd.eventstore.atom+json\" -H \"If-None-Match:26;-2060438500\" HTTP/1.1 304 Not Modified Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Content-Type: text/plain; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Tue, 21 Aug 2018 12:07:35 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100 Note You create Etags using the version of the stream and the media type of the stream you are reading. You can't read an Etag from a stream in one media type and use it with another media type. Embedding data into streams in JSON format So far in this guide, the feeds returned have contained links that refer to the actual event data. This is normally a preferable mechanism for several reasons: They can be in a different media type than the feed, and you can negotiate them separately from the feed itself (for example, the feed in JSON, the event in XML). You can cache the event data separately from the feed, and you can point it to different feeds. If you use a linkTo() in your projection this is what happens in your atom feeds. If you are using JSON, you can embed the events into the atom feed events. This can help cut down on the number of requests in some situations, but the messages are larger. There are ways of embedding events and further metadata into your stream by using the embed= parameter. Rich embed mode The rich embed mode returns more properties about the event ( eventtype , streamid , position , and so on) as you can see in the following request. Request Response curl -i -H \"Accept:application/vnd.eventstore.atom+json\" \"http://127.0.0.1:2113/streams/newstream?embed=rich\" HTTP/1.1 200 OK Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTo, ES-ExpectedVersion Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position Cache-Control: max-age=0, no-cache, must-revalidate Vary: Accept ETag: \"0;248368668\" Content-Type: application/vnd.eventstore.atom+json; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Fri, 13 Mar 2015 16:30:57 GMT Content-Length: 1570 Keep-Alive: timeout=15,max=100 { \"title\": \"Event stream 'newstream'\", \"id\": \"<http://127.0.0.1:2113/streams/newstream\">, \"updated\": \"2015-03-13T12:13:42.492473Z\", \"streamId\": \"newstream\", \"author\": { \"name\": \"EventStore\" }, \"headOfStream\": true, \"selfUrl\": \"<http://127.0.0.1:2113/streams/newstream\">, \"eTag\": \"0;248368668\", \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/newstream\", \"relation\": \"self\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/head/backward/20\", \"relation\": \"first\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/1/forward/20\", \"relation\": \"previous\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/metadata\", \"relation\": \"metadata\" } ], \"entries\": [ { \"eventId\": \"fbf4a1a1-b4a3-4dfe-a01f-ec52c34e16e4\", \"eventType\": \"event-type\", \"eventNumber\": 0, \"streamId\": \"newstream\", \"isJson\": true, \"isMetaData\": false, \"isLinkMetaData\": false, \"positionEventNumber\": 0, \"positionStreamId\": \"newstream\", \"title\": \"0@newstream\", \"id\": \"<http://127.0.0.1:2113/streams/newstream/0\">, \"updated\": \"2015-03-13T12:13:42.492473Z\", \"author\": { \"name\": \"EventStore\" }, \"summary\": \"event-type\", \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/newstream/0\", \"relation\": \"edit\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/0\", \"relation\": \"alternate\" } ] } ] } Body embed mode The body embed mode returns the JSON/XML body of the events into the feed as well, depending on the type of the feed. You can see this in the request below: Request Response curl -i -H \"Accept:application/vnd.eventstore.atom+json\" \"http://127.0.0.1:2113/streams/newstream?embed=body\" HTTP/1.1 200 OK Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTo, ES-ExpectedVersion Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position Cache-Control: max-age=0, no-cache, must-revalidate Vary: Accept ETag: \"0;248368668\" Content-Type: application/vnd.eventstore.atom+json; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Fri, 13 Mar 2015 16:32:06 GMT Content-Length: 1608 Keep-Alive: timeout=15,max=100 { \"title\": \"Event stream 'newstream'\", \"id\": \"<http://127.0.0.1:2113/streams/newstream\">, \"updated\": \"2015-03-13T12:13:42.492473Z\", \"streamId\": \"newstream\", \"author\": { \"name\": \"EventStore\" }, \"headOfStream\": true, \"selfUrl\": \"<http://127.0.0.1:2113/streams/newstream\">, \"eTag\": \"0;248368668\", \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/newstream\", \"relation\": \"self\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/head/backward/20\", \"relation\": \"first\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/1/forward/20\", \"relation\": \"previous\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/metadata\", \"relation\": \"metadata\" } ], \"entries\": \\[ { \"eventId\": \"fbf4a1a1-b4a3-4dfe-a01f-ec52c34e16e4\", \"eventType\": \"event-type\", \"eventNumber\": 0, \"data\": \"{\\\\n \"a\": \"1\"\\\\n}\", \"streamId\": \"newstream\", \"isJson\": true, \"isMetaData\": false, \"isLinkMetaData\": false, \"positionEventNumber\": 0, \"positionStreamId\": \"newstream\", \"title\": \"0@newstream\", \"id\": \"<http://127.0.0.1:2113/streams/newstream/0\">, \"updated\": \"2015-03-13T12:13:42.492473Z\", \"author\": { \"name\": \"EventStore\" }, \"summary\": \"event-type\", \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/newstream/0\", \"relation\": \"edit\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream/0\", \"relation\": \"alternate\" } ] } ] } Variants of body embed mode Two other modes are variants of body : PrettyBody tries to reformat the JSON to make it \"pretty to read\". TryHarder works harder to try to parse and reformat the JSON from an event to return it in the feed. These do not include further information and are focused on how the feed looks. Embedding data into streams in XML format The XML format embeds no additional data, as only JSON supports embedding. Request Response curl -i -H \"Accept:application/atom+xml\" \"http://127.0.0.1:2113/streams/newstream?embed=body\" HTTP/1.1 200 OK Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTo, ES-ExpectedVersion Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position Cache-Control: max-age=0, no-cache, must-revalidate Vary: Accept ETag: \"0;-1296467268\" Content-Type: application/atom+xml; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Fri, 13 Mar 2015 16:32:56 GMT Content-Length: 929 Keep-Alive: timeout=15,max=100 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <feed xmlns=\"http://www.w3.org/2005/Atom\"> <title>Event stream 'newstream'</title> <id>http://127.0.0.1:2113/streams/newstream</id> <updated>2013-06-29T15:12:53.570125Z</updated> <author> <name>EventStore</name> </author> <link href=\"http://127.0.0.1:2113/streams/newstream\" rel=\"self\" /> <link href=\"http://127.0.0.1:2113/streams/newstream/head/backward/20\" rel=\"first\" /> <link href=\"http://127.0.0.1:2113/streams/newstream/0/forward/20\" rel=\"last\" /> <link href=\"http://127.0.0.1:2113/streams/newstream/1/forward/20\" rel=\"previous\" /> <link href=\"http://127.0.0.1:2113/streams/newstream/metadata\" rel=\"metadata\" /> <entry> <title>0@newstream</title> <id>http://127.0.0.1:2113/streams/newstream/0</id> <updated>2013-06-29T15:12:53.570125Z</updated> <author> <name>EventStore</name> </author> <summary>event-type</summary> <link href=\"http://127.0.0.1:2113/streams/newstream/0\" rel=\"edit\" /> <link href=\"http://127.0.0.1:2113/streams/newstream/0\" rel=\"alternate\" /> </entry> </feed>"
  },
  "http-api/competing-consumers/index.html": {
    "href": "http-api/competing-consumers/index.html",
    "title": "Competing Consumers | Event Store",
    "keywords": "Competing Consumers This document explains how to use HTTP API for setting up and consuming competing consumer subscription groups. For an overview on competing consumers and how they relate to other subscription types please see our getting started guide . Note The Administration UI includes a Competing Consumers section where you are able to create, update, delete and view subscriptions and their statuses. Creating a Persistent Subscription Before interacting with a subscription group, you need to create one. You receive an error if you try to create a subscription group more than once. This requires admin permissions . <!-- TODO: File inclusion for the below? --> URI Supported Content Types Method /subscriptions/{stream}/{subscription_name} application/json PUT Query Parameters Parameter Description stream The stream the persistent subscription is on. subscription_name The name of the subscription group. Body Parameter Description resolveLinktos Tells the subscription to resolve link events. startFrom Start the subscription from the position-of the event in the stream. extraStatistics Tells the backend to measure timings on the clients so statistics will contain histograms of them. checkPointAfterMilliseconds The amount of time the system should try to checkpoint after. liveBufferSize The size of the live buffer (in memory) before resorting to paging. readBatchSize The size of the read batch when in paging mode. bufferSize The number of messages that should be buffered when in paging mode. maxCheckPointCount The maximum number of messages not checkpointed before forcing a checkpoint. maxRetryCount Sets the number of times a message should be retried before considered a bad message. maxSubscriberCount Sets the maximum number of allowed TCP subscribers. messageTimeoutMilliseconds Sets the timeout for a client before the message will be retried. minCheckPointCount The minimum number of messages to write a checkpoint for. namedConsumerStrategy RoundRobin/DispatchToSingle/Pinned Updating a Persistent Subscription You can edit the settings of an existing subscription while it is running. This drops the current subscribers and resets the subscription internally. This requires admin permissions. URI Supported Content Types Method /subscriptions/{stream}/{subscription_name} application/json POST Query Parameters Parameter Description stream The stream to the persistent subscription is on. subscription_name The name of the subscription group. Body Same parameters as \"Creating a Persistent Subscription\" Deleting a Persistent Subscription URI Supported Content Types Method /subscriptions/{stream}/{subscription_name} application/json DELETE Query Parameters Parameter Description stream The stream to the persistent subscription is on. subscription_name The name of the subscription group. Reading a stream via a Persistent Subscription By default, reading a stream via a persistent subscription returns a single event per request and does not embed the event properties as part of the response. URI Supported Content Types Method /subscriptions/{stream}/{subscription_name} /subscriptions/{stream}/{subscription_name}?embed={embed} /subscriptions/{stream}/{subscription}/{count}?embed={embed} application/vnd.eventstore.competingatom+xml application/vnd.eventstore.competingatom+json GET Query Parameters Parameter Description stream The stream the persistent subscription is on. subscription_name The name of the subscription group. count How many events to return for the request. embed None , Content , Rich , Body , PrettyBody , TryHarder Read Reading Streams for information on the different embed levels. Response { \"title\": \"All Events Persistent Subscription\", \"id\": \"http://localhost:2113/subscriptions/newstream/competing_consumers_group1\", \"updated\": \"2015-12-02T09:17:48.556545Z\", \"author\": { \"name\": \"EventStore\" }, \"headOfStream\": false, \"links\": [ { \"uri\": \"http://localhost:2113/subscriptions/newstream/competing_consumers_group1/ack%3Fids=c322e299-cb73-4b47-97c5-5054f920746f\", \"relation\": \"ackAll\" }, { \"uri\": \"http://localhost:2113/subscriptions/newstream/competing_consumers_group1/nack%3Fids=c322e299-cb73-4b47-97c5-5054f920746f\", \"relation\": \"nackAll\" }, { \"uri\": \"http://localhost:2113/subscriptions/newstream/competing_consumers_group1/1%3Fembed=None\", \"relation\": \"previous\" }, { \"uri\": \"http://localhost:2113/subscriptions/newstream/competing_consumers_group1\", \"relation\": \"self\" } ], \"entries\": [ { \"title\": \"1@newstream\", \"id\": \"http://localhost:2113/streams/newstream/1\", \"updated\": \"2015-12-02T09:17:48.556545Z\", \"author\": { \"name\": \"EventStore\" }, \"summary\": \"SomeEvent\", \"links\": [ { \"uri\": \"http://localhost:2113/streams/newstream/1\", \"relation\": \"edit\" }, { \"uri\": \"http://localhost:2113/streams/newstream/1\", \"relation\": \"alternate\" }, { \"uri\": \"http://localhost:2113/subscriptions/newstream/competing_consumers_group1/ack/c322e299-cb73-4b47-97c5-5054f920746f\", \"relation\": \"ack\" }, { \"uri\": \"http://localhost:2113/subscriptions/newstream/competing_consumers_group1/nack/c322e299-cb73-4b47-97c5-5054f920746f\", \"relation\": \"nack\" } ] } ] } Acknowledgements Clients must acknowledge (or not acknowledge) messages in the competing consumer model. If the client fails to respond in the given timeout period, the message is retried. You should use the rel links in the feed for acknowledgements not bookmark URIs as they are subject to change in future versions. For example: { \"uri\": \"http://localhost:2113/subscriptions/newstream/competing_consumers_group1/ack/c322e299-cb73-4b47-97c5-5054f920746f\", \"relation\": \"ack\" } Ack multiple messages URI Supported Content Types Method /subscriptions/{stream}/{subscription_name}/ack?ids={messageids} application/json POST Query Parameters Parameter Description stream The stream the persistent subscription is on. subscription_name The name of the subscription group. messageids The ids of the messages that needs to be acked Ack a single message URI Supported Content Types Method /subscriptions/{stream}/{subscription_name}/ack/{messageid} application/json POST Query Parameters Parameter Description stream The stream to the persistent subscription is on. subscription_name The name of the subscription group. messageid The id of the message that needs to be acked <!-- Has this been explained? --> Nack multiple messages URI Supported Content Types Method /subscriptions/{stream}/{subscription_name}/nack?ids={messageids}?action={action} application/json POST Query Parameters Parameter Description stream The stream to the persistent subscription is on. subscription_name The name of the subscription group. action Park : Don't retry the message, park it until a request is sent to reply the parked messages Retry : Retry the message Skip : Discard the message Stop : Stop the subscription messageid The id of the message that needs to be acked Nack a single message URI Supported Content Types Method /subscriptions/{stream}/{subscription_name}/nack/{messageid}?action={action} application/json POST Replaying parked messages URI Supported Content Types Method /subscriptions/{stream}/{subscription_name}/replayParked application/json POST Getting information for all subscriptions URI Method /subscriptions GET Response [ { \"links\": [ { \"href\": \"http://localhost:2113/subscriptions/newstream/competing_consumers_group1/info\", \"rel\": \"detail\" } ], \"eventStreamId\": \"newstream\", \"groupName\": \"competing_consumers_group1\", \"parkedMessageUri\": \"http://localhost:2113/streams/$persistentsubscription-newstream::competing_consumers_group1-parked\", \"getMessagesUri\": \"http://localhost:2113/subscriptions/newstream/competing_consumers_group1/1\", \"status\": \"Live\", \"averageItemsPerSecond\": 0.0, \"totalItemsProcessed\": 0, \"lastProcessedEventNumber\": -1, \"lastKnownEventNumber\": 5, \"connectionCount\": 0, \"totalInFlightMessages\": 0 }, { \"links\": [ { \"href\": \"http://localhost:2113/subscriptions/another_newstream/competing_consumers_group1/info\", \"rel\": \"detail\" } ], \"eventStreamId\": \"another_newstream\", \"groupName\": \"competing_consumers_group1\", \"parkedMessageUri\": \"http://localhost:2113/streams/$persistentsubscription-another_newstream::competing_consumers_group1-parked\", \"getMessagesUri\": \"http://localhost:2113/subscriptions/another_newstream/competing_consumers_group1/1\", \"status\": \"Live\", \"averageItemsPerSecond\": 0.0, \"totalItemsProcessed\": 0, \"lastProcessedEventNumber\": -1, \"lastKnownEventNumber\": -1, \"connectionCount\": 0, \"totalInFlightMessages\": 0 } ] Getting information about the subscriptions for a stream URI Supported Content Types Method /subscriptions/{stream} application/json GET Response [ { \"links\": [ { \"href\": \"http://localhost:2113/subscriptions/newstream/competing_consumers_group1/info\", \"rel\": \"detail\" } ], \"eventStreamId\": \"newstream\", \"groupName\": \"competing_consumers_group1\", \"parkedMessageUri\": \"http://localhost:2113/streams/$persistentsubscription-newstream::competing_consumers_group1-parked\", \"getMessagesUri\": \"http://localhost:2113/subscriptions/newstream/competing_consumers_group1/1\", \"status\": \"Live\", \"averageItemsPerSecond\": 0.0, \"totalItemsProcessed\": 0, \"lastProcessedEventNumber\": -1, \"lastKnownEventNumber\": 5, \"connectionCount\": 0, \"totalInFlightMessages\": 0 } ] Getting information about a specific subscription URI Supported Content Types Method /subscriptions/{stream}/{subscription_name}/info application/json GET Response { \"links\": [ { \"href\": \"http://localhost:2113/subscriptions/newstream/competing_consumers_group1/info\", \"rel\": \"detail\" }, { \"href\": \"http://localhost:2113/subscriptions/newstream/competing_consumers_group1/replayParked\", \"rel\": \"replayParked\" } ], \"config\": { \"resolveLinktos\": false, \"startFrom\": 0, \"messageTimeoutMilliseconds\": 10000, \"extraStatistics\": false, \"maxRetryCount\": 10, \"liveBufferSize\": 500, \"bufferSize\": 500, \"readBatchSize\": 20, \"preferRoundRobin\": true, \"checkPointAfterMilliseconds\": 1000, \"minCheckPointCount\": 10, \"maxCheckPointCount\": 500, \"maxSubscriberCount\": 10, \"namedConsumerStrategy\": \"RoundRobin\" }, \"eventStreamId\": \"newstream\", \"groupName\": \"competing_consumers_group1\", \"status\": \"Live\", \"averageItemsPerSecond\": 0.0, \"parkedMessageUri\": \"http://localhost:2113/streams/$persistentsubscription-newstream::competing_consumers_group1-parked\", \"getMessagesUri\": \"http://localhost:2113/subscriptions/newstream/competing_consumers_group1/1\", \"totalItemsProcessed\": 0, \"countSinceLastMeasurement\": 0, \"lastProcessedEventNumber\": -1, \"lastKnownEventNumber\": 5, \"readBufferCount\": 6, \"liveBufferCount\": 5, \"retryBufferCount\": 0, \"totalInFlightMessages\": 0, \"connections\": [] } <!-- TODO: Is this better as a general subscriptions page? --> <!-- TODO: Somehow get this better integrated with API docs --> <!-- TODO: Still to do -->"
  },
  "event-sourcing-basics/rolling-snapshots/index.html": {
    "href": "event-sourcing-basics/rolling-snapshots/index.html",
    "title": "Rolling snapshots | Event Store",
    "keywords": "Rolling snapshots A rolling snapshot is a projection of the current state of an aggregate at a given point. It represents the state when all events to that point have been replayed. You use rolling snapshots as a heuristic to prevent the need to load all events for the entire history of an aggregate. One way of processing events in the event stream is to replay the events from the beginning of time until the end of the event stream. The problem is that there may be a large number of events between the beginning of time and the current point. You can imagine that an event stream with a million or more events would be inefficient to load. The solution is to use a rolling snapshot to place a denormalization of the state at a given point. It is then possible to play the events from that point forward to load the aggregate. The process for rebuilding an aggregate changes when using rolling snapshots. Instead of reading forward from the beginning of time it is read backwards, putting the events on to a stack until there are no more events left or a snapshot is found. The snapshot is then applied and the events would popped off the stack and applied until the stack was empty. Note Although this is an easy way to conceptualize how rolling snapshots work, this is a less than ideal solution in a production system for various reasons. It is better to store them separately events. The snapshot itself is nothing more than a serialized form of the graph at that given point. By having the state of that graph at that point replaying all the events prior to that snapshot can be avoided. Snapshots can be taken asynchronously by a process monitoring the Event Store. Introducing Rolling Snapshots allows control of the worst case when loading from events. The maximum number of events that would be processed can be tuned to optimize performance for the system in question. With the introduction of Rolling Snapshots it is a relatively trivial process to achieve one to two orders of magnitude of performance gain on the two operations that the Event Storage supports. It is important though to remember that Rolling Snapshots are just a heuristic and that conceptually the event stream is still viewed in its entirety."
  },
  "event-sourcing-basics/performance-and-scaling/index.html": {
    "href": "event-sourcing-basics/performance-and-scaling/index.html",
    "title": "Performance and scalability | Event Store",
    "keywords": "Performance and scalability There are also architectural benefits to not deleting data. The storage system becomes an append-only architecture. Append-only architectures typically distribute and scale more easily than updating architectures because there are fewer locks to deal with. A common performance optimization is the use of \"horizontal partitioning\" (or \"sharding\"), where the same schema will exist in many places and a key within the data will determine in which place the data exists. One problem with horizontal partitioning with an RDMS is that it is necessary to define the key with which the partitioning should operate. This problem goes away when using events. Aggregate IDs are the only partition point in the system. No matter how many aggregates exist or how they may change structures, the aggregate ID associated with events is the only partition point in the system. Horizontally partitioning an Event Store is a simpler process. Saving objects When dealing with a stereotypical system utilizing an RDMS it can be complex to figure out what has changed within the aggregate. Many tools have been built to help alleviate the pain that arises from this task but is the need for a tool a sign of a bigger problem? Most Object-relational mapping (ORM) tools figure out the changes that occurred within a graph. They do this by maintaining two copies of a given graph. The first held in memory and the second for applications to interact with. When it's time to save, the database logic traverses the graph that the code has interacted with and uses the copy of the original graph to determine what has changed while the graph was in use by the code. These changes are then saved to the data storage system. In a system that is Domain Event centric, the aggregates are themselves tracking strong events as to what has changed within them. There is no complex process for comparing to another copy of a graph. Instead ask the aggregate for its changes. The operation to ask for changes is far more efficient than having to figure out what has changed. Loading objects A similar issue exists when loading objects. Consider the work that involved with loading a graph of objects in a stereotypical relational database backed system. Often there are many queries that must be issued to build the aggregate. To help minimize the latency cost of these queries many ORMs have introduced a heuristic of \"Lazy Loading\" also known as \"Delayed Loading\", where a proxy is given in lieu of the real object. The data is only loaded when some code attempts to use that particular object. Lazy loading is useful because often a given behavior will only use a certain portion of data out of the aggregate and it prevents the developer from having to explicitly represent which data that is while reducing the cost of the loading of the aggregate. It is this need for reducing cost that shows a problem. Aggregates are considered as a whole represented by the Aggregate Root. Conceptually an Aggregate is loaded and saved in its entirety. Evans, 2001 Conceptually it is much easier to deal with the concept of an aggregate loaded and saved in its entirety. The concept of lazy loading is not a trivial one and especially when optimizing use cases. The heuristic is needed because loading full aggregates from a relational database is operationally too slow. When dealing with events as a storage mechanism things are different. There is one thing stored, events. Load all the events for an aggregate and replay them. There can only ever be a single query on the system. There is no need to attempt to implement things like lazy loading."
  },
  "event-sourcing-basics/index.html": {
    "href": "event-sourcing-basics/index.html",
    "title": "Event Sourcing Basics | Event Store",
    "keywords": "Event Sourcing Basics What is an Event Store? Event Store is a database that supports the concept of Event Sourcing, which is an old idea that has recently become popular again Note If you are familiar with functional programming you may wish to jump to the Event Store viewed as a functional database section . Production systems often rely on storing their current state to process transactions, but this has not always been the case. Before the general acceptance of relational database management systems (RDBMS) as the center of system architectures many did not store the current state. This was especially true in high performance, mission critical, and highly secure systems. If you look at the inner workings of an RDBMS you will find that most do not themselves work by managing current state. What is an event? An event is something that happened in the past, and so you should represent events as verbs in the past tense such as CustomerRelocated , CargoShipped , or InventoryLossageRecorded . If you are taking a domain driven design approach, it's imperative that events are verbs in the past tense, as they are part of the Ubiquitous Language. Consider the differences with ubiquitous language when relocating a customer. An event makes the concept explicit where previously the changes would occur within an aggregate or between multiple aggregates and were left as an implicit concept that you needed to explore and define. In most applications, a developer discovers that a side effect occurred with a tool such as Hibernate or Entity Framework. If there is a change to the side effects of a use case, it is an implicit concept. The introduction of the event makes the concept explicit and part of the Ubiquitous Language. Relocating a customer does not change something, relocating a customer produces a CustomerRelocatedEvent event which is explicitly defined within the language. In code an event is a data holding structure such as the following: public class InventoryItemDeactivated { public readonly Guid InventoryItemId; public readonly string Reason; public InventoryItemDeactivated(inventoryItemId, reason) { InventoryItemId = inventoryItemId; Reason = reason; } } Other definitions of domain events There is a concept related to a Domain Event defined in Streamlined Object Modeling (SOM). The term “Domain Event” is often used in SOM when discussing “The Event Principle”. Model the event of people interacting at a place with a thing with a transaction object. Model a point-in-time interaction as a transaction with a single timestamp; model a time-interval interaction as a transaction with multiple timestamps. Jill Nicola, 2002ll, p. 23 Although people use the term Domain Event to describe this concept the term does not have the same definition as a Domain Event in the context of this document. SOM uses another term for the concept that better describes what the object is, a transaction. The concept of a transaction object is an important one in a domain and deserves a name. An example of such a transaction might be a player swinging a bat. This is an action that occurred at a given point and you should model as such in the domain, but this is not the same as a Domain Event. This also differs from Martin Fowler’s example of what a Domain Event is: Example: I go to Babur’s for a meal on Tuesday, and pay by credit card. This might be modeled as an event, whose type is “Make Purchase”, whose subject is my credit card, and whose occurred date is Tuesday. If Babur’s uses an old manual system and doesn’t transmit the transaction until Friday, then the noticed date would be Friday. Fowler Furthermore By funneling inputs of a system into streams of Domain Events you can keep a record of all the inputs to a system. This helps you to organize your processing logic, and also allows you to keep an audit log of the system. Fowler What Martin is actually describing here is a \"command\". The language “Make Purchase” is wrong if we are to consider this as an event. A purchase was made, therefore it makes more sense to introduce a PurchaseMade event. Martin did make a purchase at the location, they did charge his credit card, and he ate and enjoyed his food. All these events are in the past tense. They have already happened and cannot be undone. An example such as the sales example given tends to lead towards a secondary problem when built within a system. The problem is that the domain may be responsible for filling in parts of the event. Consider a system where the domain processes the sale itself. How much is the sales tax? Often the domain would calculate this. This leads to a dual definition of the event. There is the event as sent from the client without the sales tax, and then the domain would receive it and add in the sales tax. It causes the event to have multiple definitions, as well as forcing mutability on some attributes. Dual events can sidestep this issue (one for the client with just what it provides and another for the domain including what it enriched the event from the client with) but this is the command event model, and the linguistic problems still exist. You can see a further example of the linguistic problems involved in error conditions. How should the domain handle the fact that a client told it to do something that it cannot? This condition can exist for many reasons but let’s imagine a simple one of the client not having enough information to source the event in a known correct way. Linguistically the command/event separation makes more sense here as the command arrives in the imperative “Place Sale” while the event is in the past tense “Sale Completed”. It's natural for the domain to reject a client attempting to “Place a sale”, it's not natural for the domain to tell the client that something in the past tense no longer happened. Consider the discussion with a domain expert. Does the domain have a time machine? Parallel realities are far too complex and costly to model in most business systems. These are the problems that led to the separation of the concepts of Commands and Events. This separation makes the language much clearer and although subtle, it tends to lead developers towards a clearer understanding of context based solely on the language used. Dual definitions of a concept force the developer to recognize and distinguish context. This weight can translate into both ramp up time for new developers on a project and another thing a member of the team needs to remember. Anytime a team member needs to remember something to distinguish context there is a higher probability that they will overlook it or mistaken for another context. Being explicit in the language and avoiding dual definitions helps make things clearer both for domain experts, the developers, and anyone who may be consuming the API. Further reading DDD CQRS Video Event Sourcing Getting Started"
  },
  "dotnet-api/streams/index.html": {
    "href": "dotnet-api/streams/index.html",
    "title": "Streams | Event Store",
    "keywords": "Streams Writing to a stream You can use the client API to write one or more events to a stream atomically. You do this by appending the events to the stream in one operation, or by starting a transaction on the stream, writing events in one or more operations in that transaction, and then committing the transaction. You can make an optimistic concurrency check during the write by specifying the version at which you expect the stream to be. Identical write operations are idempotent if the optimistic concurrency check is not disabled. You can find more information on optimistic concurrency and idempotence here . Appending to a stream in a single write Task<WriteResult> AppendToStreamAsync(string stream, long expectedVersion, IEnumerable<EventData> events) Task<WriteResult> AppendToStreamAsync(string stream, long expectedVersion, params EventData[] events) Using a transaction to append to a stream across multiple writes On EventStoreConnection Task<EventStoreTransaction> StartTransactionAsync(string stream, long expectedVersion) EventStoreTransaction ContinueTransaction(long transactionId) On EventStoreTransaction Task WriteAsync(IEnumerable<EventData> events) Task WriteAsync(params EventData[] events) Task CommitAsync() void Rollback() EventData The writing methods all use a type named EventData to represent an event to be stored. Instances of EventData are immutable. Event Store does not have any built-in serialisation, so the body and metadata for each event are represented in EventData as a byte[] . The members on EventData are: Member Description Guid EventId A unique identifier representing this event. Event Store uses this for idempotency if you write the same event twice you should use the same identifier both times. string Type The name of the event type. You can use this for pattern matching in projections, so should be a \"friendly\" name rather than a CLR type name, for example. bool IsJson If the data and metadata fields are serialized as JSON, you should set this to true . Setting this to true will cause the projections framework to attempt to deserialize the data and metadata later. byte[] Data The serialized data representing the event to be stored. byte[] Metadata The serialized data representing metadata about the event to be stored. Append to a stream in a single write The AppendToStreamAsync method writes events atomically to the end of a stream, working in an asynchronous manner. The parameters are: Parameter Description string stream The name of the stream to which to append. long expectedVersion The version at which you expect the stream to be in order that an optimistic concurrency check can be performed. This should either be a positive integer, or one of the constants ExpectedVersion.NoStream , ExpectedVersion.EmptyStream , or to disable the check, ExpectedVersion.Any . See here for a broader discussion of this. IEnumerable<EventData> events The events to append. There is also an overload of each method which takes the events as a params array. Deleting a stream Soft delete Task<DeleteResult> DeleteStreamAsync(string stream, long expectedVersion, UserCredentials userCredentials = null); <!-- TODO: Need a better explanation --> By default when you delete a stream, Event Store soft deletes it. You can recreate the stream by appending new events to it. If you try to read a soft deleted stream you receive an error response. Hard Delete You can hard delete a stream. Warning A hard delete is permanent and the stream is not removed during a scavenge. If you hard delete a stream, you cannot recreate the stream. Task<DeleteResult> DeleteStreamAsync(string stream, long expectedVersion, bool hardDelete, UserCredentials userCredentials = null);"
  },
  "dotnet-api/users/index.html": {
    "href": "dotnet-api/users/index.html",
    "title": "User management | Event Store",
    "keywords": "User management The Event Store Client API includes helper methods that use the HTTP API to allow for the management of users. This document describes the methods found in the UsersManager class. All methods in this class are asynchronous. Create a user Creates a user, the credentials for this operation must be a member of the $admins group. public Task CreateUserAsync(string login, string fullName, string[] groups, string password, UserCredentials userCredentials = null) Disable a user Disables a user, the credentials for this operation must be a member of the $admins group. public Task DisableAsync(string login, UserCredentials userCredentials = null) Enable a User Enables a user, the credentials for this operation must be a member of the $admins group. public Task EnableAsync(string login, UserCredentials userCredentials = null) Delete a user Deletes (non-recoverable) a user, the credentials for this operation must be a member of the $admins group. If you prefer this action to be recoverable, disable the user as opposed to deleting the user. public Task DeleteUserAsync(string login, UserCredentials userCredentials = null) List all users Lists all users. public Task<List<UserDetails>> ListAllAsync(UserCredentials userCredentials = null) Get details of user Return the details of the user supplied in user credentials (e.g. the user making the request). public Task<UserDetails> GetCurrentUserAsync(UserCredentials userCredentials) Get details of logged in user public Task<UserDetails> GetUserAsync(string login, UserCredentials userCredentials) Update user details public Task UpdateUserAsync(string login, string fullName, string[] groups, UserCredentials userCredentials = null) Reset user password Resets the password of a user. The credentials doing this operation must be part of the $admins group. public Task ResetPasswordAsync(string login, string newPassword, UserCredentials userCredentials = null)"
  },
  "dotnet-api/stream-metadata/index.html": {
    "href": "dotnet-api/stream-metadata/index.html",
    "title": "Stream metadata | Event Store",
    "keywords": "Stream metadata Every stream in Event Store has metadata stream associated with it, prefixed by $$ , so the metadata stream from a stream called foo is $$foo . Internally, the metadata includes information such as the ACL of the stream and the maximum count and age for the events in the stream. Client code can also put information into stream metadata for use with projections or through the client API. This information is not part of the actual event but is metadata associated with the event. Event Store stores stream metadata as JSON, and you can access it over the HTTP APIs. Read stream metadata To read stream metadata over the .NET API you can use methods found on the EventStoreConnection . You can use the GetStreamMetadata methods in two ways. The first is to return a fluent interface over the stream metadata, and the second is to return you the raw JSON of the stream metadata. Task<StreamMetadataResult> GetStreamMetadataAsync(string stream, UserCredentials userCredentials = null) This returns a StreamMetadataResult . The fields on this result are: Member Description string Stream The name of the stream bool IsStreamDeleted true is the stream is deleted, false otherwise. long MetastreamVersion The version of the metastream format StreamMetadata Metadata A StreamMetadata object representing the metadata JSON You can then access the StreamMetadata via the StreamMetadata object. It contains typed fields for well known stream metadata entries. Member Description long? MaxAge The maximum age of events in the stream. Items older than this will be automatically removed. long? MaxCount The maximum count of events in the stream. When you have more than count the oldest will be removed. long? TruncateBefore When set says that items prior to event 'E' can be truncated and will be removed. TimeSpan? CacheControl The head of a feed in the atom api is not cacheable. This allows you to specify a period of time you want it to be cacheable. Low numbers are best here (say 30-60 seconds) and introducing values here will introduce latency over the atom protocol if caching is occuring. StreamAcl Acl The access control list for this stream. If instead you want to work with raw JSON you can use the raw methods for stream metadata. Task<RawStreamMetadataResult> GetStreamMetadataAsRawBytesAsync(string stream, UserCredentials userCredentials = null) This returns a RawStreamMetadataResult . The fields on this result are: Member Description string Stream The name of the stream bool IsStreamDeleted True is the stream is deleted, false otherwise. long MetastreamVersion The version of the metastream (see Expected Version ) byte[] Metadata The raw data of the metadata JSON Note If you enabled enabled security , reading metadata may require that you pass credentials. By default it is only allowed for admins though you can change this via default ACLs. If you do not pass credentials and they are required you will receive an AccessedDeniedException . Writing metadata You can write metadata in both a typed and a raw mechanism. When writing it is generally easier to use the typed mechanism. Both writing mechanisms support an expectedVersion which works the same as on any stream and you can use to control concurrency, read Expected Version for further details. Task<WriteResult> SetStreamMetadataAsync(string stream, long expectedMetastreamVersion, StreamMetadata metadata, UserCredentials userCredentials = null) The StreamMetadata passed above has a builder that you can access via the StreamMetadata.Create() method. The options available on the builder are: Method Description SetMaxCount(long count) Sets the maximum count of events in the stream. SetMaxAge(TimeSpan age) Sets the maximum age of events in the stream. SetTruncateBefore(long seq) Sets the event number from which previous events can be scavenged.< SetCacheControl(TimeSpan cacheControl) The amount of time the stream head is cachable. SetReadRoles(string[] roles) Sets the roles allowed to read the underlying stream. SetWriteRoles(string[] roles) Sets the roles allowed to write to the underlying stream. SetDeleteRoles(string[] roles) Sets the roles allowed to delete the underlying stream. SetMetadataReadRoles(string[] roles) Sets the roles allowed to read the metadata stream. SetMetadataWriteRoles(string[] roles) Sets the roles allowed to write the metadata stream. Be careful with this privilege as it gives all the privileges for a stream as that use can assign themselves any other privilege. SetCustomMetadata(string key, string value) The SetCustomMetadata method and overloads allow the setting of arbitrary custom fields into the stream metadata. You can add user-specified metadata via the SetCustomMetadata overloads. Some examples of good uses of user-specified metadata are: which adapter is responsible for populating a stream. which projection caused a stream to be created. a correlation ID of some business process. Task<WriteResult> SetStreamMetadataAsync(string stream, long expectedMetastreamVersion, byte[] metadata, UserCredentials userCredentials = null) This method will put the data that is in metadata as the stream metadata. Metadata in this case can be anything in a vector of bytes. The server only understands JSON. Read Access Control Lists for more information on the format in JSON for access control lists. Note Writing metadata may require that you pass credentials if you have security enabled by default it is only allowed for admins though you can change this via default ACLs. If you do not pass credentials and they are required you will receive an AccessedDeniedException ."
  },
  "dotnet-api/persistent-subscriptions/index.html": {
    "href": "dotnet-api/persistent-subscriptions/index.html",
    "title": "Persistent subscriptions management | Event Store",
    "keywords": "Persistent subscriptions management The Client API includes helper methods that use the HTTP API to allow you to manage persistent subscriptions. This document describes the methods found in the PersistentSubscriptions class. All methods in this class are asynchronous. Methods Get information for all persistent subscriptions from all streams Returns information about all persistent subscriptions from all streams. public Task List(UserCredentials userCredentials = null) Get information about the persistent subscriptions for a stream Returns information about the persistent subscription for a stream you specify with stream . You must have access to the stream. public Task List(string stream, UserCredentials userCredentials = null) Get information for a persistent subscription for a stream Gets the details of the persistent subscription subscriptionName on stream . You must have access to the persistent subscription and the stream. public Task Describe(string stream, string subscriptionName, UserCredentials userCredentials = null) Replay parked messages Replays all parked messages for a particular persistent subscription subscriptionName on a stream that were parked by a negative acknowledgement action. public Task ReplayParkedMessages(string stream, string subscriptionName, UserCredentials userCredentials = null)"
  },
  "dotnet-api/embedded-client/index.html": {
    "href": "dotnet-api/embedded-client/index.html",
    "title": "Embedded client | Event Store",
    "keywords": "Embedded client EmbeddedVNodeBuilder The EmbeddedVNodeBuilder class sets up and builds an Event Store node. You can configure your node through methods provided by the EmbeddedVNodeBuilder class. Note The builder used for the EmbeddedVNodeBuilder is the same Event Store uses internally to create the ClusterNode , see EventStore.ClusterNode.Program.cs for more examples on how to use it. Building a node You have two options when you start creating a node, EmbeddedVNodeBuilder.AsSingleNode() or EmbeddedVNodeBuilder.AsClusterMember(clusterSize) , which will create a single node or a cluster node respectively. After creating the builder, you can configure the node through the methods provided by the EmbeddedVNodeBuilder . These are listed below. Once you have configured the node, build it with EmbeddedVNodeBuilder.Build() which returns the configured ClusterVNode . Start the node with ClusterVNode.StartAndWaitUntilReady() or ClusterVNode.Start() . ClusterVNode.StartAndWaitUntilReady() returns a task that completes once the node has started and all subsystems have finished loading. For example, to build a single node with default options : var nodeBuilder = EmbeddedVNodeBuilder.AsSingleNode() .OnDefaultEndpoints() .RunInMemory(); var node = nodeBuilder.Build(); node.StartAndWaitUntilReady().Wait(); To build a node to be part of a cluster with custom endpoints and gossip seeds: var nodeBuilder = EmbeddedVNodeBuilder.AsClusterMember(3) .RunOnDisk(\"node1db\") .WithInternalHttpOn(new IPEndPoint(IPAddress.Loopback, 1112)) .WithExternalHttpOn(new IPEndPoint(IPAddress.Loopback, 1113)) .WithExternalTcpOn(new IPEndPoint(IPAddress.Loopback, 1114)) .WithInternalTcpOn(new IPEndPoint(IPAddress.Loopback, 1115)) .DisableDnsDiscovery() .WithGossipSeeds(new IPEndPoint[] { new IPEndPoint(IPAddress.Loopback, 2112), new IPEndPoint(IPAddress.Loopback, 3112) }); var node = nodeBuilder.Build(); node.Start(); Warning When running an embedded cluster, the task returned by StartAndWaitUntilReady() only completes on the master node. Connecting to an embedded node You can connect to an embedded Event Store node with the EmbeddedEventStoreConnection class. Calling EmbeddedEventStoreConnection.Create(ClusterVNode) returns an IEventStoreConnection configured to connect to your embedded node. From there you can use the connection as normal in the .NET Client. using(var embeddedConn = EmbeddedEventStoreConnection.Create(node)) { embeddedConn.ConnectAsync().Wait(); embeddedConn.AppendToStreamAsync(\"testStream\", ExpectedVersion.Any, new EventData(Guid.NewGuid(), \"eventType\", true, Encoding.UTF8.GetBytes(\"{\\\"Foo\\\":\\\"Bar\\\"}\"), null)).Wait(); } Logging with an embedded node To enable logging for an embedded node, you need to initialize the LogManager and ensure that you configure the logger with a log.config file in your configuration directory. To initialize the LogManager , call this before building the nodes: LogManager.Init(logComponentName, logDirectory, logConfigurationDirectory); EmbeddedVNodeBuilder options The following options are available when building an Embedded Node. Application options Method Description AsSingleNode() Returns a builder set to construct options for a single node instance AsClusterMember(int clusterSize) Returns a builder set to construct options for a cluster node instance with a cluster size DisableHTTPCaching() Disable HTTP Caching WithWorkerThreads(int count) Sets the number of worker threads to use in shared threadpool WithStatsPeriod(TimeSpan statsPeriod) Sets the period between statistics gathers EnableLoggingOfHttpRequests() Enable logging of HTTP requests and responses before they are processed EnableHistograms() Enable the tracking of histograms, typically used for debugging EnableTrustedAuth() Enable trusted authentication by an intermediary in the HTTP Certificate options Method Description WithServerCertificateFromFile(string path, string password) Sets the Server SSL Certificate loaded from a file WithServerCertificate(X509Certificate2 sslCertificate) Sets the Server SSL Certificate WithServerCertificateFromStore(StoreLocation storeLocation, StoreName storeName, string certificateSubjectName, string certificateThumbprint) Sets the Server SSL Certificate loaded from a certificate store WithServerCertificateFromStore(StoreName storeName, string certificateSubjectName, string certificateThumbprint) Sets the Server SSL Certificate loaded from a certificate store Cluster options Method Description WithClusterGossipPort(int port) Sets the internal gossip port (used when using cluster DNS, this should point to a known port gossip will be running on) WithGossipSeeds(params IPEndPoint[] endpoints) Sets the gossip seeds this node should talk to WithClusterDnsName(string name) Sets the DNS name used for the discovery of other cluster nodes DisableDnsDiscovery() Disable DNS discovery for the cluster WithGossipInterval(TimeSpan gossipInterval) Sets the gossip interval WithGossipAllowedTimeDifference(TimeSpan gossipAllowedDifference) Sets the allowed gossip time difference WithGossipTimeout(TimeSpan gossipTimeout) Sets the gossip timeout WithPrepareTimeout(TimeSpan prepareTimeout) Sets the prepare timeout WithCommitTimeout(TimeSpan commitTimeout) Sets the commit timeout WithPrepareCount(int prepareCount) Sets the number of nodes which must acknowledge prepares. WithCommitCount(int commitCount) Sets the number of nodes which must acknowledge commits before acknowledging to a client. WithNodePriority(int nodePriority) Sets the node priority used during master election Database options Method Description RunInMemory() Sets the builder to run in memory RunOnDisk(string path) Sets the builder to write database files to the specified path MaximumMemoryTableSizeOf(int size) Sets the maximum size a memtable is allowed to reach (in count) before moved to be a ptable DoNotVerifyDbHashes() Marks that the existing database files should not be checked for checksums on startup. VerifyDbHashes() Marks that the existing database files should be checked for checksums on startup. WithMinFlushDelay(TimeSpan minFlushDelay) Sets the minimum flush delay DisableScavengeMerging() Disables the merging of chunks when scavenge is running WithScavengeHistoryMaxAge(int scavengeHistoryMaxAge) The number of days to keep scavenge history (Default: 30) WithIndexPath(string indexPath) Sets the path the index should be loaded or saved to WithIndexCacheDepth(int indexCacheDepth) Sets the depth to cache for the mid point cache in index WithUnsafeIgnoreHardDelete() Disables Hard Deletes (UNSAFE: use to remove hard deletes) WithUnsafeDisableFlushToDisk() Disables Hard Deletes (UNSAFE: use to remove hard deletes) WithBetterOrdering() Enable queue affinity on reads during write process to try to get better ordering. WithTfChunkSize(int chunkSize) Sets the transaction file chunk size. Default is TFConsts.ChunkSize WithTfCachedChunks(int cachedChunks) The number of chunks to cache in unmanaged memory. Default is TFConsts.ChunksCacheSize Interface options Method Description OnDefaultEndpoints() Sets the default endpoints on localhost (1113 tcp, 2113 http) AdvertiseInternalIPAs(IPAddress intIpAdvertiseAs) Sets up the Internal IP to advertise AdvertiseExternalIPAs(IPAddress extIpAdvertiseAs) Sets up the External IP to advertise AdvertiseInternalHttpPortAs(int intHttpPortAdvertiseAs) Sets up the Internal HTTP port to advertise AdvertiseExternalHttpPortAs(int extHttpPortAdvertiseAs) Sets up the External HTTP port to advertise AdvertiseInternalSecureTCPPortAs(int intSecureTcpPortAdvertiseAs) Sets up the Internal Secure TCP port to advertise AdvertiseExternalSecureTCPPortAs(int extSecureTcpPortAdvertiseAs) Sets up the External Secure TCP port to advertise AdvertiseInternalTCPPortAs(int intTcpPortAdvertiseAs) Sets up the Internal TCP port to advertise AdvertiseExternalTCPPortAs(int extTcpPortAdvertiseAs) Sets up the External TCP port to advertise WithInternalHttpOn(IPEndPoint endpoint) Sets the internal HTTP endpoint to the specified value WithExternalHttpOn(IPEndPoint endpoint) Sets the external HTTP endpoint to the specified value WithInternalTcpOn(IPEndPoint endpoint) Sets the internal TCP endpoint to the specified value WithInternalSecureTcpOn(IPEndPoint endpoint) Sets the internal secure TCP endpoint to the specified value WithExternalTcpOn(IPEndPoint endpoint) Sets the external TCP endpoint to the specified value WithExternalSecureTcpOn(IPEndPoint endpoint) Sets the external secure TCP endpoint to the specified value EnableSsl() Sets that SSL should be used on connections WithSslTargetHost(string targetHost) Sets the target host of the server's SSL certificate. ValidateSslServer() Sets whether to validate that the server's certificate is trusted. NoGossipOnPublicInterface() Disables gossip on the public (client) interface NoAdminOnPublicInterface() Disables the admin interface on the public (client) interface NoStatsOnPublicInterface() Disables statistics screens on the public (client) interface AddInternalHttpPrefix(string prefix) Adds a HTTP prefix for the internal HTTP endpoint AddExternalHttpPrefix(string prefix) Adds a HTTP prefix for the external HTTP endpoint DontAddInterfacePrefixes() Don't add the interface prefixes (e.g. If the External IP is set to the Loopback address, add http://localhost:2113/ as a prefix) WithInternalHeartbeatInterval(TimeSpan heartbeatInterval) Sets the heartbeat interval for the internal network interface. WithExternalHeartbeatInterval(TimeSpan heartbeatInterval) Sets the heartbeat interval for the external network interface. WithInternalHeartbeatTimeout(TimeSpan heartbeatTimeout) Sets the heartbeat timeout for the internal network interface. WithExternalHeartbeatTimeout(TimeSpan heartbeatTimeout) Sets the heartbeat timeout for the external network interface. Projections options Method Description StartStandardProjections() Start standard projections. RunProjections(ProjectionType projectionType, int numberOfThreads = Opts.ProjectionThreadsDefault) Sets the mode and the number of threads on which to run projections. RunProjections(ClientAPI.Embedded.ProjectionsMode projectionsMode, int numberOfThreads = Opts.ProjectionThreadsDefault) Sets the mode and the number of threads on which to run projections. EmbeddedEventStoreConnection The following methods are available on EmbeddedEventStoreConnection for connecting to an embedded node. Method Description Create(ClusterVNode eventStore, string connectionName = null) Creates a new embedded IEventStoreConnection to a single node with default connection settings Create(ClusterVNode eventStore, ConnectionSettings connectionSettings, string connectionName = null) Creates a new embedded IEventStoreConnection to a single node using specific ConnectionSettings"
  },
  "dotnet-api/connecting-to-a-server/index.html": {
    "href": "dotnet-api/connecting-to-a-server/index.html",
    "title": "Connecting to a server | Event Store",
    "keywords": "Connecting to a server EventStoreConnection The EventStoreConnection class maintains a full-duplex connection between the client and the Event Store server. EventStoreConnection is thread-safe and we recommend that you create one instance per application. All operations are fully asynchronous and return either a Task or a Task<T> . If you need to execute synchronously, call .Wait() , or Result on the asynchronous version. To get maximum performance from the connection we recommend that you use it asynchronously. Note The Create methods have changed since version 3.0.2 as connection strings are now supported. The old mechanisms will still work but are marked obsolete and will be removed in the future. Creating a connection The EventStoreConnection classes uses the static Create methods to create a new connection. All method overloads allow you to optionally specify a name for the connection, which the connection returns when it raises events (see Connection Events ). Method Description Create(Uri uri) Connects to Event Store (see URIs below) with default settings Create(ConnectionSettings connectionSettings, Uri uri) Connects to Event Store (see URIs below) with specified settings Create(string connectionString) Connects to Event Store (see URIs below) with settings from connection string (obsolete) Create(IPEndPoint tcpEndPoint) Connects to a single node with default settings (obsolete) Create(ConnectionSettings settings, IPEndPoint tcpEndPoint) Connects to a single node with custom settings (see Customising Connection Settings ) (obsolete) Create(ConnectionSettings connectionSettings, ClusterSettings clusterSettings) Connects to an Event Store HA cluster with custom settings (see Cluster Settings ) Note The connection returned by these methods is inactive. Use the ConnectAsync() method to establish a connection with the server. URIs The create methods support passing of a URI to the connection as opposed to passing IPEndPoints . This URI should be in the format of: Single Node : tcp://user:password@myserver:11234 Cluster : discover://user:password@myserver:1234 Where the port number points to the TCP port of the Event Store instance (1113 by default) or points to the manager gossip port for discovery purposes. With the URI based mechanism you can pass a domain name and the client will resolve it. Note The client performs a blocking DNS call for single node. If you are worried about blocking DNS due to network issues etc., you should resolve the DNS yourself and pass in an IP address. Customising connection settings Connection string Many of the overloads accept a connection string that you can use to control settings of the connection. A benefit to having these as a connection string instead of using the fluent API is that you can change them between environments without recompiling (i.e. a single node in dev and a cluster in production ). The connection string format should look familiar to those who have used connection strings in the past. It consists of a series of key/value pairs separated by semicolons. You can set the following values using the connection string: <!-- TODO: Moved, to check and what about ConnectTo? --> Name Format Description VerboseLogging True/false Enables verbose logging MaxQueueSize Integer Maximum number of outstanding operations MaxConcurrentItems Integer Maximum number of concurrent async operations MaxRetries Integer Maximum number of retry attempts MaxReconnections Integer The maximum number of times to try reconnecting RequireMaster True/false If set the server will only process if it is master ReconnectionDelay Integer (milliseconds) The delay before attempting to reconnect OperationTimeout Integer (milliseconds) The time before considering an operation timed out OperationTimeoutCheckPeriod Integer (milliseconds) The frequency in which to check timeouts DefaultUserCredentials String in format username:password The default credentials for the connection UseSslConnection True/false whether to use SSL for this connection TargetHost String The hostname expected on the certificate ValidateServer True/false Whether to validate the remote server FailOnNoServerResponse True/False Whether to fail on no server response HeartbeatInterval Integer (milliseconds) The interval at which to send the server a heartbeat HeartbeatTimeout Integer (milliseconds) The amount of time to receive a heartbeat response before timing out ClusterDns string The DNS name of the cluster for discovery MaxDiscoverAttempts Integer The maximum number of attempts to try to discover the cluster ExternalGossipPort Integer The port to try to gossip on GossipTimeout Integer (milliseconds) The amount of time before timing out a gossip response GossipSeeds Comma separated list of ip:port A list of seeds to try to discover from ConnectTo A URI in format described above to connect to The URI to connect to Note You can also use spacing instead of camel casing in your connection string. var connectionString = \"ConnectTo=tcp://admin:changeit@localhost:1113; HeartBeatTimeout=500\" Sets the connection string to connect to localhost on the default port and sets the heartbeat timeout to 500ms. var connectionString = \"Connect To = tcp://admin:changeit@localhost:1113; Gossip Timeout = 500\" Using spaces: var connectionString = \"ConnectTo=discover://admin:changeit@mycluster:3114; HeartBeatTimeout=500\" Tells the connection to try gossiping to a manager node found under the DNS 'mycluster' at port '3114' to connect to the cluster. var connectionString = \"GossipSeeds=192.168.0.2:1111,192.168.0.3:1111; HeartBeatTimeout=500\" Tells the connection to try gossiping to the gossip seeds 192.168.0.2 or 192.168.0.3 on port '1111' to discover information about the cluster. Note See the fluent API below for defaults of values. Note You can also use the ConnectionString class to return a ConnectionSettings object. Fluent API Settings used for modifying the behavior of an EventStoreConnection are encapsulated into an object of type ConnectionSettings passed as a parameter to the Create methods listed above. Instances of ConnectionSettings are created using a fluent builder class: ConnectionSettings settings = ConnectionSettings.Create(); This creates an instance of ConnectionSettings with default options. You can override these by chaining the additional builder methods described below. Logging The .NET API can log information to different destinations. By default logging is disabled. <!-- TODO: Moved, to check. Actually missing options. --> Builder Method Description UseConsoleLogger() Output log messages using Console.WriteLine UseDebugLogger() Output log messages using Debug.WriteLine UseCustomLogger() Output log messages to the specified instance of ILogger (You should implement this interface in order to log using another library such as NLog or log4net). EnableVerboseLogging() Turns on verbose logging. By default information about connection, disconnection and errors are logged, however it can be useful to have more information about specific operations as they are occuring. User credentials Event Store supports Access Control Lists that restrict permissions for a stream based on users and groups. EventStoreConnection allows you to supply credentials for each operation, however it is often more convenient to set default credentials for all operations on the connection. Builder Method Description SetDefaultUserCredentials(UserCredentials credentials) Sets the default UserCredentials to use for this connection. If you don't supply any credentials, the operation will use these. You create a UserCredentials object as follows: UserCredentials credentials = new UserCredentials(\"username\",\"password\"); Security The .NET API and Event Store can communicate either over SSL or an unencrypted channel (by default). To configure the client-side of the SSL connection, use the builder method below. For more information on setting up the server end of the Event Store for SSL, see SSL Setup . UseSslConnection(string targetHost, bool validateServer) Uses an SSL-encrypted connection where targetHost is the name specified on the SSL certificate installed on the server, and validateServer controls whether the connection validates the server certificate. Warning In production systems where credentials are sent from the client to Event Store, you should always use SSL encryption and you should set validateServer to true . Node preference When connecting to an Event Store HA cluster you can specify that operations are performed on any node, or only on the node that is the master. Builder Method Description PerformOnMasterOnly() Require the master to serve all write and read requests (Default). PerformOnAnyNode() Allow for writes to be forwarded and read requests to be served locally if the current node is not master. Handling failures The following methods on the ConnectionSettingsBuilder allow you to change the way the connection handles operation failures and connection issues. Reconnections Builder Method Description WithConnectionTimeoutOf (TimeSpan timeout) Sets the timeout to connect to a server before aborting and attempting a reconnect (Default: 1 second). LimitReconnectionsTo (int limit) Limits the number of reconnections this connection can try to make (Default: 10). KeepReconnecting() Allows infinite reconnection attempts. SetReconnectionDelayTo (TimeSpan reconnectionDelay) Sets the delay between reconnection attempts (Default: 100ms). SetHeartbeatInterval (TimeSpan interval) Sets how often the connection should expect heartbeats (lower values detect broken sockets faster) (Default: 750ms). SetHeartbeatTimeout (TimeSpan timeout) Sets how long to wait without heartbeats before determining a connection to be dead (must be longer than the heatrbeat interval) (Default: 1500ms). Operations Builder Method Description SetOperationTimeout (TimeSpan timeout) Sets the operation timeout duration (Default: 7 seconds). SetTimeoutCheckPeriodTo (TimeSpan timeoutCheckPeriod) Sets how often to check for timeouts (Default: 1 second). LimitAttemptsForOperationTo (int limit) Limits the number of operation attempts (Default: 11). LimitRetriesForOperationTo (int limit) Limits the number of operation retries (Default: 10). KeepRetrying() Allows infinite operation retries. LimitOperationsQueueTo (int limit) Sets the limit for number of outstanding operations (Default: 5000). FailOnNoServerResponse() Marks that no response from server should cause an error on the request. Cluster settings When connecting to an Event Store HA cluster you must pass an instance of ClusterSettings as well as the usual ConnectionSettings . Primarily yu use this to tell the EventStoreConnection how to discover all the nodes in the cluster. A connection to a cluster will automatically handle reconnecting to a new node if the current connection fails. Using DNS discovery DNS discovery uses a single DNS entry with several records listing all node IP addresses. The EventStoreConnection will then use a well known port to gossip with the nodes. Use ClusterSettings.Create().DiscoverClusterViaDns() followed by: <!-- TODO: Moved, to check. --> Builder Method Description SetClusterDns(string clusterDns) Sets the DNS name under which to list cluster nodes. SetClusterGossipPort(int clusterGossipPort) Sets the well-known port on which the cluster gossip is taking place. SetMaxDiscoverAttempts(int maxDiscoverAttempts) Sets the maximum number of attempts for discovery (Default: 10). SetGossipTimeout(TimeSpan timeout) Sets the period after which gossip times out if none is received (Default: 1 second). Note If you are using the commercial edition of Event Store HA with Manager nodes in place, the gossip port should be the port number of the external HTTP port on which the managers are running. If you are using the open source edition of Event Store HA the gossip port should be the External HTTP port that the nodes are running on. If you cannot use a well-known port for this across all nodes you can instead use gossip seed discovery and set the IPEndPoint of some seed nodes instead. Connecting using gossip seeds The second supported method for node discovery uses a hardcoded set of IPEndPoint s as gossip seeds. Use ClusterSettings.Create().DiscoverClusterViaGossipSeeds() followed by: <!-- TODO: Moved, to check. --> Builder Method Description SetGossipSeedEndPoints(params IPEndPoint[] gossipSeeds) Sets gossip seed endpoints for the client. SetGossipSeedEndPoints(params GossipSeed[] gossipSeeds) Same as above, but allows a specific Host header to be sent with all HTTP requests. SetMaxDiscoverAttempts(int maxDiscoverAttempts) Sets the maximum number of attempts for discovery (Default: 10). SetGossipTimeout(TimeSpan timeout) Sets the period after which gossip times out if none is received (Default: 1 second). Connection events EventStoreConnection exposes events that your application can use to be notified of changes to the status of the connection. <!-- TODO: Not moved. --> Event Description EventHandler<ClientConnectionEventArgs> Connected Fired when an IEventStoreConnection connects to an Event Store server. EventHandler<ClientConnectionEventArgs> Disconnected Fired when an IEventStoreConnection disconnects from an Event Store server by some means other than by calling the Close method. EventHandler<ClientReconnectingEventArgs> Reconnecting Fired when an IEventStoreConnection is attempting to reconnect to an Event Store server following a disconnection. EventHandler<ClientClosedEventArgs> Closed Fired when an IEventStoreConnection is closed either using the Close method or when reconnection limits are reached without a successful connection being established. EventHandler<ClientErrorEventArgs> ErrorOccurred Fired when an error is thrown on an IEventStoreConnection . EventHandler<ClientAuthenticationFailedEventArgs> AuthenticationFailed Fired when a client fails to authenticate to an Event Store server."
  },
  "server/deploy-kubernetes-aks/index.html": {
    "href": "server/deploy-kubernetes-aks/index.html",
    "title": "Deploy with Kubernetes to Azure Cloud AKS | Event Store",
    "keywords": "Deploy with Kubernetes to Azure Cloud AKS This guide is to show how to use the official Event Store Helm Chart to interactively deploy an Event Store Cluster in Kubernetes Azure Cloud AKS service. Prerequisites Install the following utilities in your development machine. Kubectl Helm The Azure CLI Configuration steps Login in your Azure Cloud account using the az cli, this triggers 2 factor authentication that launches your default browser to select account credentials. az login Create a new resource group: az group create -n {resourcegroupname} -l {location-compatible-with-aks} Create a Kubernetes cluster with 3 nodes. This command accept parameters such as the version of Kubernetes you want installed. For this tutorial we use the default options. az aks create -n {clustername} -g {resourcegroupname} -c 3 The command (after some delay) returns a JSON object with details of the new Kubernetes cluster. Use the command below to return a list of all Kubernetes clusters in your Azure account: az aks list -o table We recommend kubectl for managing resources in the Kubernetes cluster. Set the current context for kubectl and merge it with any existing configuration in your existing config file: az aks get-credentials -n {clustername} -g {groupname} Get the list of nodes using kubectl: kubectl get nodes To use the Kubernetes dashboard you need to change the Role Base Access Control enabled by default on Azure AKS. Create a rbac-config.yaml file containing the following yaml: apiVersion: rbac.authorization.k8s.io/v1beta1 kind: ClusterRoleBinding metadata: name: kubernetes-dashboard labels: k8s-app: kubernetes-dashboard roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: kubernetes-dashboard namespace: kube-system Create a deployment for this ClusterRoleBinding object kubectl create -f ./rbac-config.yaml To access the dashboard you can now use the browse command. This command is a wrapper around the proxy command of kubectl. It creates a local web server with a tunnel to the cluster hosted in Azure AKS web server az aks browse -n {clustername} -g {groupname} Deploy Event Store cluster with Helm Helm is the package manager for Kubernetes. After you've created a new Kubernetes cluster you need to configure Helm for your local helm CLI to connect to a configured service account on the server side. The service account used by Helm is called Tiller. Give Tiller access to the cluster and initialise it with the following commands: kubectl -n kube-system create serviceaccount tiller kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller helm init --service-account tiller You can then check if the tiller-deploy-xxxx pod is running kubectl -n kube-system get pod Now deploy the Event Store cluster using the official Helm Chart with the following commands: helm repo add eventstore https://eventstore.github.io/EventStore.Charts helm repo update helm install -n eventstore eventstore/eventstore --set persistence.enabled=true The Event Store cluster is now deployed and available in a couple of minutes. The default cluster size in the Helm Chart is set to 3 so this results in a 3 node Event Store cluster over the 3 nodes Kubernetes cluster. The setting persistence.enable=true uses a PersistentVolumeClaim on your Kubernetes cluster to claim dynamically persistent storage volumes. You can configure this to use statically defined volumes if required. Upgrade the Event Store cluster with a newer version Verify your current Event Store cluster helm status eventstore Fork the official Helm Chart Event Store repository and change the version of the image in the chart values.yaml . Then run the command in the same directory as the chart: helm upgrade eventstore . --set persistence.enabled=true The upgrade command silently upgrades all the pods one by one without downtime. Helm takes care of attaching the existing volumes to the new pods during the upgrade. Rollback to a previous version To rollback to a previous version, first use the following command to display the history helm history eventstore And the following command to rollback to a specific revision helm rollback eventstore 1 Delete resources To delete all resources associated with the EventStore installation use the following command: az aks delete -n {clustername} -g {groupname} az group delete -n {groupname}"
  },
  "server/admin-ui/index.html": {
    "href": "server/admin-ui/index.html",
    "title": "Admin UI | Event Store",
    "keywords": "Admin UI The Event Store Admin UI is available at SERVER_IP:2113 helps you interact with and manage a cluster in a visual way. This guide explains the tabs of the interface and what they do. Dashboard The Dashboard tab shows an overview of active queues with associated statistics in the top half. The + icon indicates a queue group, click it to reveal the queues that are part of the group. The second half of the tab shows active connections to Event Store and information about them. Click the Snapshot button in the top right to output a snapshot of all queue statistics at the time you clicked the button. Stream browser The Stream Browser tab gives an overview of recently created and changed streams, clicking on an individual stream shows details about the individual stream. Event stream 'streamname' Each individual stream shows pages of the events in a stream with an overview of the event. Click the Name to see the EventId, and JSON to the see the event data. The buttons above change depending on what you are viewing in the interface. The Back button takes you to the parent screen. The buttons on the top right when you are viewing an event stream are: Pause : Stop showing events arriving into this stream. Resume : Resume showing events arriving into this stream. Edit ACL : Edit the access control lists for a stream. Add Event : Add a new event to the stream. Delete : Delete a stream to the stream. Query : The buttons on the left above the events when you are viewing an event stream are: self : Takes you to the overview of the stream. first : Takes you to the first page of events in a stream. previous : Takes you to the previous page of events in a stream. metadata : Shows the metadata of a stream. On the metadata screen, click Add New Like This to add a new event to the stream. Projections The Projections tab shows system and user created projections defined in Event Store, the buttons above the list do the following: Disable All : Disable all running projections. Enable All : Enable all stopped projections. Include Queries : Toggle displaying queries in the Projections table. New Projection : Create a user-defined projection with the Admin UI. Clicking an individual projection shows further details. On the left is the projection definition, and on the right, the stats, results and state of the projection. The buttons above the details do the following: Start : Start a stopped projection. Stop : Stop a running projection. Edit : Edit the projection definition. Config : Set configuration options for a projection. Debug : Opens the debugging interface to debug what effect a projection is having on events. Delete : Delete a projection. Reset : Reset a projection. Back : Returns you to the parent screen. Query The Query tab a code editor field where you can create transient and short-lived projections for quick analysis of your event streams. Persistent subscriptions The Persistent Subscriptions tab shows an overview of persistent subscriptions configured on streams. The button above the list do the following: New Subscription : Create a new subscriptions Clicking the + icon next to a stream name reveals the subscription name and more buttons. The Back button takes you to the parent screen. : Edit : Edit the subscription. Delete : Delete the subscription. Detail : Shows the subscription configuration options. Replay Parked Messages : Replay events in subscription to return state. Admin The Admin tab shows sub systems enabled (currently only projections ) on Event Store and scavenges run. You can start a new scavenge operation by clicking the Scavenge button, and shut Event Store down by clicking the Shutdown Server button. Users The Users tab shows the users defined in Event Store , clicking an individual user shows a JSON representation of that users details. Log out Logs you out of the Admin UI interface."
  },
  "server/scavenging/index.html": {
    "href": "server/scavenging/index.html",
    "title": "Scavenging events | Event Store",
    "keywords": "Scavenging events When you delete events or streams in Event Store, they aren't removed immediately. To permanently delete these events you need to run a 'scavenge' on your database. A scavenge reclaims disk space by rewriting your database chunks, minus the events to delete, and then deleting the old chunks. Scavenges only affect completed chunks, so deleted events in the current chunk are still there after you run a scavenge. After processing the chunks, the operation updates the chunk indexes using a merge sort algorithm, skipping events whose data is no longer available. Warning Once a scavenge has run, you cannot recover any deleted events. Note Before version 4.0.2, a scavenge operation only worked with database chunk files. Since version 4.0.2 that reordering also happens inside the index files. Starting a scavenge Scavenges are not run automatically by Event Store. We recommendation that you set up a scheduled task, for example using cron or Windows Scheduler, to trigger a scavenge as often as you need. You start a scavenge by issuing an empty POST request to the HTTP API with the credentials of an admin or ops user: Request Response curl -i -d {} -X POST http://localhost:2113/admin/scavenge -u \"admin:changeit\" Next Steps Scavenge operations have other options you can set to improve performance, read the API docs for more details. HTTP/1.1 200 OK Access-Control-Allow-Methods: POST, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Content-Type: Server: Mono-HTTPAPI/1.0 Date: Wed, 19 Sep 2018 10:25:55 GMT Content-Length: 0 Keep-Alive: timeout=15,max=100 Next Steps For better scavenge performance, you can set the number of threads to use. If you need to restart a stopped scavenge, you can specify the starting chunk ID. Find out more in the API reference . You can also start scavenges from the Admin page of the Admin UI. Tip Each node in a cluster has its own independent database. As such, when you run a scavenge, you need to issue a scavenge request to each node. How often to run a scavenge This depends on the following: How often you delete streams. Depending on how you set $maxAge , $maxCount or $tb metadata on your streams. Stopping a scavenge Stop a running scavenge operation by issuing a DELETE request to the HTTP API with the credentials of an admin or ops user and the ID of the scavenge you want to stop: curl -i -X DELETE http://localhost:2113/admin/scavenge/{scavengeId} -u \"admin:changeit\" You can also stop scavenges from the Admin page of the Admin UI. Tip Each node in a cluster has its own independent database. As such, when you run a scavenge, you need to issue a scavenge request to each node. How often should you run a scavenge This depends on the following: How often you delete streams. How you set $maxAge , $maxCount or $tb metadata on your streams. Tip Read the .NET API or HTTP API docs for more details on setting metadata. Scavenging while Event Store is online It's safe to run a scavenge while Event Store is running and processing events, as it's designed to be an online operation. Warning Scavenging increases the number of reads/writes made to disk, and it is not recommended when your system is under heavy load."
  },
  "server/node-roles/index.html": {
    "href": "server/node-roles/index.html",
    "title": "Cluster node roles | Event Store",
    "keywords": "Cluster node roles Every node in an Event Store cluster can have one of three roles. Master A cluster assigns the Master role based on an election process. The node with the Master role ensures that the data are committed and persisted to disk before sending back to the client an acknowledge message. A cluster can only have one Master at a time. If a cluster detects two nodes with a Master role, a new election begins and shuts down the node with less data to restart and re-join the cluster. Slave A cluster assigns the Slave role based on an election process. A cluster uses one or more nodes with the Slave role to form the quorum, or the majority of nodes necessary to confirm that a write is persisted. Clone If you add nodes to a cluster beyond the number of nodes specified in the ClusterSize setting the cluster automatically assigns them the Clone role. A cluster asynchronously replicates data one way to a node with the Clone role. You don't need to wait for an acknowledgement message as the node is not part of the quorum. For this reason a node with a Clone role does not add much overhead to the other nodes. If a cluster loses nodes to take it below ClusterSize , then the cluster can promote a Clone to a Master or Slave role. You can control which clones the cluster promotes with the NodePriority command line option . The default value is 0 , and the cluster is more likely to promote clones with higher values. Note Changing NodePriority doesn't guarantee that the cluster won't promote the clone. It's only one of the criteria that the Election Service considers."
  },
  "server/deleting-streams-and-events/index.html": {
    "href": "server/deleting-streams-and-events/index.html",
    "title": "Deleting streams and events | Event Store",
    "keywords": "Deleting streams and events Meta data in Event Store defines whether an event is deleted or not. You can use stream metadata such as TruncateBefore , MaxAge and MaxCount to filter events considered deleted. When reading a stream, the index checks the stream's metadata to determine whether any of its events have been deleted. $all bypasses the index, meaning that it does not check the metadata to determine whether events exist or not. As such, events that have been deleted are still be readable until a scavenge has removed them. There are requirements for a scavenge to successfully remove events, for more information about this, read the scavenging guide . Warning The last event in a stream is always kept as a record of the last event number in the stream. Soft delete and TruncateBefore TruncateBefore and $tb considers any event with an event number lower than its value as deleted. For example, if you had the following events in a stream : 0@test-stream 1@test-stream 2@test-stream 3@test-stream If you set the TruncateBefore or $tb value to 3, a read of the stream would result in only reading the last event: 3@test-stream A Soft delete makes use of TruncateBefore and $tb . When you delete a stream, its TruncateBefore or $tb is set to the streams current last event number. When you read a soft deleted stream, the read returns a StreamNotFound or 404 result. After deleting the stream, you are able to write to it again, continuing from where it left off. For example, if you soft deleted the above example stream, the TruncateBefore or $tb is set to 3 (the stream's current event number). If you were to write to the stream again, the next event is written with event number 4. Only events from event number 4 onwards are visible when you read this stream. Max count and Max age Max count ( $maxCount and MaxCount ) limits the number of events that you can read from a stream. If you try to read a stream that has a max count of 5, you are only able to read the last 5 events, regardless of how many events are in the stream. Max age ( $maxAge and MaxAge ) specifies the number of seconds an event can live for. The age is calculated at the time of the read. So if you read a stream with a MaxAge of 3 minutes and one of the events in the stream has existed for 4 minutes at the time of the read, it is not returned. Hard delete A hard delete writes a tombstone event to the stream, permanently deleting it. You cannot recreate the stream, or write to it again. Tombstone events are written with the event type $streamDeleted . When you read a hard deleted stream, the read returns a StreamDeleted or 410 result. The events in the deleted stream are liable to be removed in a scavenge, but the tombstone event remains. Warning A hard delete of a stream is permanent. You cannot write to the stream or recreate it. As such, you should generally soft delete streams unless you have a specific need to permanently delete the stream. Deleted events and projections If you are intending on using projections and deleting streams, there are some things to take into consideration: Due to the nature of $all , projections using fromAll read any deleted events that have not been scavenged. They also receive any tombstone events from hard deletes. Projections that read from a specific stream receive that stream's metadata events. You can filter these out by ignoring events with an event type $metadata ."
  },
  "server/command-line-arguments/index.html": {
    "href": "server/command-line-arguments/index.html",
    "title": "Command line arguments | Event Store",
    "keywords": "Command line arguments Event Store supports many configuration options. There are three distinct ways to set any parameter, all with their own advantages and disadvantages. The command line Environment variables YAML files Command line To pass a configuration value over the command line you add the configuration to the line executing Event Store, for example: EventStore.ClusterNode.exe --log ~/logs While command line arguments are useful during development, they are not the preferred way to handle configuration in a production system. Environment variables You can set all arguments can also as environment variables. This mechanism is often used in UNIX based systems. For example: log=~/logs You can reference another environment variable by setting the variable’s value to ${env:REFERENCED_ENV_VAR} . For example, if you’re using Azure Service Fabric, some predefined environment variables exist. You can use EVENTSTORE_EXT_IP={env:Fabric_NodeIPOrFQDN} to reference the node's IP address. YAML files The last way you can set arguments is to put them into one or more configuration files. To tell Event Store to use a different configuration file, you pass the file path on the command line with --config=filename , or use the CONFIG enivornment variable. The basic format of the YAML configuration file is as follows: --- Log: \"~/logs\" IntHttpPort: 2111 --- Note You need to use the three dashes and spacing in your YAML file. YAML files are better for large installations as you can centrally distribute and manage them, or generate them from a configuration management system. Order of precedence The order of precedence between multiple configuration sources is important as you can set them in multiple ways. The command line is the highest priority followed by environment variables. Files are the lowest precedence and are processed in the order given on the command line. When starting Event Store it lists the major parameters in the log (including what set them). Parameter list Event Store supports the following parameters. Application options Command line parameter Environment variable prefixed with EVENTSTORE_ Config file YAML Description -Help --help=VALUE HELP Help Show help. (Default: False) -Version --version=VALUE VERSION Version Show version. (Default: False) -Log --log=VALUE LOG Log Path where to keep log files. (Default: See default directories -StructuredLog --structured-log=VALUE STRUCTURED_LOG StructuredLog Enable Structured (JSON) logging. (Default: True) -Config --config=VALUE CONFIG Config Configuration files. -Defines --defines=VALUE DEFINES Defines Run-time conditionals. (Default: n/a) -WhatIf --what-if=VALUE WHAT_IF WhatIf Print effective configuration to console and then exit. (Default: False) -StartStandardProjections --start-standard-projections=VALUE START_STANDARD_PROJECTIONS StartStandardProjections Start the built in system projections. (Default: False) -DisableHTTPCaching --disable-http-caching=VALUE DISABLE_HTTP_CACHING DisableHTTPCaching Disable HTTP caching. (Default: False) -MonoMinThreadpoolSize --mono-min-threadpool-size=VALUE MONO_MIN_THREADPOOL_SIZE MonoMinThreadpoolSize Minimum number of worker threads when running under mono. Set to 0 to leave machine defaults. (Default: 10) -Force --force=VALUE FORCE Force Force the Event Store to run in possibly harmful environments such as with Boehm GC. (Default: False) -StatsPeriodSec --stats-period-sec=VALUE STATS_PERIOD_SEC StatsPeriodSec The number of seconds between statistics gathers. (Default: 30) -WorkerThreads --worker-threads=VALUE WORKER_THREADS WorkerThreads The number of threads to use for pool of worker services. (Default: 5) -EnableHistograms --enable-histograms=VALUE ENABLE_HISTOGRAMS EnableHistograms Enables the tracking of various histograms in the backend, typically only used for debugging etc (Default: False) -LogHttpRequests --log-http-requests=VALUE LOG_HTTP_REQUESTS LogHttpRequests Log HTTP Requests and Responses before processing them. (Default: False) Authentication options Command line parameter Environment variable prefixed with EVENTSTORE_ Config file YAML Description -AuthenticationType --authentication-type=VALUE AUTHENTICATION_TYPE AuthenticationType The type of authentication to use. (Default: internal) -AuthenticationConfig --authentication-config=VALUE AUTHENTICATION_CONFIG AuthenticationConfig Path to the configuration file for authentication configuration (if applicable). Certificate options Command line parameter Environment variable prefixed with EVENTSTORE_ Config file YAML Description -CertificateStoreLocation --certificate-store-location=VALUE CERTIFICATE_STORE_LOCATION CertificateStoreLocation The certificate store location name. -CertificateStoreName --certificate-store-name=VALUE CERTIFICATE_STORE_NAME CertificateStoreName The certificate store name. -CertificateSubjectName --certificate-subject-name=VALUE CERTIFICATE_SUBJECT_NAME CertificateSubjectName The certificate subject name. -CertificateThumbprint --certificate-thumbprint=VALUE CERTIFICATE_THUMBPRINT CertificateThumbprint The certificate fingerprint/thumbprint. -CertificateFile --certificate-file=VALUE CERTIFICATE_FILE CertificateFile The path to certificate file. -CertificatePassword --certificate-password=VALUE CERTIFICATE_PASSWORD CertificatePassword The password to certificate in file. Cluster options Command line parameter Environment variable prefixed with EVENTSTORE_ Config file YAML Description -ClusterSize --cluster-size=VALUE CLUSTER_SIZE ClusterSize The number of nodes in the cluster. (Default: 1) -NodePriority --node-priority=VALUE NODE_PRIORITY NodePriority The node priority used during master election (Default: 0) -CommitCount --commit-count=VALUE COMMIT_COUNT CommitCount The number of nodes which must acknowledge commits before acknowledging to a client. (Default: -1) -PrepareCount --prepare-count=VALUE PREPARE_COUNT PrepareCount The number of nodes which must acknowledge prepares. (Default: -1) -DiscoverViaDns --discover-via-dns=VALUE DISCOVER_VIA_DNS DiscoverViaDns Whether to use DNS lookup to discover other cluster nodes. (Default: True) -ClusterDns --cluster-dns=VALUE CLUSTER_DNS ClusterDns DNS name from which other nodes can be discovered. (Default: fake.dns) -ClusterGossipPort --cluster-gossip-port=VALUE CLUSTER_GOSSIP_PORT ClusterGossipPort The port on which cluster nodes' managers are running. (Default: 30777) -GossipSeed --gossip-seed=VALUE GOSSIP_SEED GossipSeed Endpoints for other cluster nodes from which to seed gossip (Default: n/a) -GossipIntervalMs --gossip-interval-ms=VALUE GOSSIP_INTERVAL_MS GossipIntervalMs The interval in ms that nodes should try to gossip with each other (Default: 1000) -GossipAllowedDifferenceMs --gossip-allowed-difference-ms=VALUE GOSSIP_ALLOWED_DIFFERENCE_MS GossipAllowedDifferenceMs The amount of drift, in ms, between clocks on nodes allowed before gossip is rejected. (Default: 60000) -GossipTimeoutMs --gossip-timeout-ms=VALUE GOSSIP_TIMEOUT_MS GossipTimeoutMs The timeout in ms of gossip to another node. (Default: 500) -InitializationThreads --initialization-threads=VALUE INITIALIZATION_THREADS InitializationThreads Number of threads used to load chunk and index files. (Default: 1) -reduceFileCachePressure --reduce-file-cache-pressure=VALUE REDUCE_FILE_CACHE_PRESSURE reduceFileCachePressure Disables FileOptions.RandomAccess cache flag when opening chunk files. Useful if the Windows File Cache is consuming memory. (Default: False) -DisableFirstLevelHttpAuthorization --disable-first-level-http-authorization=VALUE DISABLE_FIRST_LEVEL_HTTP_AUTHORIZATION DisableFirstLevelHttpAuthorization Disables authorization layer on endpoints. (Default: True) -SkipIndexVerify --skip-index-verify=VALUE SKIP_INDEX_VERIFY SkipIndexVerify Skips reading and verification of PTables during start-up. (Default: False) -MaxAutoMergeIndexLevel --max-auto-merge-index-level=VALUE MAX_AUTO_MERGE_INDEX_LEVEL MaxAutoMergeIndexLevel Maximum level of index file to merge automatically before manual merge. (Default: 1000) -OptimizeIndexMerge --optimize-index-merge=VALUE OPTIMIZE_INDEX_MERGE OptimizeIndexMerge Bypasses the checking of file hashes of indexes during startup and after index merges. (Default: False) Database options Command line parameter Environment variable prefixed with EVENTSTORE_ Config file YAML Description -MinFlushDelayMs --min-flush-delay-ms=VALUE MIN_FLUSH_DELAY_MS MinFlushDelayMs The minimum flush delay in milliseconds. (Default: 2) -DisableScavengeMerging --disable-scavenge-merging=VALUE DISABLE_SCAVENGE_MERGING DisableScavengeMerging Disables the merging of chunks when scavenge is running (Default: False) -ScavengeHistoryMaxAge --scavenge-history-max-age=VALUE SCAVENGE_HISTORY_MAX_AGE ScavengeHistoryMaxAge The number of days to keep scavenge history (Default: 30) -CachedChunks --cached-chunks=VALUE CACHED_CHUNKS CachedChunks The number of chunks to cache in unmanaged memory. (Default: -1, or all) -ReaderThreadsCount --reader-threads-count=VALUE READER_THREADS_COUNT ReaderThreadsCount The number of reader threads to use for processing reads. (Default: 4) -ChunksCacheSize --chunks-cache-size=VALUE CHUNKS_CACHE_SIZE ChunksCacheSize The amount of unmanaged memory to use for caching chunks in bytes. (Default: 536871424) -MaxMemTableSize --max-mem-table-size=VALUE MAX_MEM_TABLE_SIZE MaxMemTableSize Adjusts the maximum size of a mem table. (Default: 1000000) -HashCollisionReadLimit --hash-collision-read-limit=VALUE HASH_COLLISION_READ_LIMIT HashCollisionReadLimit The number of events to read per candidate in the case of a hash collision (Default: 100) -Db --db=VALUE DB Db The path the db should be loaded/saved to. (Default: See default directories ) -Index --index=VALUE INDEX Index The path the index should be loaded/saved to. -MemDb --mem-db=VALUE MEM_DB MemDb Keep everything in memory, no directories or files are created. (Default: False) -SkipDbVerify --skip-db-verify=VALUE SKIP_DB_VERIFY SkipDbVerify Bypasses the checking of file hashes of database during startup (allows for faster startup). (Default: False) -WriteThrough --write-through=VALUE WRITE_THROUGH WriteThrough Enables Write Through when writing to the file system, this bypasses filesystem caches. (Default: False) -Unbuffered --unbuffered=VALUE UNBUFFERED Unbuffered Enables Unbuffered/DirectIO when writing to the file system, this bypasses filesystem caches. (Default: False) -PrepareTimeoutMs --prepare-timeout-ms=VALUE PREPARE_TIMEOUT_MS PrepareTimeoutMs Prepare timeout (in milliseconds). (Default: 2000) -CommitTimeoutMs --commit-timeout-ms=VALUE COMMIT_TIMEOUT_MS CommitTimeoutMs Commit timeout (in milliseconds). (Default: 2000) -UnsafeDisableFlushToDisk --unsafe-disable-flush-to-disk=VALUE UNSAFE_DISABLE_FLUSH_TO_DISK UnsafeDisableFlushToDisk Disable flushing to disk. (UNSAFE: on power off) (Default: False) -BetterOrdering --better-ordering=VALUE BETTER_ORDERING BetterOrdering Enable Queue affinity on reads during write process to try to get better ordering. (Default: False) -UnsafeIgnoreHardDelete --unsafe-ignore-hard-delete=VALUE UNSAFE_IGNORE_HARD_DELETE UnsafeIgnoreHardDelete Disables Hard Deletes (UNSAFE: use to remove hard deletes) (Default: False) -IndexCacheDepth --index-cache-depth=VALUE INDEX_CACHE_DEPTH IndexCacheDepth Sets the depth to cache for the mid point cache in index. (Default: 16) -AlwaysKeepScavenged --always-keep-scavenged=VALUE ALWAYS_KEEP_SCAVENGED AlwaysKeepScavenged Always keeps the newer chunks from a scavenge operation. (Default: False) Interface options Command line parameter Environment variable prefixed with EVENTSTORE_ Config file YAML Description -IntIp --int-ip=VALUE INT_IP IntIp Internal IP Address. (Default: 127.0.0.1) -ExtIp --ext-ip=VALUE EXT_IP ExtIp External IP Address. (Default: 127.0.0.1) -IntHttpPort --int-http-port=VALUE INT_HTTP_PORT IntHttpPort Internal HTTP Port. (Default: 2112) -ExtHttpPort --ext-http-port=VALUE EXT_HTTP_PORT ExtHttpPort External HTTP Port. (Default: 2113) -IntTcpPort --int-tcp-port=VALUE INT_TCP_PORT IntTcpPort Internal TCP Port. (Default: 1112) -IntSecureTcpPort --int-secure-tcp-port=VALUE INT_SECURE_TCP_PORT IntSecureTcpPort Internal Secure TCP Port. (Default: 0) -ExtTcpPort --ext-tcp-port=VALUE EXT_TCP_PORT ExtTcpPort External TCP Port. (Default: 1113) -ExtSecureTcpPortAdvertiseAs --ext-secure-tcp-port-advertise-as=VALUE EXT_SECURE_TCP_PORT_ADVERTISE_AS ExtSecureTcpPortAdvertiseAs Advertise Secure External Tcp Port As. (Default: 0) -ExtSecureTcpPort --ext-secure-tcp-port=VALUE EXT_SECURE_TCP_PORT ExtSecureTcpPort External Secure TCP Port. (Default: 0) -ExtIpAdvertiseAs --ext-ip-advertise-as=VALUE EXT_IP_ADVERTISE_AS ExtIpAdvertiseAs Advertise External Tcp Address As. -ExtTcpPortAdvertiseAs --ext-tcp-port-advertise-as=VALUE EXT_TCP_PORT_ADVERTISE_AS ExtTcpPortAdvertiseAs Advertise External Tcp Port As. (Default: 0) -ExtHttpPortAdvertiseAs --ext-http-port-advertise-as=VALUE EXT_HTTP_PORT_ADVERTISE_AS ExtHttpPortAdvertiseAs Advertise External Http Port As. (Default: 0) -IntIpAdvertiseAs --int-ip-advertise-as=VALUE INT_IP_ADVERTISE_AS IntIpAdvertiseAs Advertise Internal Tcp Address As. -IntSecureTcpPortAdvertiseAs --int-secure-tcp-port-advertise-as=VALUE INT_SECURE_TCP_PORT_ADVERTISE_AS IntSecureTcpPortAdvertiseAs Advertise Secure Internal Tcp Port As. (Default: 0) -IntTcpPortAdvertiseAs --int-tcp-port-advertise-as=VALUE INT_TCP_PORT_ADVERTISE_AS IntTcpPortAdvertiseAs Advertise Internal Tcp Port As. (Default: 0) -IntHttpPortAdvertiseAs --int-http-port-advertise-as=VALUE INT_HTTP_PORT_ADVERTISE_AS IntHttpPortAdvertiseAs Advertise Internal Http Port As. (Default: 0) -IntTcpHeartbeatTimeout --int-tcp-heartbeat-timeout=VALUE INT_TCP_HEARTBEAT_TIMEOUT IntTcpHeartbeatTimeout Heartbeat timeout for internal TCP sockets (Default: 700) -ExtTcpHeartbeatTimeout --ext-tcp-heartbeat-timeout=VALUE EXT_TCP_HEARTBEAT_TIMEOUT ExtTcpHeartbeatTimeout Heartbeat timeout for external TCP sockets (Default: 1000) -IntTcpHeartbeatInterval --int-tcp-heartbeat-interval=VALUE INT_TCP_HEARTBEAT_INTERVAL IntTcpHeartbeatInterval Heartbeat interval for internal TCP sockets (Default: 700) -ExtTcpHeartbeatInterval --ext-tcp-heartbeat-interval=VALUE EXT_TCP_HEARTBEAT_INTERVAL ExtTcpHeartbeatInterval Heartbeat interval for external TCP sockets (Default: 2000) -GossipOnSingleNode --gossip-on-single-node=VALUE GOSSIP_ON_SINGLE_NODE GossipOnSingleNode When enabled tells a single node to run gossip as if it is a cluster (Default: False) -AdminOnExt --admin-on-ext=VALUE ADMIN_ON_EXT AdminOnExt Whether or not to run the admin ui on the external HTTP endpoint (Default: True) -StatsOnExt --stats-on-ext=VALUE STATS_ON_EXT StatsOnExt Whether or not to accept statistics requests on the external HTTP endpoint, needed if you use admin ui (Default: True) -GossipOnExt --gossip-on-ext=VALUE GOSSIP_ON_EXT GossipOnExt Whether or not to accept gossip requests on the external HTTP endpoint (Default: True) -IntHttpPrefixes --int-http-prefixes=VALUE INT_HTTP_PREFIXES IntHttpPrefixes The prefixes that the internal HTTP server should respond to. (Default: n/a) -ExtHttpPrefixes --ext-http-prefixes=VALUE EXT_HTTP_PREFIXES ExtHttpPrefixes The prefixes that the external HTTP server should respond to. (Default: n/a) -EnableTrustedAuth --enable-trusted-auth=VALUE ENABLE_TRUSTED_AUTH EnableTrustedAuth Enables trusted authentication by an intermediary in the HTTP (Default: False) -AddInterfacePrefixes --add-interface-prefixes=VALUE ADD_INTERFACE_PREFIXES AddInterfacePrefixes Add interface prefixes (Default: True) -UseInternalSsl --use-internal-ssl=VALUE USE_INTERNAL_SSL UseInternalSsl Whether to use secure internal communication. (Default: False) -DisableInsecureTCP --disable-insecure-tcp=VALUE DISABLE_INSECURE_TCP DisableInsecureTCP Whether to disable insecure TCP communication (Default: False) -SslTargetHost --ssl-target-host=VALUE SSL_TARGET_HOST SslTargetHost Target host of server's SSL certificate. (Default: n/a) -SslValidateServer --ssl-validate-server=VALUE SSL_VALIDATE_SERVER SslValidateServer Whether to validate that server's certificate is trusted. (Default: True) -ConnectionPendingSendBytesThreshold --connection-pending-send-bytes-threshold=VALUE CONNECTION_PENDING_SEND_BYTES_THRESHOLD ConnectionPendingSendBytesThreshold The maximum number of pending send bytes allowed before a connection is closed. (Default: 10485760) -FaultOutOfOrderProjections --fault-out-of-order-projections=VALUE FAULT_OUT_OF_ORDER_PROJECTIONS FaultOutOfOrderProjections Specify if a projection should be faulted when there is a discontinuity in event ordering (Default: True) Projections options Command line parameter Environment variable prefixed with EVENTSTORE_ Config file YAML Description -RunProjections --run-projections=VALUE RUN_PROJECTIONS RunProjections Enables the running of projections. System runs built-in projections, All runs user projections. (Default: None) Possible Values:None,System,All -ProjectionThreads --projection-threads=VALUE PROJECTION_THREADS ProjectionThreads The number of threads to use for projections. (Default: 3)"
  },
  "server/64-bit-index/index.html": {
    "href": "server/64-bit-index/index.html",
    "title": "Rebuilding indexes | Event Store",
    "keywords": "Rebuilding indexes As of version 3.9.0 all future indexes use 64-bit hashes instead of 32-bit hashes. Event Store automatically transitions your indexes from 32-bit to 64-bit by writing all new indexes as 64-bit indexes during the merge process. If you prefer to use only 64-bit indexes immediately you can force this change. For a small database, delete the index folder in your database folder, and let it rebuild (this might take a while) If you have a large database, or it's stored in remote storage, and you can't lose downtime, you can run this operation offline on another node with the following steps: Take a back up . Restore the backup to fast local disks. Delete the index folder from back up. Run Event Store with a cluster size 3 to prevent other writes. It will rebuild the index. Restore the index back to a node ( index folder). Let Event Store catch up from master. Repeat the restore for other nodes. For other indices, your index will change to 64-bit due to the merging process that occurs over time."
  },
  "reference/reliability/index.html": {
    "href": "reference/reliability/index.html",
    "title": "Reliability | Event Store",
    "keywords": "Reliability You should look at reliability from a holistic perspective. Event Store treats data transactionally with full durability assurances, but this doesn't help you if the hardware on your machine does not support it. Many consumer grade disks (and SSDs especially) lie about durability to appear faster. This is fine until you have a power outage and lose information. These issues do not just affect Event Store. Other vendors and projects have created tests to check whether you may be losing data. We recommend running one of these tests against your production environment. You can check the state of your drives on Linux by using the following command: sudo hdparm -I {drive} For example, check /dev/sda to see if caching is enabled on your drive. Be wary though, just because caching is disabled does not mean that all writes are fully durable. If you are running Linux you might want to consider adding the following to /etc/hdparm.conf : /dev/yourdrive { write_cache = off } If you are running the clustered version of Event Store you may wish to allow these unlikely events to happen. The drives run faster with caching enabled and it's unlikely that you would lose three machines at the same time with corruption. If this were to happen you can truncate your data and re-replicate from the other nodes."
  },
  "reference/internal-architectural-overview/index.html": {
    "href": "reference/internal-architectural-overview/index.html",
    "title": "Internal architectural overview | Event Store",
    "keywords": "Internal architectural overview <!-- TODO: Overview image or intro? --> Messaging The architecture style of Event Store is SEDA (Staged Event Driven Architecture) . Messages flow forward through queues internally, including the transaction file, which is also a queue. There are communication endpoints that flow forward through series of queues to be processed. All operations are purely asynchronous. The core processing runs on a single thread reading requests off of a single concurrent queue. Messages first flow through a state machine that represents the state of the node. In a distributed scenario a node is not always allowed to write (slaves forward writes, not write themselves), or if the node is still initializing its not allowed to read. Each request is handled by a state machine that manages the lifecycle of that request including time outs and acknowledgements throughout the cluster. Because of this architecture, the main monitoring points of Event Store is the status of the queues. You can view the status in the health area of the admin interface or through the HTTP API. It's also periodically written to a special $statistics-node:port stream. <!-- TODO: Which endpoint --> <!-- TODO: IMAGE(s)--> The most common queue to be slow is the storage writer as it writes to storage in a durable fashion. It uses fsync and flushfile buffers to ensure that data is persisted to disk and survives, say, a power outage on the machine. The storage writer is capable of writing more than 15,000 transactions to disk per second on the open source single node version. Transaction file Event Store provides durable storage including handling cases where the power may be turned off to a machine through the use of a commit log. The commit log is a conceptual constantly appending file (though it is not implemented this way <!-- TODO: This is confusing, link to more details? --> ). Every write to Event Store appends to this file. The commit log is built not as one large file but as a series of small files implemented with an abstraction called a 'TFChunk'. For all files it writes, Event Store always writes sequentially, except for checkpoints, although there is a non-performing sequential version of checkpoints. This results in seeks not being necessary for writes. While less of a problem with SSDs, this can drastically help with performance of spindle drives. It also allows for the possibility to store data for Event Store (both indexes and the transaction file) on write once media. Entire TFChunks are cached by loading the entire chunk into unmanaged memory. Most of the memory usage by Event Store is unmanaged. It's rare to see it use more than a few hundred megabytes in managed heaps. Even in these scenarios most of the memory is in the large object heap (LOH) and point to native types such as byte[] to put a minimum load possible on the garbage collector. Scavenging The chunks in the transaction file are periodically scavenged to remove deleted or old data, and depending on stream rules such as $maxCount in the stream metadata, can be compacted. This process generates new chunks and switches them out atomically, deleting them once they are no longer in use by readers. This gives the benefit that, once completed, TFChunks are immutable. This includes the current chunk. Since it's only written to sequentially it never seeks back to overwrite something. Every record in the log has an ID. The ID is the logical position at which the record was originally written to disk. This is useful as an identifier, as in a scenario where you are not deleting you know exactly where the record is stored. When you begin scavenging this location can move. As part of the process of scavenging a TFChunk, a map is written of remappings from the original IDs. This is crucial because index points back to these IDs. This map allows the index and the TFChunks to be scavenged independently. If, during the scavenge process, the overhead of the map outweighs the benefit of the scavenge the scavenge is not performed. Chunks that are completed also have an MD5 checksum to validate the data inside of them since disks do occasionally go bad or mangle data. This checksum is checked periodically to validate that the data is not corrupted. Index Event Store only has one index. You should use projections for building application level indexes. The index is immutable. Queries executed against Event Store are always to get an event represented as a sequence number inside of a stream. The index is optimized for this purpose. Each record in the index is 16 bytes: 4 bytes for the hash of the stream ID. 4 bytes for the sequence number. 8 bytes for the original position the record had in the log. This identifier of a record is useful as you can avoid additional lookups when writing the record to disk, this can change due to scavenging of the transaction file. As transactions are written to the transaction file, where an in-memory index is appended. A query hits the in memory index. The in-memory index is implemented as a hash of sorted lists with a fine grained lock on the stream. When there are enough items in the in-memory index, the index is flushed to disk (known as a 'PTable' or 'Persistent Table'). A PTable is a sorted group of index entries (remember that they are only 16 bytes each). A binary search across the PTables is used to search. The search function has been memoized by storing midpoints in memory. Mid point caching reduces the number of seeks from log(n) by the depth to which midpoints are filled and often all are in memory. Index rebuilds You can copy indexes from machine to machine providing the data structure is the same. This guide explains how the index rebuild process works when you add new nodes to a cluster, or backup and restore an index. TFiles make up a transaction log, but conceptually they are one continuous file. Event Store breaks them up into many files instead of one big file for operational reasons such as incremental back ups. This mechanism also tends to play better with the filesystem. Rebuilding an index requires starting from position 0 in this large continuous file and then moving forward indexing every item one at a time. Rebuilds on a new node When Event Store starts on a blank machine there are no persistent indexes, there is only a memtable (in memory index). There is a limit to how many items the memory index can store (1 million). When an index hits this number, the index is then moved to a disk based format known as a PTable. Event Store stores what the position was in the TFile for what the PTable represents. In a single index file example it may be 0,12345678 meaning the index covers all transactions between positions 0 and 12345678 . When Event Store loads the index, it calculates the position that the persistent index covers, in this example, 12345678 . After loading the index, Event Store then knows that the index covers all events before positions 12345678 , and does not need to take them into account. Event Store then rebuilds the memory index from position 12345678 up to the current, which you can see in log output when Event Store starts. PTables get merged into larger PTables over time. During this operation they are scavenged for items to be removed. The merging of N PTables to one larger PTable is a linear operation as they are all sorted. Once written to disk, PTables are immutable and have like TFchunks MD5 checksums. Unlike a failure in a TFChunk checksum, if a problem is found within the index it is simply rebuilt. Backup and restore When it comes to restoring Event Store from a backup, Event Store loads the persistent indexes, and finds out the highest logical position covered in the index. Event Store then creates a memtable from that point forward, this process is asynchronous and does not hold up start up."
  },
  "projections/user-defined-projections/index.html": {
    "href": "projections/user-defined-projections/index.html",
    "title": "User defined projections | Event Store",
    "keywords": "User defined projections <!-- TODO: Again refactor to shopping cart? --> You write user defined projections in JavaScript. For example, the my_demo_projection_result projection below counts the number of myEventType events from the account-1 stream. It then uses the transformBy function to change the final state: options({ resultStreamName: \"my_demo_projection_result\", $includeLinks: false, reorderEvents: false, processingLag: 0 }) fromStream('account-1') .when({ $init:function(){ return { count: 0 } }, myEventType: function(state, event){ state.count += 1; } }) .transformBy(function(state){ state.count = 10; }) .outputState() <!-- TODO: Show example output, see above comment --> User defined projections API Options Name Description Notes resultStreamName Overrides the default resulting stream name for the outputState() transformation, which is $projections-{projection-name}-result . $includeLinks Configures the projection to include/exclude link to events. Default: false processingLag When reorderEvents is enabled, this value is used to compare the total milliseconds between the first and last events in the buffer and if the value is equal or greater, the events in the buffer are processed. The buffer is an ordered list of events. Default: 500ms Only valid for fromStreams() selector reorderEvents Process events by storing a buffer of events ordered by their prepare position Default: false Only valid for fromStreams() selector Selectors Selector Description Notes fromAll() Selects events from the $all stream. Provides partitionBy when foreachStream outputState fromCategory({category}) Selects events from the $ce-{category} stream. Provides partitionBy when foreachStream outputState fromStream({streamId}) Selects events from the {streamId} stream. Provides partitionBy when outputState fromStreams([]streams) Selects events from the streams supplied. Provides partitionBy when outputState fromStreamsMatching(function filter) Selects events from the $all stream that returns true for the given filter. Provides when Filters/Transformations Filter/Partition Description Notes when(handlers) Allows only the given events of a particular to pass through the projection. Provides $defines_state_transform transformBy filterBy outputTo outputState foreachStream() Partitions the state for each of the streams provided. Provides when outputState() If the projection maintains state, setting this option produces a stream called $projections-{projection-name}-result with the state as the event body. Provides transformBy filterBy outputTo partitionBy(function(event)) Partitions a projection by the partition returned from the handler. Provides when transformBy(function(state)) Provides the ability to transform the state of a projection by the provided handler. Provides transformBy filterBy outputState outputTo filterBy(function(state)) Causes projection results to be null for any state that returns a false value from the given predicate. Provides transformBy filterBy outputState outputTo Handlers Each handler is provided with the current state of the projection as well as the event that triggered the handler. The event provided through the handler contains the following properties. isJson : true/false data : {} body : s{} bodyRaw : string sequenceNumber : integer metadataRaw : {} linkMetadataRaw : string partition : string eventType : string Handler Description Notes {event-type} When using fromAll() and 2 or more event type handlers are specified and the $by_event_type projection is enabled and running, the projection starts as a fromStreams($et-event-type-foo, $et-event-type-bar) until the projection has caught up and moves to reading from the transaction log (i.e. from $all ). $init Provide the initialization for a projection. Commonly used to setup the initial state for a projection. $initShared Provide the initialization for a projection where the projection is possibly partitioned. $any Event type pattern match that match any event type. Commonly used when the user is interested in any event type from the selector. $deleted Called upon the deletion of a stream. Can only be used with foreachStream Functions Name Description Notes emit(streamId, eventType, eventBody, metadata) Writes an event to the designated stream linkTo(streamId, event, metadata) Writes a link to event to the designated stream"
  },
  "projections/system-projections/index.html": {
    "href": "projections/system-projections/index.html",
    "title": "System projections | Event Store",
    "keywords": "System projections <!-- TODO: retrofit to shopping cart examples? --> Event Store ships with four built in projections. By Category ( $by_category ) By Event Type ( $by_event_type ) By Correlation ID ( $by_correlation_id ) Stream by Category ( $stream_by_category ) Streams ( $streams ) Enabling system projections When you start Event Store from a fresh database, these projections are present but disabled and querying their statuses returns Stopped . You can enable a projection by issuing a request which switches the status of the projection from Stopped to Running . HTTP API .NET Client curl -i -X POST \"http://{event-store-ip}:{ext-http-port}/projection/{projection-name}/command/enable\" -H \"accept:application/json\" -H \"Content-Length:0\" -u admin:changeit <!-- TODO: Is there a .NET equivelant? --> By category The $by_category ( http://127.0.0.1:2113/projection/$by_category ) projection links existing events from streams to a new stream with a $ce- prefix (a category) by splitting a stream id by a configurable separator. first - You can configure the separator, as well as where to split the stream id . You can edit the projection and provide your own values if the defaults don't fit your particular scenario. The first parameter specifies how the separator is used, and the possible values for that parameter is first or last . The second parameter is the separator, and can be any character. For example, if the body of the projection is first and - , for a stream id of account-1 , the stream name the projection creates is $ce-account . If the body of the projection is last and - , for a stream id of shopping-cart-1 , the stream name the projection creates is $ce-shopping-cart . The use case of this project is subscribing to all events within a category. By event type The $by_event_type ( http://127.0.0.1:2113/projection/$by_event_type ) projection links existing events from streams to a new stream with a stream id in the format $et-{event-type} . You cannot configure this projection. By correlation ID The $by_correlation_id ( http://127.0.0.1:2113/projection/$by_correlation_id ) projection links existing events from projections to a new stream with a stream id in the format $bc-<correlation id> . The projection takes one parameter, a JSON string as a projection source: {\"correlationIdProperty\":\"$myCorrelationId\"} Stream by category The $stream_by_category ( http://127.0.0.1:2113/projection/$by_category ) projection links existing events from streams to a new stream with a $category prefix by splitting a stream id by a configurable separator. first - By default the $stream_by_category projection links existing events from a stream id with a name such as account-1 to a stream called $category-account . You can configure the separator as well as where to split the stream id . You can edit the projection and provide your own values if the defaults don't fit your particular scenario. The first parameter specifies how the separator is used, and the possible values for that parameter is first or last . The second parameter is the separator, and can be any character. For example, if the body of the projection is first and - , for a stream id of account-1 , the stream name the projection creates is $category-account , and the account-1 stream is linked to it. Future streams prefixed with account- are likewise linked to the newly created $category-account stream. If the body of the projection is last and - , for a stream id of shopping-cart-1 , the stream name the projection creates is $category-shopping-cart , and the shopping-cart-1 stream is linked to it. Future streams whose left-side split by the last '-' is shopping-cart , are likewise linked to the newly created $category-shopping-cart stream. The use case of this projection is subscribing to all stream instances of a category. Streams The $streams ( http://127.0.0.1:2113/projection/$streams ) projection links existing events from streams to a stream named $streams You cannot configure this projection."
  },
  "projections/projections-config/index.html": {
    "href": "projections/projections-config/index.html",
    "title": "Configuring projections | Event Store",
    "keywords": "Configuring projections <!-- TODO: And how do you change them? UI, .NET, HTTP etc --> By changing these settings, you can lessen the amount of pressure projections put on an Event Store node or improve projection performance. You can change these settings on a case-by-case basis, and monitor potential improvements. Note You can only change the configuration of a stopped projection. You change the configuration of a projection by setting the relevant key and value in a request, or when you create a projection with the web admin interface. HTTP API .NET Client <!-- TODO: Further explanation here --> curl -i --data-binary \"@xbox-one-s-counter.json\" http://localhost:2113/projections/continuous?name=xbox-one-s-counter%26type=js%26enabled=true%26emit=true%26trackemittedstreams=true -u admin:changeit <!-- TODO: Further explanation here --> var streamName = Globals.streamName; var adminCredentials = Globals.AdminCredentials; PersistentSubscriptionSettings settings = PersistentSubscriptionSettings.Create() .DoNotResolveLinkTos() <!-- ## [JVM Client](#tab/tabid-7) --> <!-- TODO: Exists? --> Emit options These options control how projections write events. In busy systems, projections can put a lot of extra pressure on the master node. This is especially true for Event Store servers that also have persistent subscriptions running, which only the master node can process. If you see a lot of commit timeouts and slow writes from your projections and other clients, then start with these settings. Emit enabled The emit boolean setting determines whether a projection can emit events and any projection that calls emit() or linkTo() requires it. If this option is not set and a projection attempts to emit events, you see an error message like the following: <!-- TODO: Is it emit or emitenabled? Or are .NET and HTTP different --> 'emit' is not allowed by the projection/configuration/mode Event Store disables this setting by default, and is usually set when you create the projection and if you need the projection to emit events. Track emitted streams The trackemittedstreams boolean setting enables tracking of a projection's emitted streams. It only has an affect if the projection has EmitEnabled enabled. Tracking emitted streams enables you to delete a projection and all the streams that it has created. You should only the setting if you intend to delete a projection and create new ones that project to the same stream. Warning By default Event Store disables the trackemittedstreams setting for projections. When enabled, an event written records the stream name (in $projections-{projection_name}-emittedstreams ) of each event emitted by the projection. This means that write amplification is a possibility, as each event that the projection emits writes a separate event. As such, this option is not recommended for projections that emit a lot of events, and you should enable only where necessary. Tip Between Event Store versions 3.8.0 and 4.0.2, this option was enabled by default when a projection was created through the UI. If you have any projections created during this time frame, it's worth checking whether this option is enabled. Max allowed writes in flight <!-- TODO: Why is this not in the GUI for new projection? --> <!-- TODO: Is the setting name correct? Especially in HTTP --> The AllowedInFlightMessages setting sets the maximum number of writes to allow for a projection. Because a projection can write to multiple different streams, it's possible for the projection to send multiple writes at the same time. This option sets the number of concurrent writes that a projection can perform. By default, projections try to perform writes as quickly as they come. This can add a lot of pressure to a node, especially for projections that emit to many different streams. If you see your projections causing frequent commit timeouts or slow reads, you can try lowering this value to see if there is any improvement. Note Lower values may cause the projection to slow down as the number of writes are throttled, but the trade off for this is cleaner logs and fewer commit timeouts. By default, this is unbounded, allowing a projection to write as fast as it can. Max write batch length <!-- TODO: Why is this not in the GUI for new projection? --> <!-- TODO: Is the setting name correct? Especially in HTTP --> The MaxWriteBatchLength setting sets the maximum number of events the projection can write in a batch at a time. The default for this option is 500. Checkpoint options Checkpoints store how far along a projection is in the streams it is processing from. There is a performance overhead with writing a checkpoint, as it does more than write an event, and writing them too often can slow projections down. We recommend you try other methods of improving projections before changing these values, as checkpoints are an important part of running projections. Checkpoint after Ms The CheckpointAfterMs setting prevents a new checkpoint from being written within a certain time frame from the previous one. The setting is to keep a projection from writing too many checkpoints too quickly, something that can happen in a busy system. The default setting is 0 seconds, which means there is no limit to how quickly checkpoints can be written. Checkpoint handled threshold The CheckpointHandledThreshold setting controls the number of events that a projection can handle before attempting to write a checkpoint. An event is considered handled if it actually passed through the projection's filter. If the projection is set to checkpoint every 4,000 events, but it only reads from the foo stream, the projection only checkpoints every 4,000 foo events. The default setting is 4,000 events. Checkpoint unhandled bytes threshold The CheckpointUnhandledBytesThreshold setting specifies the number of bytes a projection can process before attempting to write a checkpoint. Unhandled bytes are the events that are not processed by the projection itself. For example, if the projection reads from the foo stream, but writes from the bar stream comes through, a checkpoint is written after this number of bytes have been processed. This prevents the projection from having to read through a potentially large number of unrelated events again because none of them passed its filter. The default setting is 10mb. Processing options Pending events threshold The PendingEventsThreshold setting determines the number of events that can be pending before the projection is paused. Pausing the projection stops the projection from reading, allowing it to finish with the current events that are waiting to be processed. Once the pending queue has drained to half the threshold, the projection starts reading again. The default setting is 5000."
  },
  "projections/index.html": {
    "href": "projections/index.html",
    "title": "Introduction to projections | Event Store",
    "keywords": "Introduction to projections Projections is an Event Store subsystem that lets you write new events or link existing events to streams in a reactive manner. Projections are good at solving one specific query type, a category known as 'temporal correlation queries'. This query type is common in business systems and few can execute these queries well. Note Projections require the event body to be in JSON. Business case examples For example. You are looking for how many Twitter users said \"happy\" within 5 minutes of the word \"foo coffee shop\" and within 2 minutes of saying \"london\". This is the type of query that projections can solve. Let's try a more complex business problem. As a medical research doctor you want to find people diagnosed with pancreatic cancer within the last year. During their treatment a patient should not have had any proxies for a heart condition such as taking aspirin every morning. Within three weeks of their diagnosis they should have been put on treatment X. Within one month after starting the treatment they should have failed with a lab result that looks like L1. Within another six weeks they should have been put on treatment Y, and within four weeks failed that treatment with a lab result that looks like L2. You can use projections in nearly all examples of near real-time complex event processing. There are a large number of problems that fit into this category from monitoring of temperature sensors, to reacting to changes in the stock market. It's important to remember the types of problems that projections help to solve. Many problems are not a good fit for projections and are better served by hosting another read model populated by a catchup subscription . Continuous querying Projections support the concept of continuous queries. When running a projection you can choose whether the query should run and give you all results present, or whether the query should continue running into the future finding new results as they happen and updating its result set. In the medical example above the doctor could leave the query running to be notified of any new patients that meet the criteria. The output of all queries is a stream, this stream can be listened to like any other stream. Types of projections There are two types of projections in Event Store: Built in (system) projections written in C#. User-defined JavaScript projections which you create via the API or the admin UI."
  },
  "projections/debugging/index.html": {
    "href": "projections/debugging/index.html",
    "title": "Debugging | Event Store",
    "keywords": "Debugging User projections you create in JavaScript have a bonus that debugging is easier via any browser that ships with debugging capabilities. The screenshots in this document show the use of Chrome, but we have tested debugging with all major browsers including Firefox, Edge and Safari. Logging from within a projection For debugging purposes, projections includes a log method which, when called, sends messages to the configured Event Store logger (the default is NLog , to a file, and stdout ). You might find printing out the structure of the event body for inspection useful. For example: fromStream('$stats-127.0.0.1:2113') .when({ $any: function(s,e){ log(JSON.stringify(e)); } }) Creating a sample projection for debugging purposes Filename: stats-counter.json Contents: fromStream('$stats-127.0.0.1:2113') .when({ $init: function(){ return { count: 0 } }, $any: function(s,e){ s.count += 1; } }) You create the projection by making a call to the API and providing it with the definition of the projection. curl -i -d@stats-counter.json http://localhost:2113/projections/continuous?name=stats-counter%26type=js%26enabled=true%26emit=true%26trackemittedstreams=true -u admin:changeit Debugging your first projection Once the projection is running, open your browser and enable the developer tools. Once you have the developer tools open, visit your projection URL and you should see a button labelled Debug . After clicking the projection \"Debug\" button, you see the debugging interface with the definition of the projection and information about the events the projection is processing on the right hand side. At the top there are couple of buttons to take note of, specifically the Run Step and Update buttons. You use Run Step to step through the event waiting in the queue, placing you in projection debugging mode. The Update button provides you with a way to update the projection definition without having to go back to the projection itself and leave the context of the debugger. If the Run Step button is not greyed out and you click it, the browser has hit a breakpoint. You are now able to step through the projection, the important method to step into is the handler(state, eventEnvelope) method."
  },
  "projections/api/index.html": {
    "href": "projections/api/index.html",
    "title": "API | Event Store",
    "keywords": "API <!-- TODO: Do Something better with this? Or just link? --> URI Description HTTP Verb /projections/any Returns all known projections. GET /projections/all-non-transient Returns all known non ad-hoc projections. GET /projections/transient Returns all known ad-hoc projections. GET /projections/onetime Returns all known one-time projections. GET /projections/continuous Returns all known continuous projections. GET /projections/transient?name={name}&type={type}&enabled={enabled} Create an ad-hoc projection. This type of projection runs until completion and automatically deleted afterwards. POST Parameters name: Name of the projection type: JS or Native. (JavaScript or native. At this time, Event Store only supports JavaScript) enabled: Enable the projection (true/false) /projections/onetime?name={name}&type={type}&enabled={enabled}&checkpoints={checkpoints}&emit={emit}&trackemittedstreams={trackemittedstreams} Create a one-time projection. This type of projection runs until completion and then stops. POST Parameters name: Name of the projection type: JS or Native. (JavaScript or native. At this time, Event Store only supports JavaScript) enabled: Enable the projection (true/false) checkpoints: Enable checkpoints (true/false) emit: Enable the ability for the projection to write to streams (true/false) trackemittedstreams: Write the name of the streams the projection is managing to a separate stream. $projections-{projection-name}-emittedstreams (true/false) /projections/continuous?name={name}&type={type}&enabled={enabled}&emit={emit}&trackemittedstreams={trackemittedstreams} Create a continuous projection. This type of projection will, if enabled will continuously run unless disabled or an unrecoverable error is encountered. POST Parameters name: Name of the projection type: JS or Native. (JavaScript or native. At this time, Event Store only supports JavaScript) enabled: Enable the projection (true/false) emit: Allow the projection to write to streams (true/false) trackemittedstreams: Write the name of the streams the projection is managing to a separate stream. $projections-{projection-name}-emittedstreams (true/false) /projection/{name}/query?config={config} Returns the definition query and if config is set to true, will return the configuration. GET Parameters name: Name of the projection config: Return the definition of the projection (true/false) /projection/{name}/query?type={type}&emit={emit} Update a projection's query. PUT Parameters name: Name of the projection type: JS or Native. (JavaScript or native. At this time, Event Store only supports JavaScript) emit: Allow the projection to write to streams (true/false) trackemittedstreams: Write the name of the streams the projection is managing to a separate stream. $projections-{projection-name}-emittedstreams (true/false) /projection/{name} Returns information for a projection. GET /projection/{name}?deleteStateStream={deleteStateStream}&deleteCheckpointStream={deleteCheckpointStream}&deleteEmittedStreams={deleteEmittedStreams} Delete a projection, optionally delete the streams that were created as part of the projection. DELETE Parameters name: Name of the projection deleteStateStream: Delete the state stream (true/false) deleteCheckpointStream: Delete the checkpoint stream (true/false) deleteEmittedStreams: Delete the emitted streams stream (true/false) /projection/{name}/statistics Returns detailed information for a projection. GET Parameters name: Name of the projection /projection/{name}/state?partition={partition} Query for the state of a projection. GET Parameters name: Name of the projection partition: The partition /projection/{name}/result?partition={partition} Query for the result of a projection. GET Parameters name: Name of the projection partition: The partition /projection/{name}/command/disable?enableRunAs={enableRunAs} Disable a projection. POST Parameters name: Name of the projection enableRunAs: Enables the projection to run as the user who issued the request. /projection/{name}/command/enable?enableRunAs={enableRunAs} Enable a projection. POST Parameters name: Name of the projection enableRunAs: Enables the projection to run as the user who issued the request. /projection/{name}/command/reset?enableRunAs={enableRunAs} Reset a projection. (This will re-emit events, streams that are written to from the projection will also be soft deleted). POST Parameters name: Name of the projection enableRunAs: Enables the projection to run as the user who issued the request. /projection/{name}/command/abort?enableRunAs={enableRunAs} Abort a projection. POST Parameters name: Name of the projection enableRunAs: Enables the projection to run as the user who issued the request."
  },
  "getting-started/which-api-sdk/index.html": {
    "href": "getting-started/which-api-sdk/index.html",
    "title": "Step 4 - Which API or SDK to use | Event Store",
    "keywords": "Step 4 - Which API or SDK to use This getting started guide shows you how to get started with Event Store using the Atom publishing protocol as the primary interface. This final step covers the different APIs, and client SDKs Event Store has available with the aim of helping you choose which one suits your use case. TCP Event Store offers a low-level protocol in the form of an asynchronous TCP protocol that exchanges protobuf objects. At present this protocol has adapters for .NET and the JVM. Event Store supported clients .NET Client JVM Client Community developed clients .NET Core Node.js Node.js Node.js Haskell Erlang F# Elixir Java 8 Maven plugin Rust Go HTTP Event Store also offers an HTTP-based interface, based specifically on the AtomPub protocol . As it operates over HTTP, this is less efficient, but nearly every environment supports it. Event Store supported clients HTTP API Community developed clients PHP Python Ruby Go If you have a client to add, click the 'Improve this Doc' link on the top right of the page to submit a pull request. Which to use? Many factors go into the choice of which of the protocols (TCP vs. HTTP) to use. Both have their strengths and weaknesses. TCP is faster This speed especially applies to subscribers as events pushed to the subscriber, whereas with Atom the subscribers poll the head of the atom feed to check if new events are available. The difference can be as high as 2–3 times higher (sub 10ms for TCP, vs. seconds for Atom). Also, the number of writes per second supported is often dramatically higher when using TCP. At the time of writing, standard Event Store appliances can service around 2000 writes/second over HTTP compared to 15,000-20,000/second over TCP. This increase might be a deciding factor if you are in a high-performance environment. AtomPub is more scalable for large numbers of subscribers This scalability is due to the ability to use intermediary caching with Atom feeds. Most URIs returned by Event Store point to immutable data and are infinitely cachable. Therefore on a replay of a projection, much of the data required is likely available on a local or intermediary cache. This can also lead to lower network traffic. Atom tends to operate better in a large heterogeneous environment where you have callers from different platforms. This is especially true if you have to integrate with different teams or external vendors. Atom is an industry standard and well-documented protocol whereas the TCP protocol is a custom protocol they would need to understand. Most platforms have good existing tooling for Atom including feed readers. None of this tooling exists for analyzing traffic with the TCP protocol. Note Our recommendation would be to use AtomPub as your primary protocol unless you have low subscriber SLAs or need higher throughput on reads and writes than Atom can offer. This is due to the open nature and ease of use of the Atom protocol. Often in integration scenarios, these are more important than raw performance. Next step Congratulations! You've reached the end of our getting started guide, what's next? Want to use the .NET client? Find more here . Want to use the HTTP API? Find out more here ."
  },
  "http-api/optimistic-concurrency-and-idempotence/index.html": {
    "href": "http-api/optimistic-concurrency-and-idempotence/index.html",
    "title": "Optimistic concurrency and idempotence | Event Store",
    "keywords": "Optimistic concurrency and idempotence Idempotency All operations on the HTTP interface are idempotent (unless the expected version is ignored). It is the responsibility of the client to retry operations under failure conditions, ensuring that the event IDs of the events posted are the same as the first attempt. Provided the client maintains this Event Store will treat all operations as idempotent. For example: Request Response curl -i -d @event.txt \"http://127.0.0.1:2113/streams/newstream\" HTTP/1.1 201 Created Access-Control-Allow-Origin: * Access-Control-Allow-Methods: POST, GET, PUT, DELETE Location: http://127.0.0.1:2113/streams/newstream444/1 Content-Type: application/json Server: Mono-HTTPAPI/1.0 Date: Thu, 06 Sep 2012 19:49:37 GMT Content-Length: 107 Keep-Alive: timeout=15,max=100 <!-- TODO: What's this? --> Request Response curl -i -d @event.txt \"http://127.0.0.1:2113/streams/newstream444\" HTTP/1.1 201 Created Access-Control-Allow-Origin: * Access-Control-Allow-Methods: POST, GET, PUT, DELETE Location: http://127.0.0.1:2113/streams/newstream444/1 Content-Type: application/json Server: Mono-HTTPAPI/1.0 Date: Thu, 06 Sep 2012 19:49:37 GMT Content-Length: 107 Keep-Alive: timeout=15,max=100 Assuming you were posting to a new stream you would get the event written once (and the stream created). The second event will return as the first but not write again. Note This allows the client rule of “if you get an unknown condition, retry” to work. For example: Request Response curl -i \"http://127.0.0.1:2113/streams/newstream444\" HTTP/1.1 200 OK Access-Control-Allow-Origin: * Access-Control-Allow-Methods: POST, GET, PUT, DELETE Content-Type: application/json Server: Mono-HTTPAPI/1.0 Date: Thu, 06 Sep 2012 19:50:30 GMT Content-Length: 2131 Keep-Alive: timeout=15,max=100 { \"title\": \"Event stream 'newstream444'\", \"id\": \"http://127.0.0.1:2113/streams/newstream444\", \"updated\": \"2012-09-06T16:39:44.695643Z\", \"author\": { \"name\": \"EventStore\" }, \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/newstream444\", \"relation\": \"self\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream444\", \"relation\": \"first\" } ], \"entries\": [ { \"title\": \"newstream444 #1\", \"id\": \"http://127.0.0.1:2113/streams/newstream444/1\", \"updated\": \"2012-09-06T16:39:44.695643Z\", \"author\": { \"name\": \"EventStore\" }, \"summary\": \"Entry #1\", \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/newstream444/1\", \"relation\": \"edit\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream444/event/1?format=text\", \"type\": \"text/plain\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream444/event/1?format=json\", \"relation\": \"alternate\", \"type\": \"application/json\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream444/event/1?format=xml\", \"relation\": \"alternate\", \"type\": \"text/xml\" } ] }, { \"title\": \"newstream444 #0\", \"id\": \"http://127.0.0.1:2113/streams/newstream444/0\", \"updated\": \"2012-09-06T16:39:44.695631Z\", \"author\": { \"name\": \"EventStore\" }, \"summary\": \"Entry #0\", \"links\": [ { \"uri\": \"http://127.0.0.1:2113/streams/newstream444/0\", \"relation\": \"edit\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream444/event/0?format=text\", \"type\": \"text/plain\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream444/event/0?format=json\", \"relation\": \"alternate\", \"type\": \"application/json\" }, { \"uri\": \"http://127.0.0.1:2113/streams/newstream444/event/0?format=xml\", \"relation\": \"alternate\", \"type\": \"text/xml\" } ] } ] } <!-- TODO: Still to do -->"
  },
  "http-api/index.html": {
    "href": "http-api/index.html",
    "title": "Overview | Event Store",
    "keywords": "Overview Event Store provides a native interface of AtomPub over HTTP. AtomPub is a RESTful protocol that can reuse many existing components, for example reverse proxies and a client's native HTTP caching. Since events stored in Event Store are immutable, cache expiration can be infinite. Event Store leverages content type negotiation and you can access appropriately serialised events can as JSON or XML according to the request headers. Compatibility with AtomPub Event Store is fully compatible with the 1.0 version of the Atom Protocol . Event Store adds extensions to the protocol, such as headers for control and custom rel links. Existing implementations Many environments have already implemented the AtomPub protocol, which simplifies the process. Library Description NET (BCL) System.ServiceModel.SyndicationServices JVM http://java-source.net/open-source/rss-rdf-tools PHP http://simplepie.org/ or https://github.com/fguillot/picoFeed Ruby https://github.com/cardmagic/simple-rss Clojure https://github.com/scsibug/feedparser-clj Go https://github.com/jteeuwen/go-pkg-rss Python http://code.google.com/p/feedparser/ node.js https://github.com/danmactough/node-feedparser Objective-C https://geekli.st/darvin/repos/MWFeedParser Note These are not officially supported by Event Store. Content types The preferred way of determining which content type responses Event Store serves is to set the Accept header on the request. As some clients do not deal well with HTTP headers when caching, appending a format parameter to the URL is also supported, for example, ?format=xml . The accepted content types for POST requests are: application/xml application/vnd.eventstore.events+xml application/json application/vnd.eventstore.events+json text/xml The accepted content types for GET requests are: application/xml application/atom+xml application/json application/vnd.eventstore.atom+json text/xml text/html application/vnd.eventstore.streamdesc+json"
  },
  "http-api/description-document/index.html": {
    "href": "http-api/description-document/index.html",
    "title": "Description document | Event Store",
    "keywords": "Description document <!-- TODO: Combine with CC pages? --> With the addition of Competing Consumers, which is another way of reading streams, the need arose to expose these different methods to consumers. The introduction of the description document has some benefits: Clients can rely on the keys (streams, streamSubscription) in the description document to remain unchanged across versions of Event Store and you can rely on it as a lookup for the particular method of reading a stream. Allows the restructuring of URIs underneath without breaking clients. e.g., /streams/newstream -> /streams/newstream/atom . Fetching the description document There are three ways in which Event Store returns the description document. Attempting to read a stream with an unsupported media type. Attempting to read a stream with no accept header. Requesting the description document explicitly. The client is able to request the description document by passing application/vnd.eventstore.streamdesc+json in the accept header, for example: Request Response curl -i http://localhost:2113/streams/newstream -H \"accept:application/vnd.eventstore.streamdesc+json\" HTTP/1.1 200 Description Document Access-Control-Allow-Methods: POST, DELETE, GET, OPTIONS Access-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion Content-Type: application/vnd.eventstore.streamdesc+json; charset=utf-8 Server: Mono-HTTPAPI/1.0 Date: Thu, 23 Aug 2018 12:37:18 GMT Content-Length: 517 Keep-Alive: timeout=15,max=100 { \"title\": \"Description document for 'newstream'\", \"description\": \"The description document will be presented when no accept header is present or it was requested\", \"_links\": { \"self\": { \"href\": \"/streams/newstream\", \"supportedContentTypes\": [ \"application/vnd.eventstore.streamdesc+json\" ] }, \"stream\": { \"href\": \"/streams/newstream\", \"supportedContentTypes\": [ \"application/atom+xml\", \"application/vnd.eventstore.atom+json\" ] } } } In the example above, the client requested the description document for the stream called newstream which has a set of links describing the supported methods and content types. The document also includes additional methods available such as the streamSubscription . If there are no subscriptions to the newstream , the streamSubscription key is absent."
  },
  "server/caching/index.html": {
    "href": "server/caching/index.html",
    "title": "Caching | Event Store",
    "keywords": "Caching As there are large differences between running Event Store in development and production, it's important to understand how caching works. Most of the URIs that Event Store emits are immutable (including the UI and Atom Feeds). An Atom feed has a URI that represents an event, e.g., /streams/foo/0 , representing 'event 0'. The data for event 0 never changes. If this stream is open to public reads then the URI is set to be 'cachable' for long periods of time. You can see a similar example in reading a feed. If a stream has 50 events in it, the feed page 20/forward/10 never changes, it will always be events 20-30. Internally Event Store controls serving the right URIs by using rel links with feeds (for example prev / next ). This caching behaviour is great for performance in a production environment and we recommended you use it, but in a developer environment it can become confusing. For example, what happens if you started a database, wrote /streams/foo/0 and performed a GET request? The GET request is cachable and now in your cache. Since this is a development environment, you shutdown Event Store and delete the database. You then restart Event Store and write a different event to /streams/foo/0 . You open your browser and inspect the /streams/foo/0 stream, and you see the event written before you deleted the database. To avoid this during development it's best to run Event Store with the --disable-http-caching command line option. This disables all caching and solve the issue."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to Event Store | Event Store",
    "keywords": "Welcome to Event Store The team and community behind Event Store welcomes you and hopes we can help you find what you're looking for. New to Event Sourcing? If the concept of event sourcing, and why it's useful, is new to you, we recommend you read our guide to event sourcing first. New to Event Store? If you're familiar with event sourcing and want to know how to test Event Store, read the Introduction section. Already using Event Store? If you're already using Event Store, then welcome back and hopefully you can find what you need under the other sub-sections you can see in the left hand navigation menu, you can also try using the search box in the top navigation bar. If there's still something missing, then create an issue on GitHub , use the 'Improve this Doc' link on the top right on any documentation page to make a pull request, or contact docs@eventstore.org ."
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose.html",
    "title": "Class CoreProjectionManagementMessage.Dispose | Event Store",
    "keywords": "Class CoreProjectionManagementMessage.Dispose Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionManagementControlMessage CoreProjectionManagementMessage.Dispose Inherited Members CoreProjectionManagementControlMessage.WorkerId CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Dispose : CoreProjectionManagementControlMessage Constructors Dispose(Guid, Guid) Declaration public Dispose(Guid projectionId, Guid workerId) Parameters Type Name Guid projectionId Guid workerId Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionManagementControlMessage.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ReaderStrategy.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ReaderStrategy.html",
    "title": "Class ReaderStrategy | Event Store",
    "keywords": "Class ReaderStrategy Inheritance System.Object ReaderStrategy Implements IReaderStrategy Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class ReaderStrategy : object, IReaderStrategy Properties EventFilter Declaration public EventFilter EventFilter { get; } Property Value Type EventFilter IsReadingOrderRepeatable Declaration public bool IsReadingOrderRepeatable { get; } Property Value Type System.Boolean Phase Declaration public int Phase { get; } Property Value Type System.Int32 PositionTagger Declaration public PositionTagger PositionTagger { get; } Property Value Type PositionTagger Methods Create(String, Int32, IQuerySources, ITimeProvider, Boolean, IPrincipal) Declaration public static IReaderStrategy Create(string tag, int phase, IQuerySources sources, ITimeProvider timeProvider, bool stopOnEof, IPrincipal runAs) Parameters Type Name System.String tag System.Int32 phase IQuerySources sources EventStore.Core.Services.TimerService.ITimeProvider timeProvider System.Boolean stopOnEof IPrincipal runAs Returns Type Description IReaderStrategy CreatePausedEventReader(Guid, IPublisher, IODispatcher, CheckpointTag, Boolean, Nullable<Int32>) Declaration public IEventReader CreatePausedEventReader(Guid eventReaderId, IPublisher publisher, IODispatcher ioDispatcher, CheckpointTag checkpointTag, bool stopOnEof, int? stopAfterNEvents) Parameters Type Name Guid eventReaderId EventStore.Core.Bus.IPublisher publisher EventStore.Core.Helpers.IODispatcher ioDispatcher CheckpointTag checkpointTag System.Boolean stopOnEof System.Nullable < System.Int32 > stopAfterNEvents Returns Type Description IEventReader CreateReaderSubscription(IPublisher, CheckpointTag, Guid, ReaderSubscriptionOptions) Declaration public IReaderSubscription CreateReaderSubscription(IPublisher publisher, CheckpointTag fromCheckpointTag, Guid subscriptionId, ReaderSubscriptionOptions readerSubscriptionOptions) Parameters Type Name EventStore.Core.Bus.IPublisher publisher CheckpointTag fromCheckpointTag Guid subscriptionId ReaderSubscriptionOptions readerSubscriptionOptions Returns Type Description IReaderSubscription Implements IReaderStrategy"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.StartCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.StartCommand.html",
    "title": "Class StartCommand | Event Store",
    "keywords": "Class StartCommand Inheritance System.Object StartCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Commands Assembly : EventStore.Projections.Core.dll Syntax public class StartCommand : object Properties Id Declaration public string Id { get; set; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.ProjectionStateHandlerTestExtensions.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.ProjectionStateHandlerTestExtensions.html",
    "title": "Class ProjectionStateHandlerTestExtensions | Event Store",
    "keywords": "Class ProjectionStateHandlerTestExtensions Inheritance System.Object ProjectionStateHandlerTestExtensions Namespace : EventStore.Projections.Core.Services Assembly : EventStore.Projections.Core.dll Syntax public static class ProjectionStateHandlerTestExtensions : object Methods GetNativeHandlerName(Type) Declaration public static string GetNativeHandlerName(this Type handlerType) Parameters Type Name Type handlerType Returns Type Description System.String ProcessEvent(IProjectionStateHandler, String, CheckpointTag, String, String, String, Guid, Int64, String, String, out String, out EmittedEventEnvelope[], Boolean) Declaration public static bool ProcessEvent(this IProjectionStateHandler self, string partition, CheckpointTag eventPosition, string streamId, string eventType, string category, Guid eventId, long eventSequenceNumber, string metadata, string data, out string state, out EmittedEventEnvelope[] emittedEvents, bool isJson = true) Parameters Type Name IProjectionStateHandler self System.String partition CheckpointTag eventPosition System.String streamId System.String eventType System.String category Guid eventId System.Int64 eventSequenceNumber System.String metadata System.String data System.String state EmittedEventEnvelope [] emittedEvents System.Boolean isJson Returns Type Description System.Boolean ProcessEvent(IProjectionStateHandler, String, CheckpointTag, String, String, String, Guid, Int64, String, String, out String, out String, out EmittedEventEnvelope[], Boolean) Declaration public static bool ProcessEvent(this IProjectionStateHandler self, string partition, CheckpointTag eventPosition, string streamId, string eventType, string category, Guid eventId, long eventSequenceNumber, string metadata, string data, out string state, out string sharedState, out EmittedEventEnvelope[] emittedEvents, bool isJson = true) Parameters Type Name IProjectionStateHandler self System.String partition CheckpointTag eventPosition System.String streamId System.String eventType System.String category Guid eventId System.Int64 eventSequenceNumber System.String metadata System.String data System.String state System.String sharedState EmittedEventEnvelope [] emittedEvents System.Boolean isJson Returns Type Description System.Boolean"
  },
  "dotnet-api/code/EventStore.Projections.Core.Standard.CategorizeEventsByStreamPath.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Standard.CategorizeEventsByStreamPath.html",
    "title": "Class CategorizeEventsByStreamPath | Event Store",
    "keywords": "Class CategorizeEventsByStreamPath Inheritance System.Object CategorizeEventsByStreamPath Implements IProjectionStateHandler IDisposable ISourceDefinitionSource Namespace : EventStore.Projections.Core.Standard Assembly : EventStore.Projections.Core.dll Syntax public class CategorizeEventsByStreamPath : object, IProjectionStateHandler, IDisposable, ISourceDefinitionSource Constructors CategorizeEventsByStreamPath(String, Action<String, Object[]>) Declaration public CategorizeEventsByStreamPath(string source, Action<string, object[]> logger) Parameters Type Name System.String source Action < System.String , System.Object []> logger Methods ConfigureSourceProcessingStrategy(SourceDefinitionBuilder) Declaration public void ConfigureSourceProcessingStrategy(SourceDefinitionBuilder builder) Parameters Type Name SourceDefinitionBuilder builder Dispose() Declaration public void Dispose() GetSourceDefinition() Declaration public IQuerySources GetSourceDefinition() Returns Type Description IQuerySources GetStatePartition(CheckpointTag, String, ResolvedEvent) Declaration public string GetStatePartition(CheckpointTag eventPosition, string category, ResolvedEvent data) Parameters Type Name CheckpointTag eventPosition System.String category ResolvedEvent data Returns Type Description System.String Initialize() Declaration public void Initialize() InitializeShared() Declaration public void InitializeShared() Load(String) Declaration public void Load(string state) Parameters Type Name System.String state LoadShared(String) Declaration public void LoadShared(string state) Parameters Type Name System.String state ProcessEvent(String, CheckpointTag, String, ResolvedEvent, out String, out String, out EmittedEventEnvelope[]) Declaration public bool ProcessEvent(string partition, CheckpointTag eventPosition, string category1, ResolvedEvent data, out string newState, out string newSharedState, out EmittedEventEnvelope[] emittedEvents) Parameters Type Name System.String partition CheckpointTag eventPosition System.String category1 ResolvedEvent data System.String newState System.String newSharedState EmittedEventEnvelope [] emittedEvents Returns Type Description System.Boolean ProcessPartitionCreated(String, CheckpointTag, ResolvedEvent, out EmittedEventEnvelope[]) Declaration public bool ProcessPartitionCreated(string partition, CheckpointTag createPosition, ResolvedEvent data, out EmittedEventEnvelope[] emittedEvents) Parameters Type Name System.String partition CheckpointTag createPosition ResolvedEvent data EmittedEventEnvelope [] emittedEvents Returns Type Description System.Boolean ProcessPartitionDeleted(String, CheckpointTag, out String) Declaration public bool ProcessPartitionDeleted(string partition, CheckpointTag deletePosition, out string newState) Parameters Type Name System.String partition CheckpointTag deletePosition System.String newState Returns Type Description System.Boolean TransformStateToResult() Declaration public string TransformStateToResult() Returns Type Description System.String Implements IProjectionStateHandler IDisposable ISourceDefinitionSource"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.html",
    "title": "Namespace EventStore.Projections.Core.Messages.Persisted.Responses | Event Store",
    "keywords": "Namespace EventStore.Projections.Core.Messages.Persisted.Responses Classes AbortCommand DeleteCommand DisableCommand EnableCommand Faulted GetQueryCommand GetResultCommand GetStateCommand GetStatisticsCommand PostBatchCommand PostBatchCommand.ProjectionPost PostCommand Prepared ProjectionWorkerStarted ResetCommand ResultReport SetRunAsCommand Started StateReport StatisticsReport Stopped UpdateQueryCommand"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.CreateAndPrepareCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.CreateAndPrepareCommand.html",
    "title": "Class CreateAndPrepareCommand | Event Store",
    "keywords": "Class CreateAndPrepareCommand Inheritance System.Object CreateAndPrepareCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Commands Assembly : EventStore.Projections.Core.dll Syntax public class CreateAndPrepareCommand : object Properties Config Declaration public PersistedProjectionConfig Config { get; set; } Property Value Type PersistedProjectionConfig HandlerType Declaration public string HandlerType { get; set; } Property Value Type System.String Id Declaration public string Id { get; set; } Property Value Type System.String Name Declaration public string Name { get; set; } Property Value Type System.String Query Declaration public string Query { get; set; } Property Value Type System.String Version Declaration public PersistedProjectionVersion Version { get; set; } Property Value Type PersistedProjectionVersion"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionSubsystemMessage.StopComponents.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionSubsystemMessage.StopComponents.html",
    "title": "Class ProjectionSubsystemMessage.StopComponents | Event Store",
    "keywords": "Class ProjectionSubsystemMessage.StopComponents Inheritance System.Object EventStore.Core.Messaging.Message ProjectionSubsystemMessage.StopComponents Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class StopComponents : Message Constructors StopComponents(Guid) Declaration public StopComponents(Guid instanceCorrelationId) Parameters Type Name Guid instanceCorrelationId Properties InstanceCorrelationId Declaration public Guid InstanceCorrelationId { get; } Property Value Type Guid MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Utils.Logging.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Utils.Logging.html",
    "title": "Class Logging | Event Store",
    "keywords": "Class Logging Inheritance System.Object Logging Namespace : EventStore.Projections.Core.Utils Assembly : EventStore.Projections.Core.dll Syntax public static class Logging : object Fields FilteredMessages Declaration public static readonly string[] FilteredMessages Field Value Type System.String []"
  },
  "dotnet-api/code/EventStore.ClientAPI.DnsClusterSettingsBuilder.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.DnsClusterSettingsBuilder.html",
    "title": "Class DnsClusterSettingsBuilder | Event Store",
    "keywords": "Class DnsClusterSettingsBuilder Fluent builder used to configure ClusterSettings for connecting to a cluster using DNS discovery. Inheritance System.Object DnsClusterSettingsBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class DnsClusterSettingsBuilder Methods Build() Builds a ClusterSettings object from a DnsClusterSettingsBuilder . Declaration public ClusterSettings Build() Returns Type Description ClusterSettings KeepDiscovering() Allows infinite nodes discovery attempts. Declaration public DnsClusterSettingsBuilder KeepDiscovering() Returns Type Description DnsClusterSettingsBuilder PreferRandomNode() Whether to randomly choose a node that's alive from the known nodes. Declaration public DnsClusterSettingsBuilder PreferRandomNode() Returns Type Description DnsClusterSettingsBuilder A DnsClusterSettingsBuilder for further configuration. PreferReadOnlyReplica() Whether to prioritize choosing a read only replica that's alive from the known nodes. Declaration public DnsClusterSettingsBuilder PreferReadOnlyReplica() Returns Type Description DnsClusterSettingsBuilder A DnsClusterSettingsBuilder for further configuration. PreferSlaveNode() Whether to prioritize choosing a slave node that's alive from the known nodes. Declaration public DnsClusterSettingsBuilder PreferSlaveNode() Returns Type Description DnsClusterSettingsBuilder A DnsClusterSettingsBuilder for further configuration. SetClusterDns(String) Sets the DNS name under which cluster nodes are listed. Declaration public DnsClusterSettingsBuilder SetClusterDns(string clusterDns) Parameters Type Name System.String clusterDns Returns Type Description DnsClusterSettingsBuilder A DnsClusterSettingsBuilder for further configuration. Exceptions Type Condition System.ArgumentNullException If clusterDns is null or empty. SetClusterGossipPort(Int32) Sets the well-known port on which the cluster gossip is taking place. If you are using the commercial edition of Event Store HA, with Manager nodes in place, this should be the port number of the External HTTP port on which the managers are running. If you are using the open source edition of Event Store HA, this should be the External HTTP port that the nodes are running on. If you cannot use a well-known port for this across all nodes, you can instead use gossip seed discovery and set the System.Net.IPEndPoint of some seed nodes instead. Declaration public DnsClusterSettingsBuilder SetClusterGossipPort(int clusterGossipPort) Parameters Type Name System.Int32 clusterGossipPort Returns Type Description DnsClusterSettingsBuilder A DnsClusterSettingsBuilder for further configuration. SetGossipTimeout(TimeSpan) Sets the period after which gossip times out if none is received. Declaration public DnsClusterSettingsBuilder SetGossipTimeout(TimeSpan timeout) Parameters Type Name System.TimeSpan timeout Returns Type Description DnsClusterSettingsBuilder A DnsClusterSettingsBuilder for further configuration. SetMaxDiscoverAttempts(Int32) Sets the maximum number of attempts for discovery. Declaration public DnsClusterSettingsBuilder SetMaxDiscoverAttempts(int maxDiscoverAttempts) Parameters Type Name System.Int32 maxDiscoverAttempts Returns Type Description DnsClusterSettingsBuilder A DnsClusterSettingsBuilder for further configuration. Exceptions Type Condition System.ArgumentOutOfRangeException If maxDiscoverAttempts is less than or equal to 0. Operators Implicit(DnsClusterSettingsBuilder to ClusterSettings) Builds a ClusterSettings object from a DnsClusterSettingsBuilder . Declaration public static implicit operator ClusterSettings(DnsClusterSettingsBuilder builder) Parameters Type Name DnsClusterSettingsBuilder builder Returns Type Description ClusterSettings"
  },
  "dotnet-api/code/EventStore.Projections.Core.Standard.StreamDeletedHelper.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Standard.StreamDeletedHelper.html",
    "title": "Class StreamDeletedHelper | Event Store",
    "keywords": "Class StreamDeletedHelper Inheritance System.Object StreamDeletedHelper Namespace : EventStore.Projections.Core.Standard Assembly : EventStore.Projections.Core.dll Syntax public static class StreamDeletedHelper : object Methods IsStreamDeletedEvent(String, String, Byte[], out String) Declaration public static bool IsStreamDeletedEvent(string streamOrMetaStreamId, string eventType, byte[] eventData, out string deletedPartitionStreamId) Parameters Type Name System.String streamOrMetaStreamId System.String eventType System.Byte [] eventData System.String deletedPartitionStreamId Returns Type Description System.Boolean IsStreamDeletedEvent(String, String, String, out String) Declaration public static bool IsStreamDeletedEvent(string streamOrMetaStreamId, string eventType, string eventData, out string deletedPartitionStreamId) Parameters Type Name System.String streamOrMetaStreamId System.String eventType System.String eventData System.String deletedPartitionStreamId Returns Type Description System.Boolean IsStreamDeletedEventOrLinkToStreamDeletedEvent(ResolvedEvent, out String) Declaration public static bool IsStreamDeletedEventOrLinkToStreamDeletedEvent(ResolvedEvent resolvedEvent, out string deletedPartitionStreamId) Parameters Type Name ResolvedEvent resolvedEvent System.String deletedPartitionStreamId Returns Type Description System.Boolean"
  },
  "dotnet-api/code/EventStore.ClientAPI.EventStoreConnection.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.EventStoreConnection.html",
    "title": "Class EventStoreConnection | Event Store",
    "keywords": "Class EventStoreConnection Contains factory methods for building connections to an Event Store server. Inheritance System.Object EventStoreConnection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public static class EventStoreConnection Methods Create(ConnectionSettings, ClusterSettings, String) Creates a new IEventStoreConnection to EventStore cluster using specific ConnectionSettings and ClusterSettings Declaration public static IEventStoreConnection Create(ConnectionSettings connectionSettings, ClusterSettings clusterSettings, string connectionName = null) Parameters Type Name ConnectionSettings connectionSettings ClusterSettings clusterSettings System.String connectionName Returns Type Description IEventStoreConnection a new IEventStoreConnection Create(ConnectionSettings, IEndPointDiscoverer, String) Creates a new IEventStoreConnection using specific ConnectionSettings and a custom-defined IEndPointDiscoverer Declaration public static IEventStoreConnection Create(ConnectionSettings connectionSettings, IEndPointDiscoverer endPointDiscoverer, string connectionName = null) Parameters Type Name ConnectionSettings connectionSettings IEndPointDiscoverer endPointDiscoverer System.String connectionName Returns Type Description IEventStoreConnection a new IEventStoreConnection Create(ConnectionSettings, IPEndPoint, String) Creates a new IEventStoreConnection to single node using specific ConnectionSettings Declaration public static IEventStoreConnection Create(ConnectionSettings connectionSettings, IPEndPoint tcpEndPoint, string connectionName = null) Parameters Type Name ConnectionSettings connectionSettings System.Net.IPEndPoint tcpEndPoint System.String connectionName Returns Type Description IEventStoreConnection a new IEventStoreConnection Create(ConnectionSettings, String) Creates a new IEventStoreConnection using the gossip seeds specified in the connectionSettings Declaration public static IEventStoreConnection Create(ConnectionSettings connectionSettings, string connectionName = null) Parameters Type Name ConnectionSettings connectionSettings System.String connectionName Returns Type Description IEventStoreConnection a new IEventStoreConnection Create(ConnectionSettings, Uri, String) Creates a new IEventStoreConnection Declaration public static IEventStoreConnection Create(ConnectionSettings connectionSettings, Uri uri, string connectionName = null) Parameters Type Name ConnectionSettings connectionSettings System.Uri uri System.String connectionName Returns Type Description IEventStoreConnection a new IEventStoreConnection Remarks You must pass a uri or set gossip seeds in the connection settings. Create(IPEndPoint, String) Creates a new IEventStoreConnection to single node using default ConnectionSettings Declaration public static IEventStoreConnection Create(IPEndPoint tcpEndPoint, string connectionName = null) Parameters Type Name System.Net.IPEndPoint tcpEndPoint System.String connectionName Returns Type Description IEventStoreConnection a new IEventStoreConnection Create(String, ConnectionSettingsBuilder, String) Creates a new IEventStoreConnection to single node using default ConnectionSettings provided via a connectionstring Declaration public static IEventStoreConnection Create(string connectionString, ConnectionSettingsBuilder builder, string connectionName = null) Parameters Type Name System.String connectionString ConnectionSettingsBuilder builder System.String connectionName Returns Type Description IEventStoreConnection a new IEventStoreConnection Create(String, String) Creates a new IEventStoreConnection to single node using default ConnectionSettings provided via a connectionstring Declaration public static IEventStoreConnection Create(string connectionString, string connectionName = null) Parameters Type Name System.String connectionString System.String connectionName Returns Type Description IEventStoreConnection a new IEventStoreConnection Create(Uri, String) Creates a new IEventStoreConnection to single node using default ConnectionSettings Declaration public static IEventStoreConnection Create(Uri uri, string connectionName = null) Parameters Type Name System.Uri uri System.String connectionName Returns Type Description IEventStoreConnection a new IEventStoreConnection"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderIdle.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderIdle.html",
    "title": "Class ReaderSubscriptionMessage.EventReaderIdle | Event Store",
    "keywords": "Class ReaderSubscriptionMessage.EventReaderIdle Inheritance System.Object EventStore.Core.Messaging.Message ReaderSubscriptionMessage.SubscriptionMessage ReaderSubscriptionMessage.EventReaderIdle Inherited Members ReaderSubscriptionMessage.SubscriptionMessage.CorrelationId ReaderSubscriptionMessage.SubscriptionMessage.PreTagged ReaderSubscriptionMessage.SubscriptionMessage.Source EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class EventReaderIdle : ReaderSubscriptionMessage.SubscriptionMessage Constructors EventReaderIdle(Guid, DateTime, Object) Declaration public EventReaderIdle(Guid correlationId, DateTime idleTimestampUtc, object source = null) Parameters Type Name Guid correlationId DateTime idleTimestampUtc System.Object source Properties IdleTimestampUtc Declaration public DateTime IdleTimestampUtc { get; } Property Value Type DateTime MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ReaderSubscriptionMessage.SubscriptionMessage.MsgTypeId"
  },
  "dotnet-api/code/EventStore.ClientAPI.EventStorePersistentSubscriptionBase.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.EventStorePersistentSubscriptionBase.html",
    "title": "Class EventStorePersistentSubscriptionBase | Event Store",
    "keywords": "Class EventStorePersistentSubscriptionBase Represents a persistent subscription connection. Inheritance System.Object EventStorePersistentSubscriptionBase EventStorePersistentSubscription Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public abstract class EventStorePersistentSubscriptionBase Fields DefaultBufferSize The default buffer size for the persistent subscription Declaration public const int DefaultBufferSize = 10 Field Value Type System.Int32 Methods Acknowledge(ResolvedEvent) Acknowledge that a message have completed processing (this will tell the server it has been processed) Declaration public void Acknowledge(ResolvedEvent event) Parameters Type Name ResolvedEvent event Remarks There is no need to ack a message if you have Auto Ack enabled Acknowledge(IEnumerable<ResolvedEvent>) Acknowledge that a message have completed processing (this will tell the server it has been processed) Declaration public void Acknowledge(IEnumerable<ResolvedEvent> events) Parameters Type Name System.Collections.Generic.IEnumerable < ResolvedEvent > events Remarks There is no need to ack a message if you have Auto Ack enabled Acknowledge(IEnumerable<Guid>) Acknowledge a group of messages by event id (this will tell the server it has been processed) Declaration public void Acknowledge(IEnumerable<Guid> events) Parameters Type Name System.Collections.Generic.IEnumerable < System.Guid > events Remarks There is no need to ack a message if you have Auto Ack enabled Acknowledge(Guid) Acknowledge a message by event id (this will tell the server it has been processed) Declaration public void Acknowledge(Guid eventId) Parameters Type Name System.Guid eventId Remarks There is no need to ack a message if you have Auto Ack enabled Fail(ResolvedEvent, PersistentSubscriptionNakEventAction, String) Mark a message failed processing. The server will be take action based upon the action paramter Declaration public void Fail(ResolvedEvent event, PersistentSubscriptionNakEventAction action, string reason) Parameters Type Name ResolvedEvent event PersistentSubscriptionNakEventAction action System.String reason Fail(IEnumerable<ResolvedEvent>, PersistentSubscriptionNakEventAction, String) Mark nmessages that have failed processing. The server will take action based upon the action parameter Declaration public void Fail(IEnumerable<ResolvedEvent> events, PersistentSubscriptionNakEventAction action, string reason) Parameters Type Name System.Collections.Generic.IEnumerable < ResolvedEvent > events PersistentSubscriptionNakEventAction action System.String reason Stop(TimeSpan) Disconnects this client from the persistent subscriptions. Declaration public void Stop(TimeSpan timeout) Parameters Type Name System.TimeSpan timeout Exceptions Type Condition System.TimeoutException"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.Failed.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.Failed.html",
    "title": "Class EventReaderSubscriptionMessage.Failed | Event Store",
    "keywords": "Class EventReaderSubscriptionMessage.Failed Inheritance System.Object EventStore.Core.Messaging.Message EventReaderSubscriptionMessageBase EventReaderSubscriptionMessage.Failed Inherited Members EventReaderSubscriptionMessageBase.CheckpointTag EventReaderSubscriptionMessageBase.Progress EventReaderSubscriptionMessageBase.SubscriptionMessageSequenceNumber EventReaderSubscriptionMessageBase.SubscriptionId EventReaderSubscriptionMessageBase.Source EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public sealed class Failed : EventReaderSubscriptionMessageBase Constructors Failed(Guid, String) Declaration public Failed(Guid subscriptionId, string reason) Parameters Type Name Guid subscriptionId System.String reason Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventReaderSubscriptionMessageBase.MsgTypeId Reason Declaration public string Reason { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.Common.SystemMetadata.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Common.SystemMetadata.html",
    "title": "Class SystemMetadata | Event Store",
    "keywords": "Class SystemMetadata Constants for information in stream metadata Inheritance System.Object SystemMetadata Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI.Common Assembly : EventStore.ClientAPI.dll Syntax public static class SystemMetadata Fields Acl The acl definition in metadata Declaration public const string Acl = \"$acl\" Field Value Type System.String AclDelete to delete a stream Declaration public const string AclDelete = \"$d\" Field Value Type System.String AclMetaRead to read metadata Declaration public const string AclMetaRead = \"$mr\" Field Value Type System.String AclMetaWrite to write metadata Declaration public const string AclMetaWrite = \"$mw\" Field Value Type System.String AclRead to read from a stream Declaration public const string AclRead = \"$r\" Field Value Type System.String AclWrite to write to a stream Declaration public const string AclWrite = \"$w\" Field Value Type System.String CacheControl Sets the cache control in seconds for the head of the stream. Declaration public const string CacheControl = \"$cacheControl\" Field Value Type System.String MaxAge The definition of the MaxAge value assigned to stream metadata Setting this allows all events older than the limit to be deleted Declaration public const string MaxAge = \"$maxAge\" Field Value Type System.String MaxCount The definition of the MaxCount value assigned to stream metadata setting this allows all events with a sequence less than current -maxcount to be deleted Declaration public const string MaxCount = \"$maxCount\" Field Value Type System.String SystemStreamAcl the system stream defaults acl stream Declaration public const string SystemStreamAcl = \"$systemStreamAcl\" Field Value Type System.String TruncateBefore The definition of the Truncate Before value assigned to stream metadata setting this allows all events prior to the integer value to be deleted Declaration public const string TruncateBefore = \"$tb\" Field Value Type System.String UserStreamAcl The user default acl stream Declaration public const string UserStreamAcl = \"$userStreamAcl\" Field Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.EventData.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.EventData.html",
    "title": "Class EventData | Event Store",
    "keywords": "Class EventData Represents an event to be written. Inheritance System.Object EventData Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public sealed class EventData Constructors EventData(Guid, String, Boolean, Byte[], Byte[]) Constructs a new EventData . Declaration public EventData(Guid eventId, string type, bool isJson, byte[] data, byte[] metadata) Parameters Type Name System.Guid eventId System.String type System.Boolean isJson System.Byte [] data System.Byte [] metadata Fields Data The raw bytes of the event data. Declaration public readonly byte[] Data Field Value Type System.Byte [] EventId The ID of the event, used as part of the idempotent write check. Declaration public readonly Guid EventId Field Value Type System.Guid IsJson Flag indicating whether the data and metadata are JSON. Declaration public readonly bool IsJson Field Value Type System.Boolean Metadata The raw bytes of the event metadata. Declaration public readonly byte[] Metadata Field Value Type System.Byte [] Type The name of the event type. It is strongly recommended that these use lowerCamelCase if projections are to be used. Declaration public readonly string Type Field Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionSubsystemMessage.StartComponents.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionSubsystemMessage.StartComponents.html",
    "title": "Class ProjectionSubsystemMessage.StartComponents | Event Store",
    "keywords": "Class ProjectionSubsystemMessage.StartComponents Inheritance System.Object EventStore.Core.Messaging.Message ProjectionSubsystemMessage.StartComponents Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class StartComponents : Message Constructors StartComponents(Guid) Declaration public StartComponents(Guid instanceCorrelationId) Parameters Type Name Guid instanceCorrelationId Properties InstanceCorrelationId Declaration public Guid InstanceCorrelationId { get; } Property Value Type Guid MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.StreamEventFilter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.StreamEventFilter.html",
    "title": "Class StreamEventFilter | Event Store",
    "keywords": "Class StreamEventFilter Inheritance System.Object EventFilter StreamEventFilter Inherited Members EventFilter.Passes(Boolean, String, String, Boolean) EventFilter.PassesDeleteNotification(String) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class StreamEventFilter : EventFilter Constructors StreamEventFilter(String, Boolean, HashSet<String>) Declaration public StreamEventFilter(string streamId, bool allEvents, HashSet<string> events) Parameters Type Name System.String streamId System.Boolean allEvents HashSet < System.String > events Methods DeletedNotificationPasses(String) Declaration protected override bool DeletedNotificationPasses(string positionStreamId) Parameters Type Name System.String positionStreamId Returns Type Description System.Boolean Overrides EventFilter.DeletedNotificationPasses(String) GetCategory(String) Declaration public override string GetCategory(string positionStreamId) Parameters Type Name System.String positionStreamId Returns Type Description System.String Overrides EventFilter.GetCategory(String) PassesSource(Boolean, String, String) Declaration public override bool PassesSource(bool resolvedFromLinkTo, string positionStreamId, string eventType) Parameters Type Name System.Boolean resolvedFromLinkTo System.String positionStreamId System.String eventType Returns Type Description System.Boolean Overrides EventFilter.PassesSource(Boolean, String, String) ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.Common.SystemEventTypes.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Common.SystemEventTypes.html",
    "title": "Class SystemEventTypes | Event Store",
    "keywords": "Class SystemEventTypes Constants for System event types Inheritance System.Object SystemEventTypes Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI.Common Assembly : EventStore.ClientAPI.dll Syntax public static class SystemEventTypes Fields LinkTo event type for linkTo Declaration public const string LinkTo = \"$>\" Field Value Type System.String Settings event type for the system settings Declaration public const string Settings = \"$settings\" Field Value Type System.String StatsCollection event type for statistics Declaration public const string StatsCollection = \"$statsCollected\" Field Value Type System.String StreamDeleted event type for stream deleted Declaration public const string StreamDeleted = \"$streamDeleted\" Field Value Type System.String StreamMetadata event type for stream metadata Declaration public const string StreamMetadata = \"$metadata\" Field Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.ClusterException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.ClusterException.html",
    "title": "Class ClusterException | Event Store",
    "keywords": "Class ClusterException Exception thrown if cluster discovery fails. Inheritance System.Object System.Exception EventStoreConnectionException ClusterException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class ClusterException : EventStoreConnectionException, ISerializable Constructors ClusterException() Constructs a new ClusterException . Declaration public ClusterException() ClusterException(SerializationInfo, StreamingContext) Constructs a new ClusterException . Declaration protected ClusterException(SerializationInfo info, StreamingContext context) Parameters Type Name System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context ClusterException(String) Constructs a new ClusterException . Declaration public ClusterException(string message) Parameters Type Name System.String message ClusterException(String, Exception) Constructs a new ClusterException . Declaration public ClusterException(string message, Exception innerException) Parameters Type Name System.String message System.Exception innerException Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Management.ManagedProjection.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Management.ManagedProjection.html",
    "title": "Class ManagedProjection | Event Store",
    "keywords": "Class ManagedProjection managed projection controls start/stop/create/update/delete lifecycle of the projection. Inheritance System.Object ManagedProjection Namespace : EventStore.Projections.Core.Services.Management Assembly : EventStore.Projections.Core.dll Syntax public class ManagedProjection : IDisposable Constructors ManagedProjection(Guid, Guid, Int64, String, Boolean, ILogger, RequestResponseDispatcher<ClientMessage.DeleteStream, ClientMessage.DeleteStreamCompleted>, RequestResponseDispatcher<ClientMessage.WriteEvents, ClientMessage.WriteEventsCompleted>, RequestResponseDispatcher<ClientMessage.ReadStreamEventsBackward, ClientMessage.ReadStreamEventsBackwardCompleted>, IPublisher, ITimeProvider, RequestResponseDispatcher<CoreProjectionManagementMessage.GetState, CoreProjectionStatusMessage.StateReport>, RequestResponseDispatcher<CoreProjectionManagementMessage.GetResult, CoreProjectionStatusMessage.ResultReport>, IODispatcher, TimeSpan) Declaration public ManagedProjection(Guid workerId, Guid id, long projectionId, string name, bool enabledToRun, ILogger logger, RequestResponseDispatcher<ClientMessage.DeleteStream, ClientMessage.DeleteStreamCompleted> streamDispatcher, RequestResponseDispatcher<ClientMessage.WriteEvents, ClientMessage.WriteEventsCompleted> writeDispatcher, RequestResponseDispatcher<ClientMessage.ReadStreamEventsBackward, ClientMessage.ReadStreamEventsBackwardCompleted> readDispatcher, IPublisher output, ITimeProvider timeProvider, RequestResponseDispatcher<CoreProjectionManagementMessage.GetState, CoreProjectionStatusMessage.StateReport> getStateDispatcher, RequestResponseDispatcher<CoreProjectionManagementMessage.GetResult, CoreProjectionStatusMessage.ResultReport> getResultDispatcher, IODispatcher ioDispatcher, TimeSpan projectionQueryExpiry) Parameters Type Name Guid workerId Guid id System.Int64 projectionId System.String name System.Boolean enabledToRun EventStore.Common.Log.ILogger logger EventStore.Core.Messaging.RequestResponseDispatcher < EventStore.Core.Messages.ClientMessage.DeleteStream , EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted > streamDispatcher EventStore.Core.Messaging.RequestResponseDispatcher < EventStore.Core.Messages.ClientMessage.WriteEvents , EventStore.Core.Messages.ClientMessage.WriteEventsCompleted > writeDispatcher EventStore.Core.Messaging.RequestResponseDispatcher < EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward , EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted > readDispatcher EventStore.Core.Bus.IPublisher output EventStore.Core.Services.TimerService.ITimeProvider timeProvider EventStore.Core.Messaging.RequestResponseDispatcher < CoreProjectionManagementMessage.GetState , CoreProjectionStatusMessage.StateReport > getStateDispatcher EventStore.Core.Messaging.RequestResponseDispatcher < CoreProjectionManagementMessage.GetResult , CoreProjectionStatusMessage.ResultReport > getResultDispatcher EventStore.Core.Helpers.IODispatcher ioDispatcher TimeSpan projectionQueryExpiry Properties Deleted Declaration public bool Deleted { get; } Property Value Type System.Boolean Deleting Declaration public bool Deleting { get; } Property Value Type System.Boolean Id Declaration public Guid Id { get; } Property Value Type Guid Mode Declaration public ProjectionMode Mode { get; } Property Value Type ProjectionMode RunAs Declaration public IPrincipal RunAs { get; } Property Value Type IPrincipal Methods DeleteProjectionStreams() Declaration public void DeleteProjectionStreams() Dispose() Declaration public void Dispose() Fault(String) Declaration public void Fault(string reason) Parameters Type Name System.String reason GetStatistics() Declaration public ProjectionStatistics GetStatistics() Returns Type Description ProjectionStatistics Handle(CoreProjectionStatusMessage.Faulted) Declaration public void Handle(CoreProjectionStatusMessage.Faulted message) Parameters Type Name CoreProjectionStatusMessage.Faulted message Handle(CoreProjectionStatusMessage.Prepared) Declaration public void Handle(CoreProjectionStatusMessage.Prepared message) Parameters Type Name CoreProjectionStatusMessage.Prepared message Handle(CoreProjectionStatusMessage.Started) Declaration public void Handle(CoreProjectionStatusMessage.Started message) Parameters Type Name CoreProjectionStatusMessage.Started message Handle(CoreProjectionStatusMessage.StatisticsReport) Declaration public void Handle(CoreProjectionStatusMessage.StatisticsReport message) Parameters Type Name CoreProjectionStatusMessage.StatisticsReport message Handle(CoreProjectionStatusMessage.Stopped) Declaration public void Handle(CoreProjectionStatusMessage.Stopped message) Parameters Type Name CoreProjectionStatusMessage.Stopped message Handle(ProjectionManagementMessage.Command.Abort) Declaration public void Handle(ProjectionManagementMessage.Command.Abort message) Parameters Type Name ProjectionManagementMessage.Command.Abort message Handle(ProjectionManagementMessage.Command.Delete) Declaration public void Handle(ProjectionManagementMessage.Command.Delete message) Parameters Type Name ProjectionManagementMessage.Command.Delete message Handle(ProjectionManagementMessage.Command.Disable) Declaration public void Handle(ProjectionManagementMessage.Command.Disable message) Parameters Type Name ProjectionManagementMessage.Command.Disable message Handle(ProjectionManagementMessage.Command.Enable) Declaration public void Handle(ProjectionManagementMessage.Command.Enable message) Parameters Type Name ProjectionManagementMessage.Command.Enable message Handle(ProjectionManagementMessage.Command.GetConfig) Declaration public void Handle(ProjectionManagementMessage.Command.GetConfig message) Parameters Type Name ProjectionManagementMessage.Command.GetConfig message Handle(ProjectionManagementMessage.Command.GetQuery) Declaration public void Handle(ProjectionManagementMessage.Command.GetQuery message) Parameters Type Name ProjectionManagementMessage.Command.GetQuery message Handle(ProjectionManagementMessage.Command.GetResult) Declaration public void Handle(ProjectionManagementMessage.Command.GetResult message) Parameters Type Name ProjectionManagementMessage.Command.GetResult message Handle(ProjectionManagementMessage.Command.GetState) Declaration public void Handle(ProjectionManagementMessage.Command.GetState message) Parameters Type Name ProjectionManagementMessage.Command.GetState message Handle(ProjectionManagementMessage.Command.Reset) Declaration public void Handle(ProjectionManagementMessage.Command.Reset message) Parameters Type Name ProjectionManagementMessage.Command.Reset message Handle(ProjectionManagementMessage.Command.SetRunAs) Declaration public void Handle(ProjectionManagementMessage.Command.SetRunAs message) Parameters Type Name ProjectionManagementMessage.Command.SetRunAs message Handle(ProjectionManagementMessage.Command.UpdateConfig) Declaration public void Handle(ProjectionManagementMessage.Command.UpdateConfig message) Parameters Type Name ProjectionManagementMessage.Command.UpdateConfig message Handle(ProjectionManagementMessage.Command.UpdateQuery) Declaration public void Handle(ProjectionManagementMessage.Command.UpdateQuery message) Parameters Type Name ProjectionManagementMessage.Command.UpdateQuery message Handle(ProjectionManagementMessage.Internal.CleanupExpired) Declaration public void Handle(ProjectionManagementMessage.Internal.CleanupExpired message) Parameters Type Name ProjectionManagementMessage.Internal.CleanupExpired message InitializeExisting(String) Declaration public void InitializeExisting(string name) Parameters Type Name System.String name InitializeNew(ManagedProjection.PersistedState, IEnvelope) Declaration public void InitializeNew(ManagedProjection.PersistedState persistedState, IEnvelope replyEnvelope) Parameters Type Name ManagedProjection.PersistedState persistedState EventStore.Core.Messaging.IEnvelope replyEnvelope PrepareOrWriteStartOrLoadStopped() Declaration public void PrepareOrWriteStartOrLoadStopped()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.ReaderReady.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.ReaderReady.html",
    "title": "Class ProjectionManagementMessage.ReaderReady | Event Store",
    "keywords": "Class ProjectionManagementMessage.ReaderReady Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.ReaderReady Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class ReaderReady : Message Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProjectionCoreServiceCommandReader.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProjectionCoreServiceCommandReader.html",
    "title": "Class ProjectionCoreServiceCommandReader | Event Store",
    "keywords": "Class ProjectionCoreServiceCommandReader Inheritance System.Object ProjectionCoreServiceCommandReader Implements EventStore.Core.Bus.IHandle < ProjectionCoreServiceMessage.StartCore > EventStore.Core.Bus.IHandle < ProjectionCoreServiceMessage.StopCore > Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionCoreServiceCommandReader : object, IHandle<ProjectionCoreServiceMessage.StartCore>, IHandle<ProjectionCoreServiceMessage.StopCore> Constructors ProjectionCoreServiceCommandReader(IPublisher, IODispatcher, String) Declaration public ProjectionCoreServiceCommandReader(IPublisher publisher, IODispatcher ioDispatcher, string workerId) Parameters Type Name EventStore.Core.Bus.IPublisher publisher EventStore.Core.Helpers.IODispatcher ioDispatcher System.String workerId Fields SubComponentName Declaration public const string SubComponentName = null Field Value Type System.String Methods Handle(ProjectionCoreServiceMessage.StartCore) Declaration public void Handle(ProjectionCoreServiceMessage.StartCore message) Parameters Type Name ProjectionCoreServiceMessage.StartCore message Handle(ProjectionCoreServiceMessage.StopCore) Declaration public void Handle(ProjectionCoreServiceMessage.StopCore message) Parameters Type Name ProjectionCoreServiceMessage.StopCore message Implements EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CoreProjectionQueue.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CoreProjectionQueue.html",
    "title": "Class CoreProjectionQueue | Event Store",
    "keywords": "Class CoreProjectionQueue Inheritance System.Object CoreProjectionQueue Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class CoreProjectionQueue : object Constructors CoreProjectionQueue(IPublisher, Int32, Boolean) Declaration public CoreProjectionQueue(IPublisher publisher, int pendingEventsThreshold, bool orderedPartitionProcessing) Parameters Type Name EventStore.Core.Bus.IPublisher publisher System.Int32 pendingEventsThreshold System.Boolean orderedPartitionProcessing Properties IsRunning Declaration public bool IsRunning { get; } Property Value Type System.Boolean Methods EnqueueOutOfOrderTask(WorkItem) Declaration public void EnqueueOutOfOrderTask(WorkItem workItem) Parameters Type Name WorkItem workItem EnqueueTask(WorkItem, CheckpointTag, Boolean) Declaration public void EnqueueTask(WorkItem workItem, CheckpointTag workItemCheckpointTag, bool allowCurrentPosition = false) Parameters Type Name WorkItem workItem CheckpointTag workItemCheckpointTag System.Boolean allowCurrentPosition GetBufferedEventCount() Declaration public int GetBufferedEventCount() Returns Type Description System.Int32 GetStatus() Declaration public string GetStatus() Returns Type Description System.String InitializeQueue(CheckpointTag) Declaration public void InitializeQueue(CheckpointTag startingPosition) Parameters Type Name CheckpointTag startingPosition ProcessEvent() Declaration public bool ProcessEvent() Returns Type Description System.Boolean SetIsRunning(Boolean) Declaration public void SetIsRunning(bool isRunning) Parameters Type Name System.Boolean isRunning Subscribed(Guid) Declaration public void Subscribed(Guid currentSubscriptionId) Parameters Type Name Guid currentSubscriptionId Unsubscribed() Declaration public void Unsubscribed() Events EnsureTickPending Declaration public event Action EnsureTickPending Event Type Type Action"
  },
  "dotnet-api/code/EventStore.ClientAPI.Common.Log.ConsoleLogger.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Common.Log.ConsoleLogger.html",
    "title": "Class ConsoleLogger | Event Store",
    "keywords": "Class ConsoleLogger Implementation of ILogger which outputs to System.Console . Inheritance System.Object ConsoleLogger Implements ILogger Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI.Common.Log Assembly : EventStore.ClientAPI.dll Syntax public class ConsoleLogger : ILogger Methods Debug(Exception, String, Object[]) Writes a debug message to the logger Declaration public void Debug(Exception ex, string format, params object[] args) Parameters Type Name System.Exception ex System.String format System.Object [] args Debug(String, Object[]) Writes a debug message to the logger Declaration public void Debug(string format, params object[] args) Parameters Type Name System.String format System.Object [] args Error(Exception, String, Object[]) Writes an error to the logger Declaration public void Error(Exception ex, string format, params object[] args) Parameters Type Name System.Exception ex System.String format System.Object [] args Error(String, Object[]) Writes an error to the logger Declaration public void Error(string format, params object[] args) Parameters Type Name System.String format System.Object [] args Info(Exception, String, Object[]) Writes an information message to the logger Declaration public void Info(Exception ex, string format, params object[] args) Parameters Type Name System.Exception ex System.String format System.Object [] args Info(String, Object[]) Writes an information message to the logger Declaration public void Info(string format, params object[] args) Parameters Type Name System.String format System.Object [] args Implements ILogger"
  },
  "dotnet-api/code/EventStore.ClientAPI.CatchUpSubscriptionSettings.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.CatchUpSubscriptionSettings.html",
    "title": "Class CatchUpSubscriptionSettings | Event Store",
    "keywords": "Class CatchUpSubscriptionSettings Settings for EventStoreCatchUpSubscription . Inheritance System.Object CatchUpSubscriptionSettings CatchUpSubscriptionFilteredSettings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class CatchUpSubscriptionSettings Constructors CatchUpSubscriptionSettings(Int32, Int32, Boolean, Boolean, String) Constructs a CatchUpSubscriptionSettings object. Declaration public CatchUpSubscriptionSettings(int maxLiveQueueSize, int readBatchSize, bool verboseLogging, bool resolveLinkTos, string subscriptionName = \"\") Parameters Type Name System.Int32 maxLiveQueueSize System.Int32 readBatchSize System.Boolean verboseLogging System.Boolean resolveLinkTos System.String subscriptionName Fields Default Returns default settings. Declaration public static readonly CatchUpSubscriptionSettings Default Field Value Type CatchUpSubscriptionSettings MaxLiveQueueSize The maximum amount of events to cache when processing from a live subscription. Going above this value will drop the subscription. Declaration public readonly int MaxLiveQueueSize Field Value Type System.Int32 ReadBatchSize The number of events to read per batch when reading the history. Declaration public readonly int ReadBatchSize Field Value Type System.Int32 ResolveLinkTos Whether to resolve link events. Declaration public readonly bool ResolveLinkTos Field Value Type System.Boolean SubscriptionName The name of the subscription. Declaration public readonly string SubscriptionName Field Value Type System.String VerboseLogging Enables verbose logging on the subscription. Declaration public readonly bool VerboseLogging Field Value Type System.Boolean"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProjectionCheckpoint.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProjectionCheckpoint.html",
    "title": "Class ProjectionCheckpoint | Event Store",
    "keywords": "Class ProjectionCheckpoint Inheritance System.Object ProjectionCheckpoint Implements IEmittedStreamContainer IProjectionCheckpointManager EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.ReadyForCheckpoint > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.RestartRequested > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.Failed > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.EmittedStreamAwaiting > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.EmittedStreamWriteCompleted > IEventWriter Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionCheckpoint : IDisposable, IEmittedStreamContainer, IProjectionCheckpointManager, IHandle<CoreProjectionProcessingMessage.ReadyForCheckpoint>, IHandle<CoreProjectionProcessingMessage.RestartRequested>, IHandle<CoreProjectionProcessingMessage.Failed>, IHandle<CoreProjectionProcessingMessage.EmittedStreamAwaiting>, IHandle<CoreProjectionProcessingMessage.EmittedStreamWriteCompleted>, IEventWriter Constructors ProjectionCheckpoint(IPublisher, IODispatcher, ProjectionVersion, IPrincipal, IProjectionCheckpointManager, CheckpointTag, PositionTagger, Int32, Int32, ILogger) Declaration public ProjectionCheckpoint(IPublisher publisher, IODispatcher ioDispatcher, ProjectionVersion projectionVersion, IPrincipal runAs, IProjectionCheckpointManager readyHandler, CheckpointTag from, PositionTagger positionTagger, int maxWriteBatchLength, int maximumAllowedWritesInFlight, ILogger logger = null) Parameters Type Name EventStore.Core.Bus.IPublisher publisher EventStore.Core.Helpers.IODispatcher ioDispatcher ProjectionVersion projectionVersion IPrincipal runAs IProjectionCheckpointManager readyHandler CheckpointTag from PositionTagger positionTagger System.Int32 maxWriteBatchLength System.Int32 maximumAllowedWritesInFlight EventStore.Common.Log.ILogger logger Methods Dispose() Declaration public void Dispose() GetReadsInProgress() Declaration public int GetReadsInProgress() Returns Type Description System.Int32 GetWritePendingEvents() Declaration public int GetWritePendingEvents() Returns Type Description System.Int32 GetWritesInProgress() Declaration public int GetWritesInProgress() Returns Type Description System.Int32 Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting) Declaration public void Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting message) Parameters Type Name CoreProjectionProcessingMessage.EmittedStreamAwaiting message Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted) Declaration public void Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted message) Parameters Type Name CoreProjectionProcessingMessage.EmittedStreamWriteCompleted message Handle(CoreProjectionProcessingMessage.Failed) Declaration public void Handle(CoreProjectionProcessingMessage.Failed message) Parameters Type Name CoreProjectionProcessingMessage.Failed message Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint) Declaration public void Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint message) Parameters Type Name CoreProjectionProcessingMessage.ReadyForCheckpoint message Handle(CoreProjectionProcessingMessage.RestartRequested) Declaration public void Handle(CoreProjectionProcessingMessage.RestartRequested message) Parameters Type Name CoreProjectionProcessingMessage.RestartRequested message Prepare(CheckpointTag) Declaration public void Prepare(CheckpointTag position) Parameters Type Name CheckpointTag position Start() Declaration public void Start() ValidateOrderAndEmitEvents(EmittedEventEnvelope[]) Declaration public void ValidateOrderAndEmitEvents(EmittedEventEnvelope[] events) Parameters Type Name EmittedEventEnvelope [] events Implements IEmittedStreamContainer IProjectionCheckpointManager EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> IEventWriter"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.html",
    "title": "Class EventReaderSubscriptionMessage | Event Store",
    "keywords": "Class EventReaderSubscriptionMessage Inheritance System.Object EventReaderSubscriptionMessage Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public static class EventReaderSubscriptionMessage : object"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare.html",
    "title": "Class CoreProjectionManagementMessage.CreateAndPrepare | Event Store",
    "keywords": "Class CoreProjectionManagementMessage.CreateAndPrepare Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionManagementControlMessage CoreProjectionManagementMessage.CreateAndPrepare Inherited Members CoreProjectionManagementControlMessage.WorkerId CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class CreateAndPrepare : CoreProjectionManagementControlMessage Constructors CreateAndPrepare(Guid, Guid, String, ProjectionVersion, ProjectionConfig, String, String) Declaration public CreateAndPrepare(Guid projectionId, Guid workerId, string name, ProjectionVersion version, ProjectionConfig config, string handlerType, string query) Parameters Type Name Guid projectionId Guid workerId System.String name ProjectionVersion version ProjectionConfig config System.String handlerType System.String query Properties Config Declaration public ProjectionConfig Config { get; } Property Value Type ProjectionConfig HandlerType Declaration public string HandlerType { get; } Property Value Type System.String MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionManagementControlMessage.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String Query Declaration public string Query { get; } Property Value Type System.String Version Declaration public ProjectionVersion Version { get; } Property Value Type ProjectionVersion"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.v8.V8ProjectionStateHandler.EmittedEventJsonContract.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.v8.V8ProjectionStateHandler.EmittedEventJsonContract.html",
    "title": "Class V8ProjectionStateHandler.EmittedEventJsonContract | Event Store",
    "keywords": "Class V8ProjectionStateHandler.EmittedEventJsonContract Inheritance System.Object V8ProjectionStateHandler.EmittedEventJsonContract Namespace : EventStore.Projections.Core.Services.v8 Assembly : EventStore.Projections.Core.dll Syntax public class EmittedEventJsonContract : object Fields body Declaration public string body Field Value Type System.String eventName Declaration public string eventName Field Value Type System.String isJson Declaration public bool isJson Field Value Type System.Boolean metadata Declaration public Dictionary<string, JRaw> metadata Field Value Type Dictionary < System.String , JRaw > streamId Declaration public string streamId Field Value Type System.String Methods GetExtraMetadata() Declaration public ExtraMetaData GetExtraMetadata() Returns Type Description ExtraMetaData"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ICoreProjectionCheckpointManager.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ICoreProjectionCheckpointManager.html",
    "title": "Interface ICoreProjectionCheckpointManager | Event Store",
    "keywords": "Interface ICoreProjectionCheckpointManager Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public interface ICoreProjectionCheckpointManager Properties LastProcessedEventPosition Declaration CheckpointTag LastProcessedEventPosition { get; } Property Value Type CheckpointTag Methods BeginLoadPartitionStateAt(String, CheckpointTag, Action<PartitionState>) Declaration void BeginLoadPartitionStateAt(string statePartition, CheckpointTag requestedStateCheckpointTag, Action<PartitionState> loadCompleted) Parameters Type Name System.String statePartition CheckpointTag requestedStateCheckpointTag Action < PartitionState > loadCompleted BeginLoadPrerecordedEvents(CheckpointTag) Declaration void BeginLoadPrerecordedEvents(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag CheckpointSuggested(CheckpointTag, Single) Suggests a checkpoint which may complete immediately or be delayed Declaration bool CheckpointSuggested(CheckpointTag checkpointTag, float progress) Parameters Type Name CheckpointTag checkpointTag System.Single progress Returns Type Description System.Boolean true - if checkpoint has been completed (or skipped) EventProcessed(CheckpointTag, Single) Declaration void EventProcessed(CheckpointTag checkpointTag, float progress) Parameters Type Name CheckpointTag checkpointTag System.Single progress GetStatistics(ProjectionStatistics) Declaration void GetStatistics(ProjectionStatistics info) Parameters Type Name ProjectionStatistics info Initialize() Declaration void Initialize() PartitionCompleted(String) Declaration void PartitionCompleted(string partition) Parameters Type Name System.String partition Progress(Single) Declaration void Progress(float progress) Parameters Type Name System.Single progress RecordEventOrder(ResolvedEvent, CheckpointTag, Action) Declaration void RecordEventOrder(ResolvedEvent resolvedEvent, CheckpointTag orderCheckpointTag, Action committed) Parameters Type Name ResolvedEvent resolvedEvent CheckpointTag orderCheckpointTag Action committed Start(CheckpointTag, PartitionState) Declaration void Start(CheckpointTag checkpointTag, PartitionState rootPartitionState) Parameters Type Name CheckpointTag checkpointTag PartitionState rootPartitionState StateUpdated(String, PartitionState, PartitionState) Declaration void StateUpdated(string partition, PartitionState oldState, PartitionState newState) Parameters Type Name System.String partition PartitionState oldState PartitionState newState Stopped() Declaration void Stopped() Stopping() Declaration void Stopping()"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException.html",
    "title": "Class ProjectionCommandFailedException | Event Store",
    "keywords": "Class ProjectionCommandFailedException Exception thrown if a projection command fails. Inheritance System.Object System.Exception EventStoreConnectionException ProjectionCommandFailedException ProjectionCommandConflictException UserCommandConflictException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class ProjectionCommandFailedException : EventStoreConnectionException, ISerializable Constructors ProjectionCommandFailedException() Constructs a new ProjectionCommandFailedException . Declaration public ProjectionCommandFailedException() ProjectionCommandFailedException(Int32, String) Constructs a new ProjectionCommandFailedException . Declaration public ProjectionCommandFailedException(int httpStatusCode, string message) Parameters Type Name System.Int32 httpStatusCode System.String message ProjectionCommandFailedException(SerializationInfo, StreamingContext) Constructs a new ProjectionCommandFailedException . Declaration protected ProjectionCommandFailedException(SerializationInfo info, StreamingContext context) Parameters Type Name System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context ProjectionCommandFailedException(String, Exception) Constructs a new ProjectionCommandFailedException . Declaration public ProjectionCommandFailedException(string message, Exception innerException) Parameters Type Name System.String message System.Exception innerException Properties HttpStatusCode The Http status code returned by the server Declaration public int HttpStatusCode { get; } Property Value Type System.Int32 Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.KillCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.KillCommand.html",
    "title": "Class KillCommand | Event Store",
    "keywords": "Class KillCommand Inheritance System.Object KillCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Commands Assembly : EventStore.Projections.Core.dll Syntax public class KillCommand : object Properties Id Declaration public string Id { get; set; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.DefaultProjectionProcessingStrategy.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.DefaultProjectionProcessingStrategy.html",
    "title": "Class DefaultProjectionProcessingStrategy | Event Store",
    "keywords": "Class DefaultProjectionProcessingStrategy Inheritance System.Object ProjectionProcessingStrategy EventReaderBasedProjectionProcessingStrategy DefaultProjectionProcessingStrategy ContinuousProjectionProcessingStrategy QueryProcessingStrategy Inherited Members EventReaderBasedProjectionProcessingStrategy._projectionConfig EventReaderBasedProjectionProcessingStrategy._sourceDefinition EventReaderBasedProjectionProcessingStrategy.CreateProcessingPhases(IPublisher, IPublisher, Guid, PartitionStateCache, Action, CoreProjection, ProjectionNamesBuilder, ITimeProvider, IODispatcher, CoreProjectionCheckpointWriter) EventReaderBasedProjectionProcessingStrategy.CreateReaderStrategy(ITimeProvider) EventReaderBasedProjectionProcessingStrategy.CreateFirstPhaseResultEmitter(ProjectionNamesBuilder) EventReaderBasedProjectionProcessingStrategy.CreateProjectionProcessingPhases(IPublisher, IPublisher, Guid, ProjectionNamesBuilder, PartitionStateCache, CoreProjection, IODispatcher, IProjectionProcessingPhase) EventReaderBasedProjectionProcessingStrategy.GetSourceDefinition() EventReaderBasedProjectionProcessingStrategy.GetRequiresRootPartition() EventReaderBasedProjectionProcessingStrategy.EnrichStatistics(ProjectionStatistics) EventReaderBasedProjectionProcessingStrategy.CreateCheckpointManager(Guid, IPublisher, IODispatcher, ProjectionNamesBuilder, CoreProjectionCheckpointWriter, Boolean, IReaderStrategy) EventReaderBasedProjectionProcessingStrategy.CreateFirstPhaseResultWriter(IEmittedEventWriter, CheckpointTag, ProjectionNamesBuilder) ProjectionProcessingStrategy._name ProjectionProcessingStrategy._projectionVersion ProjectionProcessingStrategy._logger ProjectionProcessingStrategy.Create(Guid, IPublisher, Guid, IPrincipal, IPublisher, IODispatcher, ReaderSubscriptionDispatcher, ITimeProvider) ProjectionProcessingStrategy.GetStopOnEof() ProjectionProcessingStrategy.GetUseCheckpoints() ProjectionProcessingStrategy.GetProducesRunningResults() Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public abstract class DefaultProjectionProcessingStrategy : EventReaderBasedProjectionProcessingStrategy Constructors DefaultProjectionProcessingStrategy(String, ProjectionVersion, IProjectionStateHandler, ProjectionConfig, IQuerySources, ILogger, ReaderSubscriptionDispatcher) Declaration protected DefaultProjectionProcessingStrategy(string name, ProjectionVersion projectionVersion, IProjectionStateHandler stateHandler, ProjectionConfig projectionConfig, IQuerySources sourceDefinition, ILogger logger, ReaderSubscriptionDispatcher subscriptionDispatcher) Parameters Type Name System.String name ProjectionVersion projectionVersion IProjectionStateHandler stateHandler ProjectionConfig projectionConfig IQuerySources sourceDefinition EventStore.Common.Log.ILogger logger ReaderSubscriptionDispatcher subscriptionDispatcher Methods CreateFirstProcessingPhase(IPublisher, IPublisher, Guid, PartitionStateCache, Action, CoreProjection, ReaderSubscriptionDispatcher, CheckpointTag, ICoreProjectionCheckpointManager, IReaderStrategy, IResultWriter, IEmittedStreamsTracker) Declaration protected override IProjectionProcessingPhase CreateFirstProcessingPhase(IPublisher publisher, IPublisher inputQueue, Guid projectionCorrelationId, PartitionStateCache partitionStateCache, Action updateStatistics, CoreProjection coreProjection, ReaderSubscriptionDispatcher subscriptionDispatcher, CheckpointTag zeroCheckpointTag, ICoreProjectionCheckpointManager checkpointManager, IReaderStrategy readerStrategy, IResultWriter resultWriter, IEmittedStreamsTracker emittedStreamsTracker) Parameters Type Name EventStore.Core.Bus.IPublisher publisher EventStore.Core.Bus.IPublisher inputQueue Guid projectionCorrelationId PartitionStateCache partitionStateCache Action updateStatistics CoreProjection coreProjection ReaderSubscriptionDispatcher subscriptionDispatcher CheckpointTag zeroCheckpointTag ICoreProjectionCheckpointManager checkpointManager IReaderStrategy readerStrategy IResultWriter resultWriter IEmittedStreamsTracker emittedStreamsTracker Returns Type Description IProjectionProcessingPhase Overrides EventReaderBasedProjectionProcessingStrategy.CreateFirstProcessingPhase(IPublisher, IPublisher, Guid, PartitionStateCache, Action, CoreProjection, ReaderSubscriptionDispatcher, CheckpointTag, ICoreProjectionCheckpointManager, IReaderStrategy, IResultWriter, IEmittedStreamsTracker) CreateStatePartitionSelector() Declaration protected virtual StatePartitionSelector CreateStatePartitionSelector() Returns Type Description StatePartitionSelector"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.html",
    "title": "Class FeedReaderMessage | Event Store",
    "keywords": "Class FeedReaderMessage Inheritance System.Object FeedReaderMessage Namespace : EventStore.Projections.Core.Messages.EventReaders.Feeds Assembly : EventStore.Projections.Core.dll Syntax public static class FeedReaderMessage : object"
  },
  "dotnet-api/code/EventStore.ClientAPI.ReadDirection.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ReadDirection.html",
    "title": "Enum ReadDirection | Event Store",
    "keywords": "Enum ReadDirection Represents the direction of read operation (both from $all and usual streams) Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public enum ReadDirection Fields Name Description Backward From end to beginning. Forward From beginning to end. Extension Methods EnumExtensions.EnumValueName<ReadDirection>()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.html",
    "title": "Class ProjectionManagementMessage | Event Store",
    "keywords": "Class ProjectionManagementMessage Inheritance System.Object ProjectionManagementMessage Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public static class ProjectionManagementMessage : object"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CoreProjectionCheckpointReader.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CoreProjectionCheckpointReader.html",
    "title": "Class CoreProjectionCheckpointReader | Event Store",
    "keywords": "Class CoreProjectionCheckpointReader Inheritance System.Object CoreProjectionCheckpointReader Implements ICoreProjectionCheckpointReader Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class CoreProjectionCheckpointReader : object, ICoreProjectionCheckpointReader Constructors CoreProjectionCheckpointReader(IPublisher, Guid, IODispatcher, String, ProjectionVersion, Boolean) Declaration public CoreProjectionCheckpointReader(IPublisher publisher, Guid projectionCorrelationId, IODispatcher ioDispatcher, string projectionCheckpointStreamId, ProjectionVersion projectionVersion, bool useCheckpoints) Parameters Type Name EventStore.Core.Bus.IPublisher publisher Guid projectionCorrelationId EventStore.Core.Helpers.IODispatcher ioDispatcher System.String projectionCheckpointStreamId ProjectionVersion projectionVersion System.Boolean useCheckpoints Methods BeforeBeginLoadState() Declaration protected void BeforeBeginLoadState() BeginLoadState() Declaration public void BeginLoadState() CheckpointLoaded(CheckpointTag, String) Declaration protected void CheckpointLoaded(CheckpointTag checkpointTag, string checkpointData) Parameters Type Name CheckpointTag checkpointTag System.String checkpointData Initialize() Declaration public void Initialize() RequestLoadState() Declaration protected void RequestLoadState() Implements ICoreProjectionCheckpointReader"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.Faulted.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.Faulted.html",
    "title": "Class ReaderSubscriptionMessage.Faulted | Event Store",
    "keywords": "Class ReaderSubscriptionMessage.Faulted Inheritance System.Object EventStore.Core.Messaging.Message ReaderSubscriptionMessage.SubscriptionMessage ReaderSubscriptionMessage.Faulted Inherited Members ReaderSubscriptionMessage.SubscriptionMessage.CorrelationId ReaderSubscriptionMessage.SubscriptionMessage.PreTagged ReaderSubscriptionMessage.SubscriptionMessage.Source EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Faulted : ReaderSubscriptionMessage.SubscriptionMessage Constructors Faulted(Guid, String, Object) Declaration public Faulted(Guid correlationId, string reason, object source = null) Parameters Type Name Guid correlationId System.String reason System.Object source Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ReaderSubscriptionMessage.SubscriptionMessage.MsgTypeId Reason Declaration public string Reason { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.OperationTimedOutException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.OperationTimedOutException.html",
    "title": "Class OperationTimedOutException | Event Store",
    "keywords": "Class OperationTimedOutException Exception thrown if an operation times out. Inheritance System.Object System.Exception EventStoreConnectionException OperationTimedOutException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class OperationTimedOutException : EventStoreConnectionException, ISerializable Constructors OperationTimedOutException() Constructs a new OperationTimedOutException . Declaration public OperationTimedOutException() OperationTimedOutException(SerializationInfo, StreamingContext) Constructs a new OperationTimedOutException . Declaration protected OperationTimedOutException(SerializationInfo info, StreamingContext context) Parameters Type Name System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context OperationTimedOutException(String) Constructs a new OperationTimedOutException . Declaration public OperationTimedOutException(string message) Parameters Type Name System.String message OperationTimedOutException(String, Exception) Constructs a new OperationTimedOutException . Declaration public OperationTimedOutException(string message, Exception innerException) Parameters Type Name System.String message System.Exception innerException Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.ClientAPI.StreamMetadata.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.StreamMetadata.html",
    "title": "Class StreamMetadata | Event Store",
    "keywords": "Class StreamMetadata A class representing stream metadata with strongly typed properties for system values and a dictionary-like interface for custom values. Inheritance System.Object StreamMetadata Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class StreamMetadata Fields Acl The access control list for the stream. Declaration public readonly StreamAcl Acl Field Value Type StreamAcl CacheControl The amount of time for which the stream head is cachable. Declaration public readonly TimeSpan? CacheControl Field Value Type System.Nullable < System.TimeSpan > MaxAge The maximum age of events allowed in the stream. Declaration public readonly TimeSpan? MaxAge Field Value Type System.Nullable < System.TimeSpan > MaxCount The maximum number of events allowed in the stream. Declaration public readonly long? MaxCount Field Value Type System.Nullable < System.Int64 > TruncateBefore The event number from which previous events can be scavenged. This is used to implement soft-deletion of streams. Declaration public readonly long? TruncateBefore Field Value Type System.Nullable < System.Int64 > Properties CustomKeys An enumerable of the keys in the user-provided metadata. Declaration public IEnumerable<string> CustomKeys { get; } Property Value Type System.Collections.Generic.IEnumerable < System.String > CustomMetadataAsRawJsons An enumerable of key-value pairs of keys to JSON text for user-provider metadata. Declaration public IEnumerable<KeyValuePair<string, string>> CustomMetadataAsRawJsons { get; } Property Value Type System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.String , System.String >> Methods AsJsonBytes() Returns a byte array representing the stream metadata as JSON encoded as UTF8 with no byte order mark. Declaration public byte[] AsJsonBytes() Returns Type Description System.Byte [] Byte array representing the stream metadata. AsJsonString() Returns a JSON string representing the stream metadata. Declaration public string AsJsonString() Returns Type Description System.String A string representing the stream metadata. Build() Creates a StreamMetadataBuilder for building a new StreamMetadata . Declaration public static StreamMetadataBuilder Build() Returns Type Description StreamMetadataBuilder An instance of StreamMetadataBuilder . Copy() Creates a StreamMetadataBuilder initialized with the values of this StreamMetadata Declaration public StreamMetadataBuilder Copy() Returns Type Description StreamMetadataBuilder An instance of StreamMetadataBuilder . Create(Nullable<Int64>, Nullable<TimeSpan>, Nullable<Int64>, Nullable<TimeSpan>, StreamAcl) Creates a StreamMetadata with the specified parameters. Declaration public static StreamMetadata Create(long? maxCount = default(long? ), TimeSpan? maxAge = default(TimeSpan? ), long? truncateBefore = default(long? ), TimeSpan? cacheControl = default(TimeSpan? ), StreamAcl acl = null) Parameters Type Name System.Nullable < System.Int64 > maxCount System.Nullable < System.TimeSpan > maxAge System.Nullable < System.Int64 > truncateBefore System.Nullable < System.TimeSpan > cacheControl StreamAcl acl Returns Type Description StreamMetadata FromJsonBytes(Byte[]) Builds a StreamMetadata object from a byte array containing stream metadata. Declaration public static StreamMetadata FromJsonBytes(byte[] json) Parameters Type Name System.Byte [] json Returns Type Description StreamMetadata GetValue<T>(String) Get a value of type T for the given key from the custom metadata. This method will throw an System.ArgumentException if the key is not found. Declaration public T GetValue<T>(string key) Parameters Type Name System.String key Returns Type Description T Value of type T for the key. Type Parameters Name Description T The type of the value. GetValueAsRawJsonString(String) Gets a string containing raw JSON value for the given key. Declaration public string GetValueAsRawJsonString(string key) Parameters Type Name System.String key Returns Type Description System.String String containing raw JSON value for the key. Exceptions Type Condition System.ArgumentException If the key does not exist. TryGetValue<T>(String, out T) Tries to get a value of type T for the given key from the custom metadata, and if it exists returns true from the method and gives the value as an out parameter. Declaration public bool TryGetValue<T>(string key, out T value) Parameters Type Name System.String key T value Returns Type Description System.Boolean True if the key exists, false otherwise. Type Parameters Name Description T The type of the value. TryGetValueAsRawJsonString(String, out String) Tries to get a string containing raw JSON value for the given key. Declaration public bool TryGetValueAsRawJsonString(string key, out string value) Parameters Type Name System.String key System.String value Returns Type Description System.Boolean True if the key exists, false otherwise."
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.PostBatchCommand.ProjectionPost.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.PostBatchCommand.ProjectionPost.html",
    "title": "Class PostBatchCommand.ProjectionPost | Event Store",
    "keywords": "Class PostBatchCommand.ProjectionPost Inheritance System.Object PostBatchCommand.ProjectionPost Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionPost : object Fields CheckpointsEnabled Declaration public bool CheckpointsEnabled Field Value Type System.Boolean EmitEnabled Declaration public bool EmitEnabled Field Value Type System.Boolean Enabled Declaration public bool Enabled Field Value Type System.Boolean EnableRunAs Declaration public bool EnableRunAs Field Value Type System.Boolean HandlerType Declaration public string HandlerType Field Value Type System.String Mode Declaration public ProjectionMode Mode Field Value Type ProjectionMode Name Declaration public string Name Field Value Type System.String Query Declaration public string Query Field Value Type System.String RunAs Declaration public SerializedRunAs RunAs Field Value Type SerializedRunAs TrackEmittedStreams Declaration public bool TrackEmittedStreams Field Value Type System.Boolean"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.UserCommandConflictException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.UserCommandConflictException.html",
    "title": "Class UserCommandConflictException | Event Store",
    "keywords": "Class UserCommandConflictException Exception thrown if a user command fails. Inheritance System.Object System.Exception EventStoreConnectionException ProjectionCommandFailedException UserCommandConflictException Implements System.Runtime.Serialization.ISerializable Inherited Members ProjectionCommandFailedException.HttpStatusCode System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class UserCommandConflictException : ProjectionCommandFailedException, ISerializable Constructors UserCommandConflictException() Constructs a new UserCommandFailedException . Declaration public UserCommandConflictException() UserCommandConflictException(Int32, String) Constructs a new UserCommandFailedException . Declaration public UserCommandConflictException(int httpStatusCode, string message) Parameters Type Name System.Int32 httpStatusCode System.String message UserCommandConflictException(SerializationInfo, StreamingContext) Constructs a new UserCommandFailedException . Declaration protected UserCommandConflictException(SerializationInfo info, StreamingContext context) Parameters Type Name System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context UserCommandConflictException(String, Exception) Constructs a new UserCommandFailedException . Declaration public UserCommandConflictException(string message, Exception innerException) Parameters Type Name System.String message System.Exception innerException Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.ClientAPI.Internal.PersistentSubscriptionUpdateStatus.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Internal.PersistentSubscriptionUpdateStatus.html",
    "title": "Enum PersistentSubscriptionUpdateStatus | Event Store",
    "keywords": "Enum PersistentSubscriptionUpdateStatus Enumeration representing the status of a single subscription create message. Namespace : EventStore.ClientAPI.Internal Assembly : EventStore.ClientAPI.dll Syntax public enum PersistentSubscriptionUpdateStatus Fields Name Description AccessDenied You do not have permissions to update this subscription Failure Some failure happened creating the subscription NotFound The subscription already exists Success The subscription was created successfully Extension Methods EnumExtensions.EnumValueName<PersistentSubscriptionUpdateStatus>()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Starting.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Starting.html",
    "title": "Class ProjectionManagementMessage.Starting | Event Store",
    "keywords": "Class ProjectionManagementMessage.Starting Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Starting Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public sealed class Starting : Message Constructors Starting(Guid) Declaration public Starting(Guid instanceCorrelationId) Parameters Type Name Guid instanceCorrelationId Fields InstanceCorrelationId Declaration public readonly Guid InstanceCorrelationId Field Value Type Guid Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId"
  },
  "dotnet-api/code/EventStore.ClientAPI.UserManagement.RelLink.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.UserManagement.RelLink.html",
    "title": "Class RelLink | Event Store",
    "keywords": "Class RelLink Inheritance System.Object RelLink Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI.UserManagement Assembly : EventStore.ClientAPI.dll Syntax public class RelLink Constructors RelLink(String, String) Declaration public RelLink(string href, string rel) Parameters Type Name System.String href System.String rel Fields Href Declaration public readonly string Href Field Value Type System.String Rel Declaration public readonly string Rel Field Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.html",
    "title": "Class CoreProjectionManagementMessage | Event Store",
    "keywords": "Class CoreProjectionManagementMessage Inheritance System.Object CoreProjectionManagementMessage Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public static class CoreProjectionManagementMessage : object"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout.html",
    "title": "Class ProjectionCoreServiceMessage.StopCoreTimeout | Event Store",
    "keywords": "Class ProjectionCoreServiceMessage.StopCoreTimeout Inheritance System.Object EventStore.Core.Messaging.Message ProjectionCoreServiceMessage.StopCoreTimeout Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class StopCoreTimeout : Message Constructors StopCoreTimeout(Guid) Declaration public StopCoreTimeout(Guid queueId) Parameters Type Name Guid queueId Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId QueueId Declaration public Guid QueueId { get; } Property Value Type Guid"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.html",
    "title": "Class ProjectionManagementMessage.Command | Event Store",
    "keywords": "Class ProjectionManagementMessage.Command Inheritance System.Object ProjectionManagementMessage.Command Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public static class Command : object"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe.html",
    "title": "Class ReaderSubscriptionManagement.Subscribe | Event Store",
    "keywords": "Class ReaderSubscriptionManagement.Subscribe Inheritance System.Object EventStore.Core.Messaging.Message ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage ReaderSubscriptionManagement.Subscribe Inherited Members ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage.SubscriptionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Subscribe : ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage Constructors Subscribe(Guid, CheckpointTag, IReaderStrategy, ReaderSubscriptionOptions) Declaration public Subscribe(Guid subscriptionId, CheckpointTag from, IReaderStrategy readerStrategy, ReaderSubscriptionOptions readerSubscriptionOptions) Parameters Type Name Guid subscriptionId CheckpointTag from IReaderStrategy readerStrategy ReaderSubscriptionOptions readerSubscriptionOptions Properties FromPosition Declaration public CheckpointTag FromPosition { get; } Property Value Type CheckpointTag MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage.MsgTypeId Options Declaration public ReaderSubscriptionOptions Options { get; } Property Value Type ReaderSubscriptionOptions ReaderStrategy Declaration public IReaderStrategy ReaderStrategy { get; } Property Value Type IReaderStrategy"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter.html",
    "title": "Class QueuedEmittedStreamsWriter | Event Store",
    "keywords": "Class QueuedEmittedStreamsWriter Inheritance System.Object QueuedEmittedStreamsWriter Implements IEmittedStreamsWriter Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class QueuedEmittedStreamsWriter : object, IEmittedStreamsWriter Constructors QueuedEmittedStreamsWriter(IODispatcher, Guid) Declaration public QueuedEmittedStreamsWriter(IODispatcher ioDispatcher, Guid writeQueueId) Parameters Type Name EventStore.Core.Helpers.IODispatcher ioDispatcher Guid writeQueueId Methods WriteEvents(String, Int64, Event[], IPrincipal, Action<ClientMessage.WriteEventsCompleted>) Declaration public void WriteEvents(string streamId, long expectedVersion, Event[] events, IPrincipal writeAs, Action<ClientMessage.WriteEventsCompleted> complete) Parameters Type Name System.String streamId System.Int64 expectedVersion EventStore.Core.Data.Event [] events IPrincipal writeAs Action < EventStore.Core.Messages.ClientMessage.WriteEventsCompleted > complete Implements IEmittedStreamsWriter"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedStreamsDeleter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedStreamsDeleter.html",
    "title": "Class EmittedStreamsDeleter | Event Store",
    "keywords": "Class EmittedStreamsDeleter Inheritance System.Object EmittedStreamsDeleter Implements IEmittedStreamsDeleter Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class EmittedStreamsDeleter : object, IEmittedStreamsDeleter Constructors EmittedStreamsDeleter(IODispatcher, String, String) Declaration public EmittedStreamsDeleter(IODispatcher ioDispatcher, string emittedStreamsId, string emittedStreamsCheckpointStreamId) Parameters Type Name EventStore.Core.Helpers.IODispatcher ioDispatcher System.String emittedStreamsId System.String emittedStreamsCheckpointStreamId Methods DeleteEmittedStreams(Action) Declaration public void DeleteEmittedStreams(Action onEmittedStreamsDeleted) Parameters Type Name Action onEmittedStreamsDeleted Implements IEmittedStreamsDeleter"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IEventProcessingProjectionPhase.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IEventProcessingProjectionPhase.html",
    "title": "Interface IEventProcessingProjectionPhase | Event Store",
    "keywords": "Interface IEventProcessingProjectionPhase Inherited Members IProjectionPhaseStateManager.BeginGetPartitionStateAt(String, CheckpointTag, Action<PartitionState>, Boolean) IProjectionPhaseStateManager.UnlockAndForgetBefore(CheckpointTag) IProjectionPhaseStateManager.LastProcessedEventPosition Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public interface IEventProcessingProjectionPhase : IProjectionPhaseStateManager Methods EmitEofResult(String, String, CheckpointTag, Guid, String) Declaration void EmitEofResult(string partition, string resultBody, CheckpointTag causedBy, Guid causedByGuid, string correlationId) Parameters Type Name System.String partition System.String resultBody CheckpointTag causedBy Guid causedByGuid System.String correlationId FinalizeEventProcessing(EventProcessedResult, CheckpointTag, Single) Declaration void FinalizeEventProcessing(EventProcessedResult result, CheckpointTag eventCheckpointTag, float progress) Parameters Type Name EventProcessedResult result CheckpointTag eventCheckpointTag System.Single progress ProcessCommittedEvent(EventReaderSubscriptionMessage.CommittedEventReceived, String) Declaration EventProcessedResult ProcessCommittedEvent(EventReaderSubscriptionMessage.CommittedEventReceived message, string partition) Parameters Type Name EventReaderSubscriptionMessage.CommittedEventReceived message System.String partition Returns Type Description EventProcessedResult ProcessPartitionDeleted(String, CheckpointTag) Declaration EventProcessedResult ProcessPartitionDeleted(string partition, CheckpointTag deletedPosition) Parameters Type Name System.String partition CheckpointTag deletedPosition Returns Type Description EventProcessedResult RecordEventOrder(ResolvedEvent, CheckpointTag, Action) Declaration void RecordEventOrder(ResolvedEvent resolvedEvent, CheckpointTag orderCheckpointTag, Action completed) Parameters Type Name ResolvedEvent resolvedEvent CheckpointTag orderCheckpointTag Action completed"
  },
  "dotnet-api/code/EventStore.ClientAPI.IEventStoreConnectionExtensions.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.IEventStoreConnectionExtensions.html",
    "title": "Class IEventStoreConnectionExtensions | Event Store",
    "keywords": "Class IEventStoreConnectionExtensions Extensions for IEventStoreConnection Inheritance System.Object IEventStoreConnectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public static class IEventStoreConnectionExtensions Methods ConnectToPersistentSubscription(IEventStoreConnection, String, String, Action<EventStorePersistentSubscriptionBase, ResolvedEvent>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean) Subscribes to a persistent subscription(competing consumer) on event store Declaration public static EventStorePersistentSubscriptionBase ConnectToPersistentSubscription(this IEventStoreConnection target, string stream, string groupName, Action<EventStorePersistentSubscriptionBase, ResolvedEvent> eventAppeared, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null, int bufferSize = 10, bool autoAck = true) Parameters Type Name IEventStoreConnection target System.String stream System.String groupName System.Action < EventStorePersistentSubscriptionBase , ResolvedEvent > eventAppeared System.Action < EventStorePersistentSubscriptionBase , SubscriptionDropReason , System.Exception > subscriptionDropped UserCredentials userCredentials System.Int32 bufferSize System.Boolean autoAck Returns Type Description EventStorePersistentSubscriptionBase An EventStorePersistentSubscriptionBase representing the subscription Remarks This will connect you to a persistent subscription group for a stream. The subscription group must first be created with CreatePersistentSubscriptionAsync many connections can connect to the same group and they will be treated as competing consumers within the group. If one connection dies work will be balanced across the rest of the consumers in the group. If you attempt to connect to a group that does not exist you will be given an exception. ConnectToPersistentSubscription(IEventStoreConnection, String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean) Subscribes to a persistent subscription(competing consumer) on event store Declaration public static EventStorePersistentSubscriptionBase ConnectToPersistentSubscription(this IEventStoreConnection target, string stream, string groupName, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task> eventAppeared, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null, int bufferSize = 10, bool autoAck = true) Parameters Type Name IEventStoreConnection target System.String stream System.String groupName System.Func < EventStorePersistentSubscriptionBase , ResolvedEvent , System.Threading.Tasks.Task > eventAppeared System.Action < EventStorePersistentSubscriptionBase , SubscriptionDropReason , System.Exception > subscriptionDropped UserCredentials userCredentials System.Int32 bufferSize System.Boolean autoAck Returns Type Description EventStorePersistentSubscriptionBase An EventStorePersistentSubscriptionBase representing the subscription Remarks This will connect you to a persistent subscription group for a stream. The subscription group must first be created with CreatePersistentSubscriptionAsync many connections can connect to the same group and they will be treated as competing consumers within the group. If one connection dies work will be balanced across the rest of the consumers in the group. If you attempt to connect to a group that does not exist you will be given an exception. ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Action<EventStorePersistentSubscriptionBase, ResolvedEvent>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean) Subscribes to a persistent subscription(competing consumer) on event store Declaration public static Task<EventStorePersistentSubscriptionBase> ConnectToPersistentSubscriptionAsync(this IEventStoreConnection target, string stream, string groupName, Action<EventStorePersistentSubscriptionBase, ResolvedEvent> eventAppeared, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null, int bufferSize = 10, bool autoAck = true) Parameters Type Name IEventStoreConnection target System.String stream System.String groupName System.Action < EventStorePersistentSubscriptionBase , ResolvedEvent > eventAppeared System.Action < EventStorePersistentSubscriptionBase , SubscriptionDropReason , System.Exception > subscriptionDropped UserCredentials userCredentials System.Int32 bufferSize System.Boolean autoAck Returns Type Description System.Threading.Tasks.Task < EventStorePersistentSubscriptionBase > An EventStorePersistentSubscriptionBase representing the subscription Remarks This will connect you to a persistent subscription group for a stream. The subscription group must first be created with CreatePersistentSubscriptionAsync many connections can connect to the same group and they will be treated as competing consumers within the group. If one connection dies work will be balanced across the rest of the consumers in the group. If you attempt to connect to a group that does not exist you will be given an exception. ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean) Subscribes to a persistent subscription(competing consumer) on event store Declaration public static Task<EventStorePersistentSubscriptionBase> ConnectToPersistentSubscriptionAsync(this IEventStoreConnection target, string stream, string groupName, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task> eventAppeared, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null, int bufferSize = 10, bool autoAck = true) Parameters Type Name IEventStoreConnection target System.String stream System.String groupName System.Func < EventStorePersistentSubscriptionBase , ResolvedEvent , System.Threading.Tasks.Task > eventAppeared System.Action < EventStorePersistentSubscriptionBase , SubscriptionDropReason , System.Exception > subscriptionDropped UserCredentials userCredentials System.Int32 bufferSize System.Boolean autoAck Returns Type Description System.Threading.Tasks.Task < EventStorePersistentSubscriptionBase > An EventStorePersistentSubscriptionBase representing the subscription Remarks This will connect you to a persistent subscription group for a stream. The subscription group must first be created with CreatePersistentSubscriptionAsync many connections can connect to the same group and they will be treated as competing consumers within the group. If one connection dies work will be balanced across the rest of the consumers in the group. If you attempt to connect to a group that does not exist you will be given an exception. SubscribeToAllAsync(IEventStoreConnection, Boolean, Action<EventStoreSubscription, ResolvedEvent>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials) Asynchronously subscribes to all events in the Event Store. New events written to the stream while the subscription is active will be pushed to the client. Declaration public static Task<EventStoreSubscription> SubscribeToAllAsync(this IEventStoreConnection target, bool resolveLinkTos, Action<EventStoreSubscription, ResolvedEvent> eventAppeared, Action<EventStoreSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null) Parameters Type Name IEventStoreConnection target System.Boolean resolveLinkTos System.Action < EventStoreSubscription , ResolvedEvent > eventAppeared System.Action < EventStoreSubscription , SubscriptionDropReason , System.Exception > subscriptionDropped UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < EventStoreSubscription > An EventStoreSubscription representing the subscription SubscribeToAllFrom(IEventStoreConnection, Nullable<Position>, CatchUpSubscriptionSettings, Action<EventStoreCatchUpSubscription, ResolvedEvent>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials) Subscribes to a all events. Existing events from lastCheckpoint onwards are read from the Event Store and presented to the user of EventStoreCatchUpSubscription as if they had been pushed. Once the end of the stream is read the subscription is transparently (to the user) switched to push new events as they are written. The action liveProcessingStarted is called when the EventStoreCatchUpSubscription switches from the reading phase to the live subscription phase. Declaration public static EventStoreAllCatchUpSubscription SubscribeToAllFrom(this IEventStoreConnection target, Position? lastCheckpoint, CatchUpSubscriptionSettings settings, Action<EventStoreCatchUpSubscription, ResolvedEvent> eventAppeared, Action<EventStoreCatchUpSubscription> liveProcessingStarted = null, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null) Parameters Type Name IEventStoreConnection target System.Nullable < Position > lastCheckpoint CatchUpSubscriptionSettings settings System.Action < EventStoreCatchUpSubscription , ResolvedEvent > eventAppeared System.Action < EventStoreCatchUpSubscription > liveProcessingStarted System.Action < EventStoreCatchUpSubscription , SubscriptionDropReason , System.Exception > subscriptionDropped UserCredentials userCredentials Returns Type Description EventStoreAllCatchUpSubscription An EventStoreSubscription representing the subscription SubscribeToStreamAsync(IEventStoreConnection, String, Boolean, Action<EventStoreSubscription, ResolvedEvent>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials) Asynchronously subscribes to a single event stream. New events written to the stream while the subscription is active will be pushed to the client. Declaration public static Task<EventStoreSubscription> SubscribeToStreamAsync(this IEventStoreConnection target, string stream, bool resolveLinkTos, Action<EventStoreSubscription, ResolvedEvent> eventAppeared, Action<EventStoreSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null) Parameters Type Name IEventStoreConnection target System.String stream System.Boolean resolveLinkTos System.Action < EventStoreSubscription , ResolvedEvent > eventAppeared System.Action < EventStoreSubscription , SubscriptionDropReason , System.Exception > subscriptionDropped UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < EventStoreSubscription > An EventStoreSubscription representing the subscription SubscribeToStreamFrom(IEventStoreConnection, String, Nullable<Int64>, CatchUpSubscriptionSettings, Action<EventStoreCatchUpSubscription, ResolvedEvent>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials) Subscribes to a single event stream. Existing events from lastCheckpoint onwards are read from the stream and presented to the user of EventStoreCatchUpSubscription as if they had been pushed. Once the end of the stream is read the subscription is transparently (to the user) switched to push new events as they are written. The action liveProcessingStarted is called when the EventStoreCatchUpSubscription switches from the reading phase to the live subscription phase. Declaration public static EventStoreStreamCatchUpSubscription SubscribeToStreamFrom(this IEventStoreConnection target, string stream, long? lastCheckpoint, CatchUpSubscriptionSettings settings, Action<EventStoreCatchUpSubscription, ResolvedEvent> eventAppeared, Action<EventStoreCatchUpSubscription> liveProcessingStarted = null, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null) Parameters Type Name IEventStoreConnection target System.String stream System.Nullable < System.Int64 > lastCheckpoint CatchUpSubscriptionSettings settings System.Action < EventStoreCatchUpSubscription , ResolvedEvent > eventAppeared System.Action < EventStoreCatchUpSubscription > liveProcessingStarted System.Action < EventStoreCatchUpSubscription , SubscriptionDropReason , System.Exception > subscriptionDropped UserCredentials userCredentials Returns Type Description EventStoreStreamCatchUpSubscription An EventStoreSubscription representing the subscription"
  },
  "dotnet-api/code/EventStore.Projections.Core.v8.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.v8.html",
    "title": "Namespace EventStore.Projections.Core.v8 | Event Store",
    "keywords": "Namespace EventStore.Projections.Core.v8 Classes Js1 Js1Exception PreludeScript QueryScript Delegates Js1.CommandHandlerRegisteredDelegate Js1.EnterCancellableRegionDelegate Js1.ExitCancellableRegionDelegate Js1.LoadModuleDelegate Js1.LogDelegate Js1.ReportErrorDelegate Js1.ReverseCommandHandlerDelegate"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedLinkTo.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedLinkTo.html",
    "title": "Class EmittedLinkTo | Event Store",
    "keywords": "Class EmittedLinkTo Inheritance System.Object EmittedEvent EmittedLinkTo Inherited Members EmittedEvent.StreamId EmittedEvent.EventId EmittedEvent.EventType EmittedEvent.CausedByTag EmittedEvent.ExpectedTag EmittedEvent.OnCommitted EmittedEvent.CausedBy EmittedEvent.CorrelationId EmittedEvent.ExtraMetaData() EmittedEvent.SetCausedBy(Guid) EmittedEvent.SetCorrelationId(String) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class EmittedLinkTo : EmittedEvent Constructors EmittedLinkTo(String, Guid, String, CheckpointTag, CheckpointTag, Action<Int64>) Declaration public EmittedLinkTo(string streamId, Guid eventId, string targetStreamId, CheckpointTag causedByTag, CheckpointTag expectedTag, Action<long> onCommitted = null) Parameters Type Name System.String streamId Guid eventId System.String targetStreamId CheckpointTag causedByTag CheckpointTag expectedTag Action < System.Int64 > onCommitted EmittedLinkTo(String, Guid, String, Int32, CheckpointTag, CheckpointTag, String) Declaration public EmittedLinkTo(string streamId, Guid eventId, string targetStreamId, int targetEventNumber, CheckpointTag causedByTag, CheckpointTag expectedTag, string originalStreamId = null) Parameters Type Name System.String streamId Guid eventId System.String targetStreamId System.Int32 targetEventNumber CheckpointTag causedByTag CheckpointTag expectedTag System.String originalStreamId Properties Data Declaration public override string Data { get; } Property Value Type System.String Overrides EmittedEvent.Data IsJson Declaration public override bool IsJson { get; } Property Value Type System.Boolean Overrides EmittedEvent.IsJson Methods IsReady() Declaration public override bool IsReady() Returns Type Description System.Boolean Overrides EmittedEvent.IsReady() SetTargetEventNumber(Int64) Declaration public void SetTargetEventNumber(long eventNumber) Parameters Type Name System.Int64 eventNumber"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IEventReader.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IEventReader.html",
    "title": "Interface IEventReader | Event Store",
    "keywords": "Interface IEventReader Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public interface IEventReader : IDisposable Methods Pause() Declaration void Pause() Resume() Declaration void Resume() SendNotAuthorized() Declaration void SendNotAuthorized()"
  },
  "dotnet-api/code/EventStore.Projections.Core.v8.PreludeScript.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.v8.PreludeScript.html",
    "title": "Class PreludeScript | Event Store",
    "keywords": "Class PreludeScript Inheritance System.Object PreludeScript Namespace : EventStore.Projections.Core.v8 Assembly : EventStore.Projections.Core.dll Syntax public class PreludeScript : IDisposable Constructors PreludeScript(String, String, Func<String, Tuple<String, String>>, Action<Int32, Action>, Action<String, Object[]>) Declaration public PreludeScript(string script, string fileName, Func<string, Tuple<string, string>> getModuleSourceAndFileName, Action<int, Action> cancelCallbackFactory, Action<string, object[]> logger = null) Parameters Type Name System.String script System.String fileName Func < System.String , Tuple < System.String , System.String >> getModuleSourceAndFileName Action < System.Int32 , Action > cancelCallbackFactory Action < System.String , System.Object []> logger Methods CancelTerminateExecution() Declaration public bool CancelTerminateExecution() Returns Type Description System.Boolean Dispose() Declaration public void Dispose() GetHandle() Declaration public IntPtr GetHandle() Returns Type Description IntPtr ScheduleTerminateExecution() Declaration public void ScheduleTerminateExecution()"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.OperationExpiredException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.OperationExpiredException.html",
    "title": "Class OperationExpiredException | Event Store",
    "keywords": "Class OperationExpiredException Exception thrown if an operation expires before it can be scheduled. Inheritance System.Object System.Exception EventStoreConnectionException OperationExpiredException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class OperationExpiredException : EventStoreConnectionException, ISerializable Constructors OperationExpiredException() Constructs a new OperationExpiredException . Declaration public OperationExpiredException() OperationExpiredException(SerializationInfo, StreamingContext) Constructs a new OperationExpiredException . Declaration protected OperationExpiredException(SerializationInfo info, StreamingContext context) Parameters Type Name System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context OperationExpiredException(String) Constructs a new OperationExpiredException . Declaration public OperationExpiredException(string message) Parameters Type Name System.String message OperationExpiredException(String, Exception) Constructs a new OperationExpiredException . Declaration public OperationExpiredException(string message, Exception innerException) Parameters Type Name System.String message System.Exception innerException Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Http.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Http.html",
    "title": "Namespace EventStore.Projections.Core.Services.Http | Event Store",
    "keywords": "Namespace EventStore.Projections.Core.Services.Http Classes ProjectionsController ProjectionsController.ProjectionConfigData ProjectionsController.ReadEventsBody ProjectionsStatisticsHttpFormatted ProjectionStatisticsHttpFormatted"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IProjectionPhaseCheckpointManager.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IProjectionPhaseCheckpointManager.html",
    "title": "Interface IProjectionPhaseCheckpointManager | Event Store",
    "keywords": "Interface IProjectionPhaseCheckpointManager Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public interface IProjectionPhaseCheckpointManager Methods NewCheckpointStarted(CheckpointTag) Declaration void NewCheckpointStarted(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag SetCurrentCheckpointSuggestedWorkItem(CheckpointSuggestedWorkItem) Declaration void SetCurrentCheckpointSuggestedWorkItem(CheckpointSuggestedWorkItem checkpointSuggestedWorkItem) Parameters Type Name CheckpointSuggestedWorkItem checkpointSuggestedWorkItem"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Internal.RegularTimeout.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Internal.RegularTimeout.html",
    "title": "Class ProjectionManagementMessage.Internal.RegularTimeout | Event Store",
    "keywords": "Class ProjectionManagementMessage.Internal.RegularTimeout Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Internal.RegularTimeout Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class RegularTimeout : Message Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Common.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Common.html",
    "title": "Namespace EventStore.Projections.Core.Common | Event Store",
    "keywords": "Namespace EventStore.Projections.Core.Common Classes AllowedWritesInFlight ProjectionConsts"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Management.ProjectionCoreCoordinator.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Management.ProjectionCoreCoordinator.html",
    "title": "Class ProjectionCoreCoordinator | Event Store",
    "keywords": "Class ProjectionCoreCoordinator Inheritance System.Object ProjectionCoreCoordinator Implements EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Internal.RegularTimeout > EventStore.Core.Bus.IHandle < ProjectionSubsystemMessage.StartComponents > EventStore.Core.Bus.IHandle < ProjectionSubsystemMessage.StopComponents > EventStore.Core.Bus.IHandle < ProjectionCoreServiceMessage.SubComponentStarted > EventStore.Core.Bus.IHandle < ProjectionCoreServiceMessage.SubComponentStopped > Namespace : EventStore.Projections.Core.Services.Management Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionCoreCoordinator : object, IHandle<ProjectionManagementMessage.Internal.RegularTimeout>, IHandle<ProjectionSubsystemMessage.StartComponents>, IHandle<ProjectionSubsystemMessage.StopComponents>, IHandle<ProjectionCoreServiceMessage.SubComponentStarted>, IHandle<ProjectionCoreServiceMessage.SubComponentStopped> Constructors ProjectionCoreCoordinator(ProjectionType, TimeoutScheduler[], IPublisher[], IPublisher, IEnvelope) Declaration public ProjectionCoreCoordinator(ProjectionType runProjections, TimeoutScheduler[] timeoutSchedulers, IPublisher[] queues, IPublisher publisher, IEnvelope publishEnvelope) Parameters Type Name EventStore.Common.Options.ProjectionType runProjections TimeoutScheduler [] timeoutSchedulers EventStore.Core.Bus.IPublisher [] queues EventStore.Core.Bus.IPublisher publisher EventStore.Core.Messaging.IEnvelope publishEnvelope Fields ComponentName Declaration public const string ComponentName = null Field Value Type System.String Methods Handle(ProjectionCoreServiceMessage.SubComponentStarted) Declaration public void Handle(ProjectionCoreServiceMessage.SubComponentStarted message) Parameters Type Name ProjectionCoreServiceMessage.SubComponentStarted message Handle(ProjectionCoreServiceMessage.SubComponentStopped) Declaration public void Handle(ProjectionCoreServiceMessage.SubComponentStopped message) Parameters Type Name ProjectionCoreServiceMessage.SubComponentStopped message Handle(ProjectionManagementMessage.Internal.RegularTimeout) Declaration public void Handle(ProjectionManagementMessage.Internal.RegularTimeout message) Parameters Type Name ProjectionManagementMessage.Internal.RegularTimeout message Handle(ProjectionSubsystemMessage.StartComponents) Declaration public void Handle(ProjectionSubsystemMessage.StartComponents message) Parameters Type Name ProjectionSubsystemMessage.StartComponents message Handle(ProjectionSubsystemMessage.StopComponents) Declaration public void Handle(ProjectionSubsystemMessage.StopComponents message) Parameters Type Name ProjectionSubsystemMessage.StopComponents message SetupMessaging(IBus) Declaration public void SetupMessaging(IBus bus) Parameters Type Name EventStore.Core.Bus.IBus bus Implements EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.Projections.Core.v8.QueryScript.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.v8.QueryScript.html",
    "title": "Class QueryScript | Event Store",
    "keywords": "Class QueryScript Inheritance System.Object QueryScript Namespace : EventStore.Projections.Core.v8 Assembly : EventStore.Projections.Core.dll Syntax public class QueryScript : IDisposable Constructors QueryScript(PreludeScript, String, String) Declaration public QueryScript(PreludeScript prelude, string script, string fileName) Parameters Type Name PreludeScript prelude System.String script System.String fileName Methods Dispose() Declaration public void Dispose() GetPartition(String, String[]) Declaration public string GetPartition(string json, string[] other) Parameters Type Name System.String json System.String [] other Returns Type Description System.String GetSourcesDefintion() Declaration public QuerySourcesDefinition GetSourcesDefintion() Returns Type Description QuerySourcesDefinition Initialize() Declaration public void Initialize() InitializeShared() Declaration public void InitializeShared() NotifyCreated(String, String[]) Declaration public string NotifyCreated(string json, string[] other) Parameters Type Name System.String json System.String [] other Returns Type Description System.String NotifyDeleted(String, String[]) Declaration public string NotifyDeleted(string json, string[] other) Parameters Type Name System.String json System.String [] other Returns Type Description System.String Push(String, String[]) Declaration public Tuple<string, string> Push(string json, string[] other) Parameters Type Name System.String json System.String [] other Returns Type Description Tuple < System.String , System.String > SetSharedState(String) Declaration public void SetSharedState(string state) Parameters Type Name System.String state SetState(String) Declaration public void SetState(string state) Parameters Type Name System.String state TransformStateToResult() Declaration public string TransformStateToResult() Returns Type Description System.String Events Emit Declaration public event Action<string> Emit Event Type Type Action < System.String >"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Pause.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Pause.html",
    "title": "Class ReaderSubscriptionManagement.Pause | Event Store",
    "keywords": "Class ReaderSubscriptionManagement.Pause Inheritance System.Object EventStore.Core.Messaging.Message ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage ReaderSubscriptionManagement.Pause Inherited Members ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage.SubscriptionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Pause : ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage Constructors Pause(Guid) Declaration public Pause(Guid subscriptionId) Parameters Type Name Guid subscriptionId Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Http.ProjectionsController.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Http.ProjectionsController.html",
    "title": "Class ProjectionsController | Event Store",
    "keywords": "Class ProjectionsController Inheritance System.Object EventStore.Core.Services.Transport.Http.Controllers.CommunicationController ProjectionsController Implements EventStore.Core.Services.Transport.Http.IHttpController Inherited Members EventStore.Core.Services.Transport.Http.Controllers.CommunicationController.Publish(EventStore.Core.Messaging.Message) EventStore.Core.Services.Transport.Http.Controllers.CommunicationController.Subscribe(EventStore.Core.Services.Transport.Http.IHttpService) EventStore.Core.Services.Transport.Http.Controllers.CommunicationController.SendBadRequest(EventStore.Transport.Http.EntityManagement.HttpEntityManager, System.String) EventStore.Core.Services.Transport.Http.Controllers.CommunicationController.SendTooBig(EventStore.Transport.Http.EntityManagement.HttpEntityManager) EventStore.Core.Services.Transport.Http.Controllers.CommunicationController.SendOk(EventStore.Transport.Http.EntityManagement.HttpEntityManager) EventStore.Core.Services.Transport.Http.Controllers.CommunicationController.Register(EventStore.Core.Services.Transport.Http.IHttpService, System.String, System.String, Action<, >, EventStore.Transport.Http.ICodec[], EventStore.Transport.Http.ICodec[], EventStore.Core.Services.Transport.Http.AuthorizationLevel) EventStore.Core.Services.Transport.Http.Controllers.CommunicationController.RegisterCustom(EventStore.Core.Services.Transport.Http.IHttpService, System.String, System.String, Func<, , >, EventStore.Transport.Http.ICodec[], EventStore.Transport.Http.ICodec[], EventStore.Core.Services.Transport.Http.AuthorizationLevel) EventStore.Core.Services.Transport.Http.Controllers.CommunicationController.RegisterUrlBased(EventStore.Core.Services.Transport.Http.IHttpService, System.String, System.String, EventStore.Core.Services.Transport.Http.AuthorizationLevel, Action<, >) EventStore.Core.Services.Transport.Http.Controllers.CommunicationController.MakeUrl(EventStore.Transport.Http.EntityManagement.HttpEntityManager, System.String) Namespace : EventStore.Projections.Core.Services.Http Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionsController : CommunicationController, IHttpController Constructors ProjectionsController(IHttpForwarder, IPublisher, IPublisher) Declaration public ProjectionsController(IHttpForwarder httpForwarder, IPublisher publisher, IPublisher networkSendQueue) Parameters Type Name EventStore.Core.Services.Transport.Http.IHttpForwarder httpForwarder EventStore.Core.Bus.IPublisher publisher EventStore.Core.Bus.IPublisher networkSendQueue Methods EatException<T>(Func<T>, T) Declaration public static T EatException<T>(Func<T> func, T defaultValue = null) Parameters Type Name Func <T> func T defaultValue Returns Type Description T Type Parameters Name Description T SubscribeCore(IHttpService) Declaration protected override void SubscribeCore(IHttpService service) Parameters Type Name EventStore.Core.Services.Transport.Http.IHttpService service Overrides EventStore.Core.Services.Transport.Http.Controllers.CommunicationController.SubscribeCore(EventStore.Core.Services.Transport.Http.IHttpService) Implements EventStore.Core.Services.Transport.Http.IHttpController"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick.html",
    "title": "Class ProjectionCoreServiceMessage.CoreTick | Event Store",
    "keywords": "Class ProjectionCoreServiceMessage.CoreTick Inheritance System.Object EventStore.Core.Messaging.Message ProjectionCoreServiceMessage.CoreTick Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class CoreTick : Message Constructors CoreTick(Action) Declaration public CoreTick(Action action) Parameters Type Name Action action Properties Action Declaration public Action Action { get; } Property Value Type Action MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IProjectionPhaseCompleter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IProjectionPhaseCompleter.html",
    "title": "Interface IProjectionPhaseCompleter | Event Store",
    "keywords": "Interface IProjectionPhaseCompleter Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public interface IProjectionPhaseCompleter Methods Complete() Declaration void Complete()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.SourceDefinitionBuilder.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.SourceDefinitionBuilder.html",
    "title": "Class SourceDefinitionBuilder | Event Store",
    "keywords": "Class SourceDefinitionBuilder Inheritance System.Object SourceDefinitionBuilder Implements IQuerySources Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public sealed class SourceDefinitionBuilder : object, IQuerySources Constructors SourceDefinitionBuilder() Declaration public SourceDefinitionBuilder() Properties AllStreams Declaration public bool AllStreams { get; } Property Value Type System.Boolean ByCustomPartitions Declaration public bool ByCustomPartitions { get; } Property Value Type System.Boolean ByStreams Declaration public bool ByStreams { get; } Property Value Type System.Boolean Categories Declaration public string[] Categories { get; } Property Value Type System.String [] DefinesFold Declaration public bool DefinesFold { get; } Property Value Type System.Boolean DefinesStateTransform Declaration public bool DefinesStateTransform { get; } Property Value Type System.Boolean Events Declaration public string[] Events { get; } Property Value Type System.String [] HandlesDeletedNotifications Declaration public bool HandlesDeletedNotifications { get; } Property Value Type System.Boolean IncludeLinksOption Declaration public bool IncludeLinksOption { get; } Property Value Type System.Boolean IsBiState Declaration public bool IsBiState { get; } Property Value Type System.Boolean LimitingCommitPosition Declaration public long? LimitingCommitPosition { get; } Property Value Type System.Nullable < System.Int64 > PartitionResultStreamNamePatternOption Declaration public string PartitionResultStreamNamePatternOption { get; } Property Value Type System.String ProcessingLagOption Declaration public int? ProcessingLagOption { get; } Property Value Type System.Nullable < System.Int32 > ProducesResults Declaration public bool ProducesResults { get; } Property Value Type System.Boolean ReorderEventsOption Declaration public bool ReorderEventsOption { get; } Property Value Type System.Boolean ResultStreamNameOption Declaration public string ResultStreamNameOption { get; } Property Value Type System.String Streams Declaration public string[] Streams { get; } Property Value Type System.String [] Methods AllEvents() Declaration public void AllEvents() Build() Declaration public IQuerySources Build() Returns Type Description IQuerySources From(Action<SourceDefinitionBuilder>) Declaration public static IQuerySources From(Action<SourceDefinitionBuilder> configure) Parameters Type Name Action < SourceDefinitionBuilder > configure Returns Type Description IQuerySources FromAll() Declaration public void FromAll() FromCategory(String) Declaration public void FromCategory(string categoryName) Parameters Type Name System.String categoryName FromStream(String) Declaration public void FromStream(string streamName) Parameters Type Name System.String streamName IncludeEvent(String) Declaration public void IncludeEvent(string eventName) Parameters Type Name System.String eventName NoWhen() Declaration public void NoWhen() SetByCustomPartitions() Declaration public void SetByCustomPartitions() SetByStream() Declaration public void SetByStream() SetDefinesStateTransform() Declaration public void SetDefinesStateTransform() SetHandlesStreamDeletedNotifications(Boolean) Declaration public void SetHandlesStreamDeletedNotifications(bool value = true) Parameters Type Name System.Boolean value SetIncludeLinks(Boolean) Declaration public void SetIncludeLinks(bool includeLinks = true) Parameters Type Name System.Boolean includeLinks SetIsBiState(Boolean) Declaration public void SetIsBiState(bool isBiState) Parameters Type Name System.Boolean isBiState SetLimitingCommitPosition(Int64) Declaration public void SetLimitingCommitPosition(long limitingCommitPosition) Parameters Type Name System.Int64 limitingCommitPosition SetOutputState() Declaration public void SetOutputState() SetPartitionResultStreamNamePatternOption(String) Declaration public void SetPartitionResultStreamNamePatternOption(string partitionResultStreamNamePattern) Parameters Type Name System.String partitionResultStreamNamePattern SetProcessingLag(Int32) Declaration public void SetProcessingLag(int processingLag) Parameters Type Name System.Int32 processingLag SetReorderEvents(Boolean) Declaration public void SetReorderEvents(bool reorderEvents) Parameters Type Name System.Boolean reorderEvents SetResultStreamNameOption(String) Declaration public void SetResultStreamNameOption(string resultStreamName) Parameters Type Name System.String resultStreamName Explicit Interface Implementations IQuerySources.AllEvents Declaration bool IQuerySources.AllEvents { get; } Returns Type Description System.Boolean Implements IQuerySources"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IReaderStrategy.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IReaderStrategy.html",
    "title": "Interface IReaderStrategy | Event Store",
    "keywords": "Interface IReaderStrategy Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public interface IReaderStrategy Properties EventFilter Declaration EventFilter EventFilter { get; } Property Value Type EventFilter IsReadingOrderRepeatable Declaration bool IsReadingOrderRepeatable { get; } Property Value Type System.Boolean PositionTagger Declaration PositionTagger PositionTagger { get; } Property Value Type PositionTagger Methods CreatePausedEventReader(Guid, IPublisher, IODispatcher, CheckpointTag, Boolean, Nullable<Int32>) Declaration IEventReader CreatePausedEventReader(Guid eventReaderId, IPublisher publisher, IODispatcher ioDispatcher, CheckpointTag checkpointTag, bool stopOnEof, int? stopAfterNEvents) Parameters Type Name Guid eventReaderId EventStore.Core.Bus.IPublisher publisher EventStore.Core.Helpers.IODispatcher ioDispatcher CheckpointTag checkpointTag System.Boolean stopOnEof System.Nullable < System.Int32 > stopAfterNEvents Returns Type Description IEventReader CreateReaderSubscription(IPublisher, CheckpointTag, Guid, ReaderSubscriptionOptions) Declaration IReaderSubscription CreateReaderSubscription(IPublisher publisher, CheckpointTag fromCheckpointTag, Guid subscriptionId, ReaderSubscriptionOptions readerSubscriptionOptions) Parameters Type Name EventStore.Core.Bus.IPublisher publisher CheckpointTag fromCheckpointTag Guid subscriptionId ReaderSubscriptionOptions readerSubscriptionOptions Returns Type Description IReaderSubscription"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.SetRunAs.SetRemove.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.SetRunAs.SetRemove.html",
    "title": "Enum ProjectionManagementMessage.Command.SetRunAs.SetRemove | Event Store",
    "keywords": "Enum ProjectionManagementMessage.Command.SetRunAs.SetRemove Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public enum SetRemove : int Fields Name Description Remove Set Extension Methods EnumExtensions.EnumValueName<ProjectionManagementMessage.Command.SetRunAs.SetRemove>()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Utils.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Utils.html",
    "title": "Namespace EventStore.Projections.Core.Utils | Event Store",
    "keywords": "Namespace EventStore.Projections.Core.Utils Classes EncodingExtensions EnumExtensions Logging"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Faulted.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Faulted.html",
    "title": "Class CoreProjectionStatusMessage.Faulted | Event Store",
    "keywords": "Class CoreProjectionStatusMessage.Faulted Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionStatusMessage.CoreProjectionStatusMessageBase CoreProjectionStatusMessage.Faulted Inherited Members CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Faulted : CoreProjectionStatusMessage.CoreProjectionStatusMessageBase Constructors Faulted(Guid, String) Declaration public Faulted(Guid projectionId, string faultedReason) Parameters Type Name Guid projectionId System.String faultedReason Properties FaultedReason Declaration public string FaultedReason { get; } Property Value Type System.String MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionStatusMessage.CoreProjectionStatusMessageBase.MsgTypeId"
  },
  "dotnet-api/code/EventStore.ClientAPI.ClientOperations.PersistentSubscriptionDeletedException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ClientOperations.PersistentSubscriptionDeletedException.html",
    "title": "Class PersistentSubscriptionDeletedException | Event Store",
    "keywords": "Class PersistentSubscriptionDeletedException Thrown when the persistent subscription has been deleted to subscribers connected to it Inheritance System.Object System.Exception PersistentSubscriptionDeletedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.ClientOperations Assembly : EventStore.ClientAPI.dll Syntax public class PersistentSubscriptionDeletedException : Exception, ISerializable Constructors PersistentSubscriptionDeletedException() Constructs a PersistentSubscriptionDeletedException Declaration public PersistentSubscriptionDeletedException() Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.PersistedProjectionConfig.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.PersistedProjectionConfig.html",
    "title": "Class PersistedProjectionConfig | Event Store",
    "keywords": "Class PersistedProjectionConfig Inheritance System.Object PersistedProjectionConfig Namespace : EventStore.Projections.Core.Messages.Persisted.Commands Assembly : EventStore.Projections.Core.dll Syntax public sealed class PersistedProjectionConfig : object Constructors PersistedProjectionConfig() Declaration public PersistedProjectionConfig() PersistedProjectionConfig(ProjectionConfig) Declaration public PersistedProjectionConfig(ProjectionConfig config) Parameters Type Name ProjectionConfig config Fields CheckpointAfterMs Declaration public int CheckpointAfterMs Field Value Type System.Int32 CheckpointHandledThreshold Declaration public int CheckpointHandledThreshold Field Value Type System.Int32 CheckpointsEnabled Declaration public bool CheckpointsEnabled Field Value Type System.Boolean CheckpointUnhandledBytesThreshold Declaration public int CheckpointUnhandledBytesThreshold Field Value Type System.Int32 CreateTempStreams Declaration public bool CreateTempStreams Field Value Type System.Boolean EmitEventEnabled Declaration public bool EmitEventEnabled Field Value Type System.Boolean MaximumAllowedWritesInFlight Declaration public int MaximumAllowedWritesInFlight Field Value Type System.Int32 MaxWriteBatchLength Declaration public int MaxWriteBatchLength Field Value Type System.Int32 PendingEventsThreshold Declaration public int PendingEventsThreshold Field Value Type System.Int32 RunAs Declaration public string RunAs Field Value Type System.String RunAsRoles Declaration public string[] RunAsRoles Field Value Type System.String [] StopOnEof Declaration public bool StopOnEof Field Value Type System.Boolean TrackEmittedStreams Declaration public bool TrackEmittedStreams Field Value Type System.Boolean Methods ToConfig() Declaration public ProjectionConfig ToConfig() Returns Type Description ProjectionConfig"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CheckpointTagJsonConverter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CheckpointTagJsonConverter.html",
    "title": "Class CheckpointTagJsonConverter | Event Store",
    "keywords": "Class CheckpointTagJsonConverter Inheritance System.Object CheckpointTagJsonConverter Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class CheckpointTagJsonConverter : JsonConverter Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Type objectType Returns Type Description System.Boolean ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name JsonReader reader Type objectType System.Object existingValue JsonSerializer serializer Returns Type Description System.Object WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name JsonWriter writer System.Object value JsonSerializer serializer"
  },
  "dotnet-api/code/EventStore.ClientAPI.ClientConnectionEventArgs.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ClientConnectionEventArgs.html",
    "title": "Class ClientConnectionEventArgs | Event Store",
    "keywords": "Class ClientConnectionEventArgs Event Arguments for the event raised when an IEventStoreConnection is connected to or disconnected from an Event Store server. Inheritance System.Object System.EventArgs ClientConnectionEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class ClientConnectionEventArgs : EventArgs Constructors ClientConnectionEventArgs(IEventStoreConnection, IPEndPoint) Constructs a new instance of ClientConnectionEventArgs . Declaration public ClientConnectionEventArgs(IEventStoreConnection connection, IPEndPoint remoteEndPoint) Parameters Type Name IEventStoreConnection connection System.Net.IPEndPoint remoteEndPoint Properties Connection The IEventStoreConnection responsible for raising the event. Declaration public IEventStoreConnection Connection { get; } Property Value Type IEventStoreConnection RemoteEndPoint The endpoint of the Event Store server to or from which the connection was connected or disconnected. Declaration public IPEndPoint RemoteEndPoint { get; } Property Value Type System.Net.IPEndPoint"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.ReadWrite.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.ReadWrite.html",
    "title": "Enum ReadWrite | Event Store",
    "keywords": "Enum ReadWrite Namespace : EventStore.Projections.Core.Services Assembly : EventStore.Projections.Core.dll Syntax public enum ReadWrite : int Fields Name Description Read Write Extension Methods EnumExtensions.EnumValueName<ReadWrite>()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.PreTaggedPositionTagger.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.PreTaggedPositionTagger.html",
    "title": "Class PreTaggedPositionTagger | Event Store",
    "keywords": "Class PreTaggedPositionTagger Inheritance System.Object PositionTagger PreTaggedPositionTagger Inherited Members PositionTagger.Phase Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class PreTaggedPositionTagger : PositionTagger Constructors PreTaggedPositionTagger(Int32, CheckpointTag) Declaration public PreTaggedPositionTagger(int phase, CheckpointTag zeroCheckpointTag) Parameters Type Name System.Int32 phase CheckpointTag zeroCheckpointTag Methods AdjustTag(CheckpointTag) Declaration public override CheckpointTag AdjustTag(CheckpointTag tag) Parameters Type Name CheckpointTag tag Returns Type Description CheckpointTag Overrides PositionTagger.AdjustTag(CheckpointTag) IsCompatible(CheckpointTag) Declaration public override bool IsCompatible(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag Returns Type Description System.Boolean Overrides PositionTagger.IsCompatible(CheckpointTag) IsMessageAfterCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public override bool IsMessageAfterCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.CommittedEventDistributed committedEvent Returns Type Description System.Boolean Overrides PositionTagger.IsMessageAfterCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.CommittedEventDistributed committedEvent Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionDeleted) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.EventReaderPartitionDeleted partitionDeleted) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.EventReaderPartitionDeleted partitionDeleted Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionDeleted) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionEof) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.EventReaderPartitionEof partitionEof) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.EventReaderPartitionEof partitionEof Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionEof) MakeZeroCheckpointTag() Declaration public override CheckpointTag MakeZeroCheckpointTag() Returns Type Description CheckpointTag Overrides PositionTagger.MakeZeroCheckpointTag()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Management.ProjectionCoreResponseWriter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Management.ProjectionCoreResponseWriter.html",
    "title": "Class ProjectionCoreResponseWriter | Event Store",
    "keywords": "Class ProjectionCoreResponseWriter Inheritance System.Object ProjectionCoreResponseWriter Implements EventStore.Core.Bus.IHandle < CoreProjectionStatusMessage.Faulted > EventStore.Core.Bus.IHandle < CoreProjectionStatusMessage.Prepared > EventStore.Core.Bus.IHandle < CoreProjectionStatusMessage.Started > EventStore.Core.Bus.IHandle < CoreProjectionStatusMessage.StatisticsReport > EventStore.Core.Bus.IHandle < CoreProjectionStatusMessage.Stopped > EventStore.Core.Bus.IHandle < CoreProjectionStatusMessage.StateReport > EventStore.Core.Bus.IHandle < CoreProjectionStatusMessage.ResultReport > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.Abort > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.Disable > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.Enable > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.GetQuery > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.GetResult > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.GetState > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.GetStatistics > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.Post > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.PostBatch > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.Reset > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.SetRunAs > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.UpdateQuery > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Command.Delete > EventStore.Core.Bus.IHandle < ProjectionCoreServiceMessage.StartCore > Namespace : EventStore.Projections.Core.Services.Management Assembly : EventStore.Projections.Core.dll Syntax public sealed class ProjectionCoreResponseWriter : object, IHandle<CoreProjectionStatusMessage.Faulted>, IHandle<CoreProjectionStatusMessage.Prepared>, IHandle<CoreProjectionStatusMessage.Started>, IHandle<CoreProjectionStatusMessage.StatisticsReport>, IHandle<CoreProjectionStatusMessage.Stopped>, IHandle<CoreProjectionStatusMessage.StateReport>, IHandle<CoreProjectionStatusMessage.ResultReport>, IHandle<ProjectionManagementMessage.Command.Abort>, IHandle<ProjectionManagementMessage.Command.Disable>, IHandle<ProjectionManagementMessage.Command.Enable>, IHandle<ProjectionManagementMessage.Command.GetQuery>, IHandle<ProjectionManagementMessage.Command.GetResult>, IHandle<ProjectionManagementMessage.Command.GetState>, IHandle<ProjectionManagementMessage.Command.GetStatistics>, IHandle<ProjectionManagementMessage.Command.Post>, IHandle<ProjectionManagementMessage.Command.PostBatch>, IHandle<ProjectionManagementMessage.Command.Reset>, IHandle<ProjectionManagementMessage.Command.SetRunAs>, IHandle<ProjectionManagementMessage.Command.UpdateQuery>, IHandle<ProjectionManagementMessage.Command.Delete>, IHandle<ProjectionCoreServiceMessage.StartCore> Constructors ProjectionCoreResponseWriter(IResponseWriter) Declaration public ProjectionCoreResponseWriter(IResponseWriter responseWriter) Parameters Type Name IResponseWriter responseWriter Methods Handle(CoreProjectionStatusMessage.Faulted) Declaration public void Handle(CoreProjectionStatusMessage.Faulted message) Parameters Type Name CoreProjectionStatusMessage.Faulted message Handle(CoreProjectionStatusMessage.Prepared) Declaration public void Handle(CoreProjectionStatusMessage.Prepared message) Parameters Type Name CoreProjectionStatusMessage.Prepared message Handle(CoreProjectionStatusMessage.ResultReport) Declaration public void Handle(CoreProjectionStatusMessage.ResultReport message) Parameters Type Name CoreProjectionStatusMessage.ResultReport message Handle(CoreProjectionStatusMessage.Started) Declaration public void Handle(CoreProjectionStatusMessage.Started message) Parameters Type Name CoreProjectionStatusMessage.Started message Handle(CoreProjectionStatusMessage.StateReport) Declaration public void Handle(CoreProjectionStatusMessage.StateReport message) Parameters Type Name CoreProjectionStatusMessage.StateReport message Handle(CoreProjectionStatusMessage.StatisticsReport) Declaration public void Handle(CoreProjectionStatusMessage.StatisticsReport message) Parameters Type Name CoreProjectionStatusMessage.StatisticsReport message Handle(CoreProjectionStatusMessage.Stopped) Declaration public void Handle(CoreProjectionStatusMessage.Stopped message) Parameters Type Name CoreProjectionStatusMessage.Stopped message Handle(ProjectionCoreServiceMessage.StartCore) Declaration public void Handle(ProjectionCoreServiceMessage.StartCore message) Parameters Type Name ProjectionCoreServiceMessage.StartCore message Handle(ProjectionManagementMessage.Command.Abort) Declaration public void Handle(ProjectionManagementMessage.Command.Abort message) Parameters Type Name ProjectionManagementMessage.Command.Abort message Handle(ProjectionManagementMessage.Command.Delete) Declaration public void Handle(ProjectionManagementMessage.Command.Delete message) Parameters Type Name ProjectionManagementMessage.Command.Delete message Handle(ProjectionManagementMessage.Command.Disable) Declaration public void Handle(ProjectionManagementMessage.Command.Disable message) Parameters Type Name ProjectionManagementMessage.Command.Disable message Handle(ProjectionManagementMessage.Command.Enable) Declaration public void Handle(ProjectionManagementMessage.Command.Enable message) Parameters Type Name ProjectionManagementMessage.Command.Enable message Handle(ProjectionManagementMessage.Command.GetQuery) Declaration public void Handle(ProjectionManagementMessage.Command.GetQuery message) Parameters Type Name ProjectionManagementMessage.Command.GetQuery message Handle(ProjectionManagementMessage.Command.GetResult) Declaration public void Handle(ProjectionManagementMessage.Command.GetResult message) Parameters Type Name ProjectionManagementMessage.Command.GetResult message Handle(ProjectionManagementMessage.Command.GetState) Declaration public void Handle(ProjectionManagementMessage.Command.GetState message) Parameters Type Name ProjectionManagementMessage.Command.GetState message Handle(ProjectionManagementMessage.Command.GetStatistics) Declaration public void Handle(ProjectionManagementMessage.Command.GetStatistics message) Parameters Type Name ProjectionManagementMessage.Command.GetStatistics message Handle(ProjectionManagementMessage.Command.Post) Declaration public void Handle(ProjectionManagementMessage.Command.Post message) Parameters Type Name ProjectionManagementMessage.Command.Post message Handle(ProjectionManagementMessage.Command.PostBatch) Declaration public void Handle(ProjectionManagementMessage.Command.PostBatch message) Parameters Type Name ProjectionManagementMessage.Command.PostBatch message Handle(ProjectionManagementMessage.Command.Reset) Declaration public void Handle(ProjectionManagementMessage.Command.Reset message) Parameters Type Name ProjectionManagementMessage.Command.Reset message Handle(ProjectionManagementMessage.Command.SetRunAs) Declaration public void Handle(ProjectionManagementMessage.Command.SetRunAs message) Parameters Type Name ProjectionManagementMessage.Command.SetRunAs message Handle(ProjectionManagementMessage.Command.UpdateQuery) Declaration public void Handle(ProjectionManagementMessage.Command.UpdateQuery message) Parameters Type Name ProjectionManagementMessage.Command.UpdateQuery message Implements EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.ClientAPI.PersistentSubscriptions.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.PersistentSubscriptions.html",
    "title": "Namespace EventStore.ClientAPI.PersistentSubscriptions | Event Store",
    "keywords": "Namespace EventStore.ClientAPI.PersistentSubscriptions Classes PersistentSubscriptionConfigDetails Configuration details of a persistent subscription. PersistentSubscriptionConnectionDetails Details of a connection for a persistent subscription. PersistentSubscriptionDetails Details for a Persistent Subscription. PersistentSubscriptionsManager API for managing persistent subscriptions in Event Store through C# code. Communicates with Event Store over the RESTful API."
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.StreamEventReader.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.StreamEventReader.html",
    "title": "Class StreamEventReader | Event Store",
    "keywords": "Class StreamEventReader Inheritance System.Object EventReader StreamEventReader Implements IEventReader IDisposable EventStore.Core.Bus.IHandle < EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Internal.ReadTimeout > Inherited Members EventReader.EventReaderCorrelationId EventReader._publisher EventReader._stopOnEof EventReader._disposed EventReader.PauseRequested EventReader.Paused EventReader.ReadAs EventReader.Resume() EventReader.Pause() EventReader.Dispose() EventReader.SendEof() EventReader.SendPartitionEof(String, CheckpointTag) EventReader.SendPartitionDeleted_WhenReadingDataStream(String, Nullable<Int64>, Nullable<TFPos>, Nullable<TFPos>, String, Nullable<Int32>, CheckpointTag) EventReader.SendNotAuthorized() EventReader.GetLastCommitPositionFrom(ClientMessage.ReadStreamEventsForwardCompleted) EventReader.PauseOrContinueProcessing() EventReader.NotifyIfStarting(Int64) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class StreamEventReader : EventReader, IEventReader, IDisposable, IHandle<ClientMessage.ReadStreamEventsForwardCompleted>, IHandle<ProjectionManagementMessage.Internal.ReadTimeout> Constructors StreamEventReader(IPublisher, Guid, IPrincipal, String, Int64, ITimeProvider, Boolean, Boolean, Boolean) Declaration public StreamEventReader(IPublisher publisher, Guid eventReaderCorrelationId, IPrincipal readAs, string streamName, long fromSequenceNumber, ITimeProvider timeProvider, bool resolveLinkTos, bool produceStreamDeletes, bool stopOnEof = false) Parameters Type Name EventStore.Core.Bus.IPublisher publisher Guid eventReaderCorrelationId IPrincipal readAs System.String streamName System.Int64 fromSequenceNumber EventStore.Core.Services.TimerService.ITimeProvider timeProvider System.Boolean resolveLinkTos System.Boolean produceStreamDeletes System.Boolean stopOnEof Methods AreEventsRequested() Declaration protected override bool AreEventsRequested() Returns Type Description System.Boolean Overrides EventReader.AreEventsRequested() Handle(ClientMessage.ReadStreamEventsForwardCompleted) Declaration public void Handle(ClientMessage.ReadStreamEventsForwardCompleted message) Parameters Type Name EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted message Handle(ProjectionManagementMessage.Internal.ReadTimeout) Declaration public void Handle(ProjectionManagementMessage.Internal.ReadTimeout message) Parameters Type Name ProjectionManagementMessage.Internal.ReadTimeout message RequestEvents() Declaration protected override void RequestEvents() Overrides EventReader.RequestEvents() Implements IEventReader IDisposable EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.ClientAPI.PersistentSubscriptionNakEventAction.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.PersistentSubscriptionNakEventAction.html",
    "title": "Enum PersistentSubscriptionNakEventAction | Event Store",
    "keywords": "Enum PersistentSubscriptionNakEventAction Actions to be taken by server in the case of a client NAK Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public enum PersistentSubscriptionNakEventAction Fields Name Description Park Park message do not resend. Put on poison queue Retry Explicitly retry the message. Skip Skip this message do not resend do not put in poison queue Stop Stop the subscription. Unknown Client unknown on action. Let server decide Extension Methods EnumExtensions.EnumValueName<PersistentSubscriptionNakEventAction>()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.PartitionStateUpdateManager.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.PartitionStateUpdateManager.html",
    "title": "Class PartitionStateUpdateManager | Event Store",
    "keywords": "Class PartitionStateUpdateManager Inheritance System.Object PartitionStateUpdateManager Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class PartitionStateUpdateManager : object Constructors PartitionStateUpdateManager(ProjectionNamesBuilder) Declaration public PartitionStateUpdateManager(ProjectionNamesBuilder namingBuilder) Parameters Type Name ProjectionNamesBuilder namingBuilder Methods EmitEvents(IEventWriter) Declaration public void EmitEvents(IEventWriter eventWriter) Parameters Type Name IEventWriter eventWriter PartitionCompleted(String) Declaration public void PartitionCompleted(string partition) Parameters Type Name System.String partition StateUpdated(String, PartitionState, CheckpointTag) Declaration public void StateUpdated(string partition, PartitionState state, CheckpointTag basedOn) Parameters Type Name System.String partition PartitionState state CheckpointTag basedOn"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.Reset.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.Reset.html",
    "title": "Class ProjectionManagementMessage.Command.Reset | Event Store",
    "keywords": "Class ProjectionManagementMessage.Command.Reset Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Command.ControlMessage ProjectionManagementMessage.Command.Reset Inherited Members ProjectionManagementMessage.Command.ControlMessage.RunAs ProjectionManagementMessage.Command.ControlMessage.Envelope EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Reset : ProjectionManagementMessage.Command.ControlMessage Constructors Reset(IEnvelope, String, ProjectionManagementMessage.RunAs) Declaration public Reset(IEnvelope envelope, string name, ProjectionManagementMessage.RunAs runAs) Parameters Type Name EventStore.Core.Messaging.IEnvelope envelope System.String name ProjectionManagementMessage.RunAs runAs Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ProjectionManagementMessage.Command.ControlMessage.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.PhasePositionTagger.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.PhasePositionTagger.html",
    "title": "Class PhasePositionTagger | Event Store",
    "keywords": "Class PhasePositionTagger Inheritance System.Object PositionTagger PhasePositionTagger Inherited Members PositionTagger.Phase Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class PhasePositionTagger : PositionTagger Constructors PhasePositionTagger(Int32) Declaration public PhasePositionTagger(int phase) Parameters Type Name System.Int32 phase Methods AdjustTag(CheckpointTag) Declaration public override CheckpointTag AdjustTag(CheckpointTag tag) Parameters Type Name CheckpointTag tag Returns Type Description CheckpointTag Overrides PositionTagger.AdjustTag(CheckpointTag) IsCompatible(CheckpointTag) Declaration public override bool IsCompatible(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag Returns Type Description System.Boolean Overrides PositionTagger.IsCompatible(CheckpointTag) IsMessageAfterCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public override bool IsMessageAfterCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.CommittedEventDistributed committedEvent Returns Type Description System.Boolean Overrides PositionTagger.IsMessageAfterCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.CommittedEventDistributed committedEvent Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionDeleted) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.EventReaderPartitionDeleted partitionDeleted) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.EventReaderPartitionDeleted partitionDeleted Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionDeleted) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionEof) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.EventReaderPartitionEof partitionEof) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.EventReaderPartitionEof partitionEof Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionEof) MakeZeroCheckpointTag() Declaration public override CheckpointTag MakeZeroCheckpointTag() Returns Type Description CheckpointTag Overrides PositionTagger.MakeZeroCheckpointTag()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Management.SerializedRunAs.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Management.SerializedRunAs.html",
    "title": "Class SerializedRunAs | Event Store",
    "keywords": "Class SerializedRunAs Inheritance System.Object SerializedRunAs Namespace : EventStore.Projections.Core.Services.Management Assembly : EventStore.Projections.Core.dll Syntax public class SerializedRunAs : object Properties Name Declaration public string Name { get; set; } Property Value Type System.String Roles Declaration public string[] Roles { get; set; } Property Value Type System.String [] Methods DeserializePrincipal(SerializedRunAs) Declaration public static IPrincipal DeserializePrincipal(SerializedRunAs runAs) Parameters Type Name SerializedRunAs runAs Returns Type Description IPrincipal SerializePrincipal(ProjectionManagementMessage.RunAs) Declaration public static SerializedRunAs SerializePrincipal(ProjectionManagementMessage.RunAs runAs) Parameters Type Name ProjectionManagementMessage.RunAs runAs Returns Type Description SerializedRunAs Operators Implicit(ProjectionManagementMessage.RunAs to SerializedRunAs) Declaration public static implicit operator SerializedRunAs(ProjectionManagementMessage.RunAs runAs) Parameters Type Name ProjectionManagementMessage.RunAs runAs Returns Type Description SerializedRunAs Implicit(SerializedRunAs to ProjectionManagementMessage.RunAs) Declaration public static implicit operator ProjectionManagementMessage.RunAs(SerializedRunAs runAs) Parameters Type Name SerializedRunAs runAs Returns Type Description ProjectionManagementMessage.RunAs"
  },
  "dotnet-api/code/EventStore.Projections.Core.ProjectionCoreWorkersNode.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.ProjectionCoreWorkersNode.html",
    "title": "Class ProjectionCoreWorkersNode | Event Store",
    "keywords": "Class ProjectionCoreWorkersNode Inheritance System.Object ProjectionCoreWorkersNode Namespace : EventStore.Projections.Core Assembly : EventStore.Projections.Core.dll Syntax public static class ProjectionCoreWorkersNode : object Methods CreateCoreWorkers(StandardComponents, ProjectionsStandardComponents) Declaration public static Dictionary<Guid, IQueuedHandler> CreateCoreWorkers(StandardComponents standardComponents, ProjectionsStandardComponents projectionsStandardComponents) Parameters Type Name EventStore.Core.StandardComponents standardComponents ProjectionsStandardComponents projectionsStandardComponents Returns Type Description Dictionary < Guid , EventStore.Core.Bus.IQueuedHandler > CreateTimeoutSchedulers(Int32) Declaration public static TimeoutScheduler[] CreateTimeoutSchedulers(int count) Parameters Type Name System.Int32 count Returns Type Description TimeoutScheduler []"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Management.IResponseWriter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Management.IResponseWriter.html",
    "title": "Interface IResponseWriter | Event Store",
    "keywords": "Interface IResponseWriter Namespace : EventStore.Projections.Core.Services.Management Assembly : EventStore.Projections.Core.dll Syntax public interface IResponseWriter Methods PublishCommand(String, Object) Declaration void PublishCommand(string command, object body) Parameters Type Name System.String command System.Object body Reset() Declaration void Reset()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase.html",
    "title": "Class EventReaderSubscriptionMessageBase | Event Store",
    "keywords": "Class EventReaderSubscriptionMessageBase Inheritance System.Object EventStore.Core.Messaging.Message EventReaderSubscriptionMessageBase EventReaderSubscriptionMessage.CheckpointSuggested EventReaderSubscriptionMessage.CommittedEventReceived EventReaderSubscriptionMessage.EofReached EventReaderSubscriptionMessage.Failed EventReaderSubscriptionMessage.NotAuthorized EventReaderSubscriptionMessage.PartitionDeleted EventReaderSubscriptionMessage.PartitionEofReached EventReaderSubscriptionMessage.ProgressChanged EventReaderSubscriptionMessage.ReaderAssignedReader EventReaderSubscriptionMessage.SubscriptionStarted Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public abstract class EventReaderSubscriptionMessageBase : Message Properties CheckpointTag Declaration public CheckpointTag CheckpointTag { get; } Property Value Type CheckpointTag MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId Progress Declaration public float Progress { get; } Property Value Type System.Single Source Declaration public object Source { get; } Property Value Type System.Object SubscriptionId Declaration public Guid SubscriptionId { get; } Property Value Type Guid SubscriptionMessageSequenceNumber Declaration public long SubscriptionMessageSequenceNumber { get; } Property Value Type System.Int64"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.Enable.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.Enable.html",
    "title": "Class ProjectionManagementMessage.Command.Enable | Event Store",
    "keywords": "Class ProjectionManagementMessage.Command.Enable Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Command.ControlMessage ProjectionManagementMessage.Command.Enable Inherited Members ProjectionManagementMessage.Command.ControlMessage.RunAs ProjectionManagementMessage.Command.ControlMessage.Envelope EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Enable : ProjectionManagementMessage.Command.ControlMessage Constructors Enable(IEnvelope, String, ProjectionManagementMessage.RunAs) Declaration public Enable(IEnvelope envelope, string name, ProjectionManagementMessage.RunAs runAs) Parameters Type Name EventStore.Core.Messaging.IEnvelope envelope System.String name ProjectionManagementMessage.RunAs runAs Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ProjectionManagementMessage.Command.ControlMessage.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.ILogger.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ILogger.html",
    "title": "Interface ILogger | Event Store",
    "keywords": "Interface ILogger Simple abstraction of a logger. Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public interface ILogger Remarks You can pass your own logging abstractions into the Event Store Client API. Just pass in your own implementation of ILogger when constructing your client connection. Methods Debug(Exception, String, Object[]) Writes a debug message to the logger Declaration void Debug(Exception ex, string format, params object[] args) Parameters Type Name System.Exception ex System.String format System.Object [] args Debug(String, Object[]) Writes a debug message to the logger Declaration void Debug(string format, params object[] args) Parameters Type Name System.String format System.Object [] args Error(Exception, String, Object[]) Writes an error to the logger Declaration void Error(Exception ex, string format, params object[] args) Parameters Type Name System.Exception ex System.String format System.Object [] args Error(String, Object[]) Writes an error to the logger Declaration void Error(string format, params object[] args) Parameters Type Name System.String format System.Object [] args Info(Exception, String, Object[]) Writes an information message to the logger Declaration void Info(Exception ex, string format, params object[] args) Parameters Type Name System.Exception ex System.String format System.Object [] args Info(String, Object[]) Writes an information message to the logger Declaration void Info(string format, params object[] args) Parameters Type Name System.String format System.Object [] args"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaders.Feeds.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaders.Feeds.html",
    "title": "Namespace EventStore.Projections.Core.Messages.EventReaders.Feeds | Event Store",
    "keywords": "Namespace EventStore.Projections.Core.Messages.EventReaders.Feeds Classes FeedReaderMessage FeedReaderMessage.FeedPage FeedReaderMessage.FeedReaderMessageBase FeedReaderMessage.ReadPage Enums FeedReaderMessage.FeedPage.ErrorStatus"
  },
  "dotnet-api/code/EventStore.ClientAPI.ResolvedEvent.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ResolvedEvent.html",
    "title": "Struct ResolvedEvent | Event Store",
    "keywords": "Struct ResolvedEvent A structure representing a single event or an resolved link event. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public struct ResolvedEvent : IResolvedEvent Fields Event The event, or the resolved link event if this ResolvedEvent is a link event. Declaration public readonly RecordedEvent Event Field Value Type RecordedEvent Link The link event if this ResolvedEvent is a link event. Declaration public readonly RecordedEvent Link Field Value Type RecordedEvent OriginalPosition The logical position of the OriginalEvent . Declaration public readonly Position? OriginalPosition Field Value Type System.Nullable < Position > Properties IsResolved Indicates whether this ResolvedEvent is a resolved link event. Declaration public bool IsResolved { get; } Property Value Type System.Boolean OriginalEvent Returns the event that was read or which triggered the subscription. If this ResolvedEvent represents a link event, the Link will be the OriginalEvent , otherwise it will be the event. Declaration public RecordedEvent OriginalEvent { get; } Property Value Type RecordedEvent OriginalEventNumber The event number in the stream of the OriginalEvent . Declaration public long OriginalEventNumber { get; } Property Value Type System.Int64 OriginalStreamId The stream name of the OriginalEvent . Declaration public string OriginalStreamId { get; } Property Value Type System.String Extension Methods EnumExtensions.EnumValueName<T>(T)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.NoopStatePartitionSelector.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.NoopStatePartitionSelector.html",
    "title": "Class NoopStatePartitionSelector | Event Store",
    "keywords": "Class NoopStatePartitionSelector Inheritance System.Object StatePartitionSelector NoopStatePartitionSelector Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class NoopStatePartitionSelector : StatePartitionSelector Methods EventReaderBasePartitionDeletedIsSupported() Declaration public override bool EventReaderBasePartitionDeletedIsSupported() Returns Type Description System.Boolean Overrides StatePartitionSelector.EventReaderBasePartitionDeletedIsSupported() GetStatePartition(EventReaderSubscriptionMessage.CommittedEventReceived) Declaration public override string GetStatePartition(EventReaderSubscriptionMessage.CommittedEventReceived event) Parameters Type Name EventReaderSubscriptionMessage.CommittedEventReceived event Returns Type Description System.String Overrides StatePartitionSelector.GetStatePartition(EventReaderSubscriptionMessage.CommittedEventReceived)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProjectionNamesBuilder.StandardProjections.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProjectionNamesBuilder.StandardProjections.html",
    "title": "Class ProjectionNamesBuilder.StandardProjections | Event Store",
    "keywords": "Class ProjectionNamesBuilder.StandardProjections Inheritance System.Object ProjectionNamesBuilder.StandardProjections Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public static class StandardProjections : object Fields EventByCategoryStandardProjection Declaration public const string EventByCategoryStandardProjection = null Field Value Type System.String EventByCorrIdStandardProjection Declaration public const string EventByCorrIdStandardProjection = null Field Value Type System.String EventByTypeStandardProjection Declaration public const string EventByTypeStandardProjection = null Field Value Type System.String StreamByCategoryStandardProjection Declaration public const string StreamByCategoryStandardProjection = null Field Value Type System.String StreamsStandardProjection Declaration public const string StreamsStandardProjection = null Field Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.IEndPointDiscoverer.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.IEndPointDiscoverer.html",
    "title": "Interface IEndPointDiscoverer | Event Store",
    "keywords": "Interface IEndPointDiscoverer Represents a way of discovering cluster endpoints. This could be through gossip, consul, text files, etc Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public interface IEndPointDiscoverer Methods DiscoverAsync(IPEndPoint) Called to discover a new System.Net.IPEndPoint Declaration Task<NodeEndPoints> DiscoverAsync(IPEndPoint failedTcpEndPoint) Parameters Type Name System.Net.IPEndPoint failedTcpEndPoint Returns Type Description System.Threading.Tasks.Task < NodeEndPoints >"
  },
  "dotnet-api/code/EventStore.ClientAPI.Projections.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Projections.html",
    "title": "Namespace EventStore.ClientAPI.Projections | Event Store",
    "keywords": "Namespace EventStore.ClientAPI.Projections Classes ProjectionConfig Provides the configuration for a projection. ProjectionDetails Provides the details for a projection. ProjectionsManager API for managing projections in the Event Store through C# code. Communicates with the Event Store over the RESTful API. QueryManager API for executing queries in the Event Store through C# code. Communicates with the Event Store over the RESTful API."
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionCheckpointWriterMessage.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionCheckpointWriterMessage.html",
    "title": "Class CoreProjectionCheckpointWriterMessage | Event Store",
    "keywords": "Class CoreProjectionCheckpointWriterMessage Inheritance System.Object CoreProjectionCheckpointWriterMessage Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public static class CoreProjectionCheckpointWriterMessage : object"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IResultWriter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IResultWriter.html",
    "title": "Interface IResultWriter | Event Store",
    "keywords": "Interface IResultWriter Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public interface IResultWriter Methods AccountPartition(EventProcessedResult) Declaration void AccountPartition(EventProcessedResult result) Parameters Type Name EventProcessedResult result EventsEmitted(EmittedEventEnvelope[], Guid, String) Declaration void EventsEmitted(EmittedEventEnvelope[] scheduledWrites, Guid causedBy, string correlationId) Parameters Type Name EmittedEventEnvelope [] scheduledWrites Guid causedBy System.String correlationId WriteEofResult(Guid, String, String, CheckpointTag, Guid, String) Declaration void WriteEofResult(Guid subscriptionId, string partition, string resultBody, CheckpointTag causedBy, Guid causedByGuid, string correlationId) Parameters Type Name Guid subscriptionId System.String partition System.String resultBody CheckpointTag causedBy Guid causedByGuid System.String correlationId WriteProgress(Guid, Single) Declaration void WriteProgress(Guid subscriptionId, float progress) Parameters Type Name Guid subscriptionId System.Single progress WriteRunningResult(EventProcessedResult) Declaration void WriteRunningResult(EventProcessedResult result) Parameters Type Name EventProcessedResult result"
  },
  "dotnet-api/code/EventStore.ClientAPI.EventReadResult.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.EventReadResult.html",
    "title": "Class EventReadResult | Event Store",
    "keywords": "Class EventReadResult A event read result is the result of a single event read operation to Event Store. Inheritance System.Object EventReadResult Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class EventReadResult Fields Event The event read represented as ResolvedEvent . Declaration public readonly ResolvedEvent? Event Field Value Type System.Nullable < ResolvedEvent > EventNumber The event number of the requested event. Declaration public readonly long EventNumber Field Value Type System.Int64 Status The EventReadStatus representing the status of this read attempt. Declaration public readonly EventReadStatus Status Field Value Type EventReadStatus Stream The name of the stream read. Declaration public readonly string Stream Field Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.StreamDeletedException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.StreamDeletedException.html",
    "title": "Class StreamDeletedException | Event Store",
    "keywords": "Class StreamDeletedException Exception thrown if an operation is attempted on a stream which has been deleted. Inheritance System.Object System.Exception EventStoreConnectionException StreamDeletedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class StreamDeletedException : EventStoreConnectionException, ISerializable Constructors StreamDeletedException() Constructs a new instance of StreamDeletedException . Declaration public StreamDeletedException() StreamDeletedException(String) Constructs a new instance of StreamDeletedException . Declaration public StreamDeletedException(string stream) Parameters Type Name System.String stream Fields Stream The name of the deleted stream. Declaration public readonly string Stream Field Value Type System.String Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.ClientAPI.StreamCheckpoint.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.StreamCheckpoint.html",
    "title": "Class StreamCheckpoint | Event Store",
    "keywords": "Class StreamCheckpoint This class contains constants to be used when setting up subscriptions using the IEventStoreConnection.SubscribeToStreamFrom method on IEventStoreConnection . Inheritance System.Object StreamCheckpoint Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public static class StreamCheckpoint Fields StreamStart Indicates that a catch-up subscription should receive all events in the stream. Declaration public static long? StreamStart Field Value Type System.Nullable < System.Int64 >"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.EventStoreConnectionException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.EventStoreConnectionException.html",
    "title": "Class EventStoreConnectionException | Event Store",
    "keywords": "Class EventStoreConnectionException Base type for exceptions thrown by an IEventStoreConnection , thrown in circumstances which do not have a specific derived exception. Inheritance System.Object System.Exception EventStoreConnectionException AccessDeniedException CannotEstablishConnectionException ClusterException CommandNotExpectedException ConnectionClosedException InvalidTransactionException NoResultException NotAuthenticatedException OperationExpiredException OperationNotSupportedException OperationTimedOutException PersistentSubscriptionCommandFailedException ProjectionCommandFailedException RetriesLimitReachedException ServerErrorException StreamDeletedException UserCommandFailedException WrongExpectedVersionException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class EventStoreConnectionException : Exception, ISerializable Constructors EventStoreConnectionException() Constructs a new EventStoreConnectionException . Declaration public EventStoreConnectionException() EventStoreConnectionException(SerializationInfo, StreamingContext) Constructs a new EventStoreConnectionException . Declaration protected EventStoreConnectionException(SerializationInfo info, StreamingContext context) Parameters Type Name System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context EventStoreConnectionException(String) Constructs a new EventStoreConnectionException . Declaration public EventStoreConnectionException(string message) Parameters Type Name System.String message EventStoreConnectionException(String, Exception) Constructs a new EventStoreConnectionException . Declaration public EventStoreConnectionException(string message, Exception innerException) Parameters Type Name System.String message System.Exception innerException Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage.html",
    "title": "Class ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage | Event Store",
    "keywords": "Class ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage Inheritance System.Object EventStore.Core.Messaging.Message ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage ReaderSubscriptionManagement.Pause ReaderSubscriptionManagement.Resume ReaderSubscriptionManagement.Subscribe ReaderSubscriptionManagement.Unsubscribe Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public abstract class ReaderSubscriptionManagementMessage : Message Constructors ReaderSubscriptionManagementMessage(Guid) Declaration protected ReaderSubscriptionManagementMessage(Guid subscriptionId) Parameters Type Name Guid subscriptionId Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId SubscriptionId Declaration public Guid SubscriptionId { get; } Property Value Type Guid"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped.html",
    "title": "Class CoreProjectionManagementMessage.LoadStopped | Event Store",
    "keywords": "Class CoreProjectionManagementMessage.LoadStopped Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionManagementControlMessage CoreProjectionManagementMessage.LoadStopped Inherited Members CoreProjectionManagementControlMessage.WorkerId CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class LoadStopped : CoreProjectionManagementControlMessage Constructors LoadStopped(Guid, Guid) Declaration public LoadStopped(Guid correlationId, Guid workerId) Parameters Type Name Guid correlationId Guid workerId Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionManagementControlMessage.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.v8.Js1.EnterCancellableRegionDelegate.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.v8.Js1.EnterCancellableRegionDelegate.html",
    "title": "Delegate Js1.EnterCancellableRegionDelegate | Event Store",
    "keywords": "Delegate Js1.EnterCancellableRegionDelegate Namespace : EventStore.Projections.Core.v8 Assembly : EventStore.Projections.Core.dll Syntax public delegate bool EnterCancellableRegionDelegate(); Returns Type Description System.Boolean"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.QuerySourcesDefinition.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.QuerySourcesDefinition.html",
    "title": "Class QuerySourcesDefinition | Event Store",
    "keywords": "Class QuerySourcesDefinition Inheritance System.Object QuerySourcesDefinition Implements IQuerySources Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class QuerySourcesDefinition : object, IQuerySources Properties AllEvents Declaration public bool AllEvents { get; set; } Property Value Type System.Boolean AllStreams Declaration public bool AllStreams { get; set; } Property Value Type System.Boolean ByCustomPartitions Declaration public bool ByCustomPartitions { get; set; } Property Value Type System.Boolean ByStreams Declaration public bool ByStreams { get; set; } Property Value Type System.Boolean Categories Declaration public string[] Categories { get; set; } Property Value Type System.String [] Events Declaration public string[] Events { get; set; } Property Value Type System.String [] LimitingCommitPosition Declaration public long? LimitingCommitPosition { get; set; } Property Value Type System.Nullable < System.Int64 > Options Declaration public QuerySourcesDefinitionOptions Options { get; set; } Property Value Type QuerySourcesDefinitionOptions Streams Declaration public string[] Streams { get; set; } Property Value Type System.String [] Methods From(IQuerySources) Declaration public static QuerySourcesDefinition From(IQuerySources sources) Parameters Type Name IQuerySources sources Returns Type Description QuerySourcesDefinition Explicit Interface Implementations IQuerySources.DefinesFold Declaration bool IQuerySources.DefinesFold { get; } Returns Type Description System.Boolean IQuerySources.DefinesStateTransform Declaration bool IQuerySources.DefinesStateTransform { get; } Returns Type Description System.Boolean IQuerySources.HandlesDeletedNotifications Declaration bool IQuerySources.HandlesDeletedNotifications { get; } Returns Type Description System.Boolean IQuerySources.IncludeLinksOption Declaration bool IQuerySources.IncludeLinksOption { get; } Returns Type Description System.Boolean IQuerySources.IsBiState Declaration bool IQuerySources.IsBiState { get; } Returns Type Description System.Boolean IQuerySources.PartitionResultStreamNamePatternOption Declaration string IQuerySources.PartitionResultStreamNamePatternOption { get; } Returns Type Description System.String IQuerySources.ProcessingLagOption Declaration int? IQuerySources.ProcessingLagOption { get; } Returns Type Description System.Nullable < System.Int32 > IQuerySources.ProducesResults Declaration bool IQuerySources.ProducesResults { get; } Returns Type Description System.Boolean IQuerySources.ReorderEventsOption Declaration bool IQuerySources.ReorderEventsOption { get; } Returns Type Description System.Boolean IQuerySources.ResultStreamNameOption Declaration string IQuerySources.ResultStreamNameOption { get; } Returns Type Description System.String Implements IQuerySources"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended.html",
    "title": "Class CoreProjectionStatusMessage.Suspended | Event Store",
    "keywords": "Class CoreProjectionStatusMessage.Suspended Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionStatusMessage.CoreProjectionStatusMessageBase CoreProjectionStatusMessage.Suspended Inherited Members CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Suspended : CoreProjectionStatusMessage.CoreProjectionStatusMessageBase Constructors Suspended(Guid) Declaration public Suspended(Guid projectionId) Parameters Type Name Guid projectionId Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionStatusMessage.CoreProjectionStatusMessageBase.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.ProjectionConfig.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.ProjectionConfig.html",
    "title": "Class ProjectionManagementMessage.ProjectionConfig | Event Store",
    "keywords": "Class ProjectionManagementMessage.ProjectionConfig Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.ProjectionConfig Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionConfig : Message Constructors ProjectionConfig(Boolean, Boolean, Int32, Int32, Int32, Int32, Int32, Int32) Declaration public ProjectionConfig(bool emitEnabled, bool trackEmittedStreams, int checkpointAfterMs, int checkpointHandledThreshold, int checkpointUnhandledBytesThreshold, int pendingEventsThreshold, int maxWriteBatchLength, int maxAllowedWritesInFlight) Parameters Type Name System.Boolean emitEnabled System.Boolean trackEmittedStreams System.Int32 checkpointAfterMs System.Int32 checkpointHandledThreshold System.Int32 checkpointUnhandledBytesThreshold System.Int32 pendingEventsThreshold System.Int32 maxWriteBatchLength System.Int32 maxAllowedWritesInFlight Properties CheckpointAfterMs Declaration public int CheckpointAfterMs { get; } Property Value Type System.Int32 CheckpointHandledThreshold Declaration public int CheckpointHandledThreshold { get; } Property Value Type System.Int32 CheckpointUnhandledBytesThreshold Declaration public int CheckpointUnhandledBytesThreshold { get; } Property Value Type System.Int32 EmitEnabled Declaration public bool EmitEnabled { get; } Property Value Type System.Boolean MaxAllowedWritesInFlight Declaration public int MaxAllowedWritesInFlight { get; } Property Value Type System.Int32 MaxWriteBatchLength Declaration public int MaxWriteBatchLength { get; } Property Value Type System.Int32 MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId PendingEventsThreshold Declaration public int PendingEventsThreshold { get; } Property Value Type System.Int32 TrackEmittedStreams Declaration public bool TrackEmittedStreams { get; } Property Value Type System.Boolean"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.StateReport.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.StateReport.html",
    "title": "Class CoreProjectionStatusMessage.StateReport | Event Store",
    "keywords": "Class CoreProjectionStatusMessage.StateReport Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionStatusMessage.CoreProjectionStatusMessageBase CoreProjectionStatusMessage.DataReportBase CoreProjectionStatusMessage.StateReport Inherited Members CoreProjectionStatusMessage.DataReportBase.Partition CoreProjectionStatusMessage.DataReportBase.CorrelationId CoreProjectionStatusMessage.DataReportBase.Position CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class StateReport : CoreProjectionStatusMessage.DataReportBase Constructors StateReport(Guid, Guid, String, String, CheckpointTag) Declaration public StateReport(Guid correlationId, Guid projectionId, string partition, string state, CheckpointTag position) Parameters Type Name Guid correlationId Guid projectionId System.String partition System.String state CheckpointTag position Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionStatusMessage.DataReportBase.MsgTypeId State Declaration public string State { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Standard.ByCorrelationId.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Standard.ByCorrelationId.html",
    "title": "Class ByCorrelationId | Event Store",
    "keywords": "Class ByCorrelationId Inheritance System.Object ByCorrelationId Implements IProjectionStateHandler IDisposable ISourceDefinitionSource Namespace : EventStore.Projections.Core.Standard Assembly : EventStore.Projections.Core.dll Syntax public class ByCorrelationId : object, IProjectionStateHandler, IDisposable, ISourceDefinitionSource Constructors ByCorrelationId(String, Action<String, Object[]>) Declaration public ByCorrelationId(string source, Action<string, object[]> logger) Parameters Type Name System.String source Action < System.String , System.Object []> logger Methods ConfigureSourceProcessingStrategy(SourceDefinitionBuilder) Declaration public void ConfigureSourceProcessingStrategy(SourceDefinitionBuilder builder) Parameters Type Name SourceDefinitionBuilder builder Dispose() Declaration public void Dispose() GetSourceDefinition() Declaration public IQuerySources GetSourceDefinition() Returns Type Description IQuerySources GetStatePartition(CheckpointTag, String, ResolvedEvent) Declaration public string GetStatePartition(CheckpointTag eventPosition, string category, ResolvedEvent data) Parameters Type Name CheckpointTag eventPosition System.String category ResolvedEvent data Returns Type Description System.String Initialize() Declaration public void Initialize() InitializeShared() Declaration public void InitializeShared() Load(String) Declaration public void Load(string state) Parameters Type Name System.String state LoadShared(String) Declaration public void LoadShared(string state) Parameters Type Name System.String state ProcessEvent(String, CheckpointTag, String, ResolvedEvent, out String, out String, out EmittedEventEnvelope[]) Declaration public bool ProcessEvent(string partition, CheckpointTag eventPosition, string category1, ResolvedEvent data, out string newState, out string newSharedState, out EmittedEventEnvelope[] emittedEvents) Parameters Type Name System.String partition CheckpointTag eventPosition System.String category1 ResolvedEvent data System.String newState System.String newSharedState EmittedEventEnvelope [] emittedEvents Returns Type Description System.Boolean ProcessPartitionCreated(String, CheckpointTag, ResolvedEvent, out EmittedEventEnvelope[]) Declaration public bool ProcessPartitionCreated(string partition, CheckpointTag createPosition, ResolvedEvent data, out EmittedEventEnvelope[] emittedEvents) Parameters Type Name System.String partition CheckpointTag createPosition ResolvedEvent data EmittedEventEnvelope [] emittedEvents Returns Type Description System.Boolean ProcessPartitionDeleted(String, CheckpointTag, out String) Declaration public bool ProcessPartitionDeleted(string partition, CheckpointTag deletePosition, out string newState) Parameters Type Name System.String partition CheckpointTag deletePosition System.String newState Returns Type Description System.Boolean TransformStateToResult() Declaration public string TransformStateToResult() Returns Type Description System.String Implements IProjectionStateHandler IDisposable ISourceDefinitionSource"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.SetRunAsCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.SetRunAsCommand.html",
    "title": "Class SetRunAsCommand | Event Store",
    "keywords": "Class SetRunAsCommand Inheritance System.Object SetRunAsCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class SetRunAsCommand : object Fields Name Declaration public string Name Field Value Type System.String RunAs Declaration public SerializedRunAs RunAs Field Value Type SerializedRunAs SetRemove Declaration public ProjectionManagementMessage.Command.SetRunAs.SetRemove SetRemove Field Value Type ProjectionManagementMessage.Command.SetRunAs.SetRemove"
  },
  "dotnet-api/code/EventStore.ClientAPI.EventReadStatus.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.EventReadStatus.html",
    "title": "Enum EventReadStatus | Event Store",
    "keywords": "Enum EventReadStatus Enumeration representing the status of a single event read operation. Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public enum EventReadStatus Fields Name Description NoStream The stream was not found. NotFound The event was not found. StreamDeleted The stream previously existed but was deleted. Success The read operation was successful. Extension Methods EnumExtensions.EnumValueName<EventReadStatus>()"
  },
  "dotnet-api/code/EventStore.ClientAPI.NodePreference.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.NodePreference.html",
    "title": "Enum NodePreference | Event Store",
    "keywords": "Enum NodePreference Indicates which order of preferred nodes for connecting to. Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public enum NodePreference Fields Name Description Master When attempting connnection, prefers master node. Random When attempting connnection, has no node preference. ReadOnlyReplica When attempting connection, prefers read only replicas. Slave When attempting connnection, prefers slave node. Extension Methods EnumExtensions.EnumValueName<NodePreference>()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.StopCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.StopCommand.html",
    "title": "Class StopCommand | Event Store",
    "keywords": "Class StopCommand Inheritance System.Object StopCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Commands Assembly : EventStore.Projections.Core.dll Syntax public class StopCommand : object Properties Id Declaration public string Id { get; set; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.RecordedEvent.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.RecordedEvent.html",
    "title": "Class RecordedEvent | Event Store",
    "keywords": "Class RecordedEvent Represents a previously written event Inheritance System.Object RecordedEvent Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class RecordedEvent Fields Created A datetime representing when this event was created in the system Declaration public DateTime Created Field Value Type System.DateTime CreatedEpoch A long representing the milliseconds since the epoch when the was created in the system Declaration public long CreatedEpoch Field Value Type System.Int64 Data A byte array representing the data of this event Declaration public readonly byte[] Data Field Value Type System.Byte [] EventId The Unique Identifier representing this event Declaration public readonly Guid EventId Field Value Type System.Guid EventNumber The number of this event in the stream Declaration public readonly long EventNumber Field Value Type System.Int64 EventStreamId The Event Stream that this event belongs to Declaration public readonly string EventStreamId Field Value Type System.String EventType The type of event this is Declaration public readonly string EventType Field Value Type System.String IsJson Indicates whether the content is internally marked as json Declaration public readonly bool IsJson Field Value Type System.Boolean Metadata A byte array representing the metadata associated with this event Declaration public readonly byte[] Metadata Field Value Type System.Byte []"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.DisableCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.DisableCommand.html",
    "title": "Class DisableCommand | Event Store",
    "keywords": "Class DisableCommand Inheritance System.Object DisableCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class DisableCommand : object Fields Name Declaration public string Name Field Value Type System.String RunAs Declaration public SerializedRunAs RunAs Field Value Type SerializedRunAs"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IEmittedStreamsTracker.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IEmittedStreamsTracker.html",
    "title": "Interface IEmittedStreamsTracker | Event Store",
    "keywords": "Interface IEmittedStreamsTracker Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public interface IEmittedStreamsTracker Methods Initialize() Declaration void Initialize() TrackEmittedStream(EmittedEvent[]) Declaration void TrackEmittedStream(EmittedEvent[] emittedEvents) Parameters Type Name EmittedEvent [] emittedEvents"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.ISingletonTimeoutScheduler.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.ISingletonTimeoutScheduler.html",
    "title": "Interface ISingletonTimeoutScheduler | Event Store",
    "keywords": "Interface ISingletonTimeoutScheduler Namespace : EventStore.Projections.Core.Services Assembly : EventStore.Projections.Core.dll Syntax public interface ISingletonTimeoutScheduler Methods Schedule(Int32, Action) Declaration void Schedule(int timeout, Action action) Parameters Type Name System.Int32 timeout Action action"
  },
  "dotnet-api/code/EventStore.Projections.Core.Standard.StreamCategoryExtractor.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Standard.StreamCategoryExtractor.html",
    "title": "Class StreamCategoryExtractor | Event Store",
    "keywords": "Class StreamCategoryExtractor Inheritance System.Object StreamCategoryExtractor StreamCategoryExtractorByFirstSeparator StreamCategoryExtractorByLastSeparator Namespace : EventStore.Projections.Core.Standard Assembly : EventStore.Projections.Core.dll Syntax public abstract class StreamCategoryExtractor : object Methods GetCategoryByStreamId(String) Declaration public abstract string GetCategoryByStreamId(string streamId) Parameters Type Name System.String streamId Returns Type Description System.String GetExtractor(String, Action<String, Object[]>) Declaration public static StreamCategoryExtractor GetExtractor(string source, Action<string, object[]> logger) Parameters Type Name System.String source Action < System.String , System.Object []> logger Returns Type Description StreamCategoryExtractor"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Http.ProjectionsController.ProjectionConfigData.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Http.ProjectionsController.ProjectionConfigData.html",
    "title": "Class ProjectionsController.ProjectionConfigData | Event Store",
    "keywords": "Class ProjectionsController.ProjectionConfigData Inheritance System.Object ProjectionsController.ProjectionConfigData Namespace : EventStore.Projections.Core.Services.Http Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionConfigData : object Properties CheckpointAfterMs Declaration public int CheckpointAfterMs { get; set; } Property Value Type System.Int32 CheckpointHandledThreshold Declaration public int CheckpointHandledThreshold { get; set; } Property Value Type System.Int32 CheckpointUnhandledBytesThreshold Declaration public int CheckpointUnhandledBytesThreshold { get; set; } Property Value Type System.Int32 EmitEnabled Declaration public bool EmitEnabled { get; set; } Property Value Type System.Boolean MaxAllowedWritesInFlight Declaration public int MaxAllowedWritesInFlight { get; set; } Property Value Type System.Int32 MaxWriteBatchLength Declaration public int MaxWriteBatchLength { get; set; } Property Value Type System.Int32 PendingEventsThreshold Declaration public int PendingEventsThreshold { get; set; } Property Value Type System.Int32 TrackEmittedStreams Declaration public bool TrackEmittedStreams { get; set; } Property Value Type System.Boolean"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ResultWriter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ResultWriter.html",
    "title": "Class ResultWriter | Event Store",
    "keywords": "Class ResultWriter Inheritance System.Object ResultWriter Implements IResultWriter Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class ResultWriter : object, IResultWriter Constructors ResultWriter(IResultEventEmitter, IEmittedEventWriter, Boolean, CheckpointTag, String) Declaration public ResultWriter(IResultEventEmitter resultEventEmitter, IEmittedEventWriter coreProjectionCheckpointManager, bool producesRunningResults, CheckpointTag zeroCheckpointTag, string partitionCatalogStreamName) Parameters Type Name IResultEventEmitter resultEventEmitter IEmittedEventWriter coreProjectionCheckpointManager System.Boolean producesRunningResults CheckpointTag zeroCheckpointTag System.String partitionCatalogStreamName Methods AccountPartition(EventProcessedResult) Declaration public void AccountPartition(EventProcessedResult result) Parameters Type Name EventProcessedResult result EventsEmitted(EmittedEventEnvelope[], Guid, String) Declaration public void EventsEmitted(EmittedEventEnvelope[] scheduledWrites, Guid causedBy, string correlationId) Parameters Type Name EmittedEventEnvelope [] scheduledWrites Guid causedBy System.String correlationId RegisterNewPartition(String, CheckpointTag) Declaration protected EmittedEventEnvelope[] RegisterNewPartition(string partition, CheckpointTag at) Parameters Type Name System.String partition CheckpointTag at Returns Type Description EmittedEventEnvelope [] WriteEofResult(Guid, String, String, CheckpointTag, Guid, String) Declaration public void WriteEofResult(Guid subscriptionId, string partition, string resultBody, CheckpointTag causedBy, Guid causedByGuid, string correlationId) Parameters Type Name Guid subscriptionId System.String partition System.String resultBody CheckpointTag causedBy Guid causedByGuid System.String correlationId WriteProgress(Guid, Single) Declaration public void WriteProgress(Guid subscriptionId, float progress) Parameters Type Name Guid subscriptionId System.Single progress WriteRunningResult(EventProcessedResult) Declaration public void WriteRunningResult(EventProcessedResult result) Parameters Type Name EventProcessedResult result Implements IResultWriter"
  },
  "dotnet-api/code/EventStore.Projections.Core.ProjectionsStandardComponents.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.ProjectionsStandardComponents.html",
    "title": "Class ProjectionsStandardComponents | Event Store",
    "keywords": "Class ProjectionsStandardComponents Inheritance System.Object ProjectionsStandardComponents Namespace : EventStore.Projections.Core Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionsStandardComponents : object Constructors ProjectionsStandardComponents(Int32, ProjectionType, InMemoryBus, IQueuedHandler, InMemoryBus, Boolean) Declaration public ProjectionsStandardComponents(int projectionWorkerThreadCount, ProjectionType runProjections, InMemoryBus masterOutputBus, IQueuedHandler masterInputQueue, InMemoryBus masterMainBus, bool faultOutOfOrderProjections) Parameters Type Name System.Int32 projectionWorkerThreadCount EventStore.Common.Options.ProjectionType runProjections EventStore.Core.Bus.InMemoryBus masterOutputBus EventStore.Core.Bus.IQueuedHandler masterInputQueue EventStore.Core.Bus.InMemoryBus masterMainBus System.Boolean faultOutOfOrderProjections Properties FaultOutOfOrderProjections Declaration public bool FaultOutOfOrderProjections { get; } Property Value Type System.Boolean MasterInputQueue Declaration public IQueuedHandler MasterInputQueue { get; } Property Value Type EventStore.Core.Bus.IQueuedHandler MasterMainBus Declaration public InMemoryBus MasterMainBus { get; } Property Value Type EventStore.Core.Bus.InMemoryBus MasterOutputBus Declaration public InMemoryBus MasterOutputBus { get; } Property Value Type EventStore.Core.Bus.InMemoryBus ProjectionWorkerThreadCount Declaration public int ProjectionWorkerThreadCount { get; } Property Value Type System.Int32 RunProjections Declaration public ProjectionType RunProjections { get; } Property Value Type EventStore.Common.Options.ProjectionType"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderCoreServiceMessage.StartReader.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderCoreServiceMessage.StartReader.html",
    "title": "Class ReaderCoreServiceMessage.StartReader | Event Store",
    "keywords": "Class ReaderCoreServiceMessage.StartReader Inheritance System.Object EventStore.Core.Messaging.Message ReaderCoreServiceMessage.StartReader Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class StartReader : Message Constructors StartReader(Guid) Declaration public StartReader(Guid instanceCorrelationId) Parameters Type Name Guid instanceCorrelationId Properties InstanceCorrelationId Declaration public Guid InstanceCorrelationId { get; } Property Value Type Guid MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId"
  },
  "dotnet-api/code/EventStore.ClientAPI.Internal.PersistentSubscriptionUpdateResult.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Internal.PersistentSubscriptionUpdateResult.html",
    "title": "Class PersistentSubscriptionUpdateResult | Event Store",
    "keywords": "Class PersistentSubscriptionUpdateResult A Persistent Subscription Create Result is the result of a single operation updating a persistent subscription in the event store Inheritance System.Object PersistentSubscriptionUpdateResult Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI.Internal Assembly : EventStore.ClientAPI.dll Syntax public class PersistentSubscriptionUpdateResult Fields Status The PersistentSubscriptionUpdateResult representing the status of this create attempt Declaration public readonly PersistentSubscriptionUpdateStatus Status Field Value Type PersistentSubscriptionUpdateStatus"
  },
  "dotnet-api/code/EventStore.ClientAPI.WriteResult.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.WriteResult.html",
    "title": "Struct WriteResult | Event Store",
    "keywords": "Struct WriteResult Result type returned after writing to a stream. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public struct WriteResult Constructors WriteResult(Int64, Position) Constructs a new WriteResult . Declaration public WriteResult(long nextExpectedVersion, Position logPosition) Parameters Type Name System.Int64 nextExpectedVersion Position logPosition Fields LogPosition The LogPosition of the write. Declaration public readonly Position LogPosition Field Value Type Position NextExpectedVersion The next expected version for the stream. Declaration public readonly long NextExpectedVersion Field Value Type System.Int64 Extension Methods EnumExtensions.EnumValueName<T>(T)"
  },
  "dotnet-api/code/EventStore.Projections.Core.v8.Js1.ReportErrorDelegate.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.v8.Js1.ReportErrorDelegate.html",
    "title": "Delegate Js1.ReportErrorDelegate | Event Store",
    "keywords": "Delegate Js1.ReportErrorDelegate Namespace : EventStore.Projections.Core.v8 Assembly : EventStore.Projections.Core.dll Syntax public delegate void ReportErrorDelegate(int erroe_code, string error_message); Parameters Type Name Description System.Int32 erroe_code System.String error_message"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.MultiStreamMultiOutputCheckpointManager.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.MultiStreamMultiOutputCheckpointManager.html",
    "title": "Class MultiStreamMultiOutputCheckpointManager | Event Store",
    "keywords": "Class MultiStreamMultiOutputCheckpointManager Inheritance System.Object CoreProjectionCheckpointManager DefaultCheckpointManager MultiStreamMultiOutputCheckpointManager Implements ICoreProjectionCheckpointManager IEmittedEventWriter EventStore.Core.Bus.IHandle < CoreProjectionCheckpointWriterMessage.CheckpointWritten > EventStore.Core.Bus.IHandle < CoreProjectionCheckpointWriterMessage.RestartRequested > IEmittedStreamContainer IProjectionCheckpointManager EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.ReadyForCheckpoint > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.RestartRequested > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.Failed > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.EmittedStreamAwaiting > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.EmittedStreamWriteCompleted > Inherited Members DefaultCheckpointManager._projectionVersion DefaultCheckpointManager._ioDispatcher DefaultCheckpointManager.BeginWriteCheckpoint(CheckpointTag, String) DefaultCheckpointManager.PartitionCompleted(String) DefaultCheckpointManager.BeginLoadPartitionStateAt(String, CheckpointTag, Action<PartitionState>) DefaultCheckpointManager.CreateProjectionCheckpoint(CheckpointTag) DefaultCheckpointManager.Handle(CoreProjectionCheckpointWriterMessage.CheckpointWritten) DefaultCheckpointManager.Handle(CoreProjectionCheckpointWriterMessage.RestartRequested) DefaultCheckpointManager.CapturePartitionStateUpdated(String, PartitionState, PartitionState) DefaultCheckpointManager.EmitPartitionCheckpoints() CoreProjectionCheckpointManager._namingBuilder CoreProjectionCheckpointManager._projectionConfig CoreProjectionCheckpointManager._logger CoreProjectionCheckpointManager._publisher CoreProjectionCheckpointManager._currentCheckpoint CoreProjectionCheckpointManager._stopping CoreProjectionCheckpointManager._stopped CoreProjectionCheckpointManager.Stopping() CoreProjectionCheckpointManager.Stopped() CoreProjectionCheckpointManager.StateUpdated(String, PartitionState, PartitionState) CoreProjectionCheckpointManager.EventProcessed(CheckpointTag, Single) CoreProjectionCheckpointManager.EventsEmitted(EmittedEventEnvelope[], Guid, String) CoreProjectionCheckpointManager.CheckpointSuggested(CheckpointTag, Single) CoreProjectionCheckpointManager.Progress(Single) CoreProjectionCheckpointManager.LastProcessedEventPosition CoreProjectionCheckpointManager.Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint) CoreProjectionCheckpointManager.Handle(CoreProjectionProcessingMessage.RestartRequested) CoreProjectionCheckpointManager.Handle(CoreProjectionProcessingMessage.Failed) CoreProjectionCheckpointManager.PrerecordedEventsLoaded(CheckpointTag) CoreProjectionCheckpointManager.EnsureStarted() CoreProjectionCheckpointManager.SendPrerecordedEvent(ResolvedEvent, CheckpointTag, Int64) CoreProjectionCheckpointManager.RequestRestart(String) CoreProjectionCheckpointManager.CheckpointWritten(CheckpointTag) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class MultiStreamMultiOutputCheckpointManager : DefaultCheckpointManager, ICoreProjectionCheckpointManager, IEmittedEventWriter, IHandle<CoreProjectionCheckpointWriterMessage.CheckpointWritten>, IHandle<CoreProjectionCheckpointWriterMessage.RestartRequested>, IEmittedStreamContainer, IProjectionCheckpointManager, IHandle<CoreProjectionProcessingMessage.ReadyForCheckpoint>, IHandle<CoreProjectionProcessingMessage.RestartRequested>, IHandle<CoreProjectionProcessingMessage.Failed>, IHandle<CoreProjectionProcessingMessage.EmittedStreamAwaiting>, IHandle<CoreProjectionProcessingMessage.EmittedStreamWriteCompleted> Constructors MultiStreamMultiOutputCheckpointManager(IPublisher, Guid, ProjectionVersion, IPrincipal, IODispatcher, ProjectionConfig, String, PositionTagger, ProjectionNamesBuilder, Boolean, Boolean, Boolean, CoreProjectionCheckpointWriter) Declaration public MultiStreamMultiOutputCheckpointManager(IPublisher publisher, Guid projectionCorrelationId, ProjectionVersion projectionVersion, IPrincipal runAs, IODispatcher ioDispatcher, ProjectionConfig projectionConfig, string name, PositionTagger positionTagger, ProjectionNamesBuilder namingBuilder, bool usePersistentCheckpoints, bool producesRunningResults, bool definesFold, CoreProjectionCheckpointWriter coreProjectionCheckpointWriter) Parameters Type Name EventStore.Core.Bus.IPublisher publisher Guid projectionCorrelationId ProjectionVersion projectionVersion IPrincipal runAs EventStore.Core.Helpers.IODispatcher ioDispatcher ProjectionConfig projectionConfig System.String name PositionTagger positionTagger ProjectionNamesBuilder namingBuilder System.Boolean usePersistentCheckpoints System.Boolean producesRunningResults System.Boolean definesFold CoreProjectionCheckpointWriter coreProjectionCheckpointWriter Methods BeginLoadPrerecordedEvents(CheckpointTag) Declaration public override void BeginLoadPrerecordedEvents(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag Overrides CoreProjectionCheckpointManager.BeginLoadPrerecordedEvents(CheckpointTag) GetStatistics(ProjectionStatistics) Declaration public override void GetStatistics(ProjectionStatistics info) Parameters Type Name ProjectionStatistics info Overrides DefaultCheckpointManager.GetStatistics(ProjectionStatistics) Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting) Declaration public void Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting message) Parameters Type Name CoreProjectionProcessingMessage.EmittedStreamAwaiting message Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted) Declaration public void Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted message) Parameters Type Name CoreProjectionProcessingMessage.EmittedStreamWriteCompleted message Initialize() Declaration public override void Initialize() Overrides DefaultCheckpointManager.Initialize() RecordEventOrder(ResolvedEvent, CheckpointTag, Action) Declaration public override void RecordEventOrder(ResolvedEvent resolvedEvent, CheckpointTag orderCheckpointTag, Action committed) Parameters Type Name ResolvedEvent resolvedEvent CheckpointTag orderCheckpointTag Action committed Overrides DefaultCheckpointManager.RecordEventOrder(ResolvedEvent, CheckpointTag, Action) Start(CheckpointTag, PartitionState) Declaration public override void Start(CheckpointTag checkpointTag, PartitionState rootPartitionState) Parameters Type Name CheckpointTag checkpointTag PartitionState rootPartitionState Overrides CoreProjectionCheckpointManager.Start(CheckpointTag, PartitionState) Implements ICoreProjectionCheckpointManager IEmittedEventWriter EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> IEmittedStreamContainer IProjectionCheckpointManager EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore.html",
    "title": "Class ProjectionCoreServiceMessage.StopCore | Event Store",
    "keywords": "Class ProjectionCoreServiceMessage.StopCore Inheritance System.Object EventStore.Core.Messaging.Message ProjectionCoreServiceMessage.StopCore Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class StopCore : Message Constructors StopCore(Guid) Declaration public StopCore(Guid queueId) Parameters Type Name Guid queueId Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId QueueId Declaration public Guid QueueId { get; } Property Value Type Guid"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.ProjectionState.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.ProjectionState.html",
    "title": "Class ProjectionManagementMessage.ProjectionState | Event Store",
    "keywords": "Class ProjectionManagementMessage.ProjectionState Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.ProjectionDataBase ProjectionManagementMessage.ProjectionState Inherited Members ProjectionManagementMessage.ProjectionDataBase.Name ProjectionManagementMessage.ProjectionDataBase.Exception ProjectionManagementMessage.ProjectionDataBase.Partition ProjectionManagementMessage.ProjectionDataBase.Position EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionState : ProjectionManagementMessage.ProjectionDataBase Constructors ProjectionState(String, String, String, CheckpointTag, Exception) Declaration public ProjectionState(string name, string partition, string state, CheckpointTag position, Exception exception = null) Parameters Type Name System.String name System.String partition System.String state CheckpointTag position Exception exception Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ProjectionManagementMessage.ProjectionDataBase.MsgTypeId State Declaration public string State { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.html",
    "title": "Class PersistentSubscriptionSettingsBuilder | Event Store",
    "keywords": "Class PersistentSubscriptionSettingsBuilder Builds a PersistentSubscriptionSettings object. Inheritance System.Object PersistentSubscriptionSettingsBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class PersistentSubscriptionSettingsBuilder Methods Build() Builds a PersistentSubscriptionSettings object from a PersistentSubscriptionSettingsBuilder . Declaration public PersistentSubscriptionSettings Build() Returns Type Description PersistentSubscriptionSettings CheckPointAfter(TimeSpan) Sets that the backend should try to checkpoint the subscription after some period of time. Note that if the increment of the checkpoint would be below the minimum the stream will not be checkpointed at this time. Declaration public PersistentSubscriptionSettingsBuilder CheckPointAfter(TimeSpan time) Parameters Type Name System.TimeSpan time Returns Type Description PersistentSubscriptionSettingsBuilder A new PersistentSubscriptionSettingsBuilder Remarks It is important to tweak checkpointing for high performance streams as they cause writes to happen back in the system. There is a trade off between the number of writes that can happen in varying failure scenarios and the frequency of writing out the checkpoints within the system. Normally settings such as once per second with a minimum of 5-10 messages and a high max to checkpoint should be a good compromise for most streams though you may want to change this if you for instance are doing hundreds of messages/second through the subscription. DoNotResolveLinkTos() Sets the option to not resolve linktos on events that are found for this subscription. Declaration public PersistentSubscriptionSettingsBuilder DoNotResolveLinkTos() Returns Type Description PersistentSubscriptionSettingsBuilder A new PersistentSubscriptionSettingsBuilder DontTimeoutMessages() Sets the timeout timespan to about 30k years. If you need larger please let us know. Declaration public PersistentSubscriptionSettingsBuilder DontTimeoutMessages() Returns Type Description PersistentSubscriptionSettingsBuilder A new PersistentSubscriptionSettingsBuilder MaximumCheckPointCountOf(Int32) Sets the largest increment the subscription will checkpoint. If this value is reached the subscription will immediately write a checkpoint. As such this value should normally be reasonably large so as not to cause too many writes to occur in the subscription Declaration public PersistentSubscriptionSettingsBuilder MaximumCheckPointCountOf(int count) Parameters Type Name System.Int32 count Returns Type Description PersistentSubscriptionSettingsBuilder Remarks It is important to tweak checkpointing for high performance streams as they cause writes to happen back in the system. There is a trade off between the number of writes that can happen in varying failure scenarios and the frequency of writing out the checkpoints within the system. Normally settings such as once per second with a minimum of 5-10 messages and a high max to checkpoint should be a good compromise for most streams though you may want to change this if you for instance are doing hundreds of messages/second through the subscription. MinimumCheckPointCountOf(Int32) Sets the minimum checkpoint count. The subscription will not increment a checkpoint below this value eg if there is one item to checkpoint and it is set to five it will not checkpoint Declaration public PersistentSubscriptionSettingsBuilder MinimumCheckPointCountOf(int count) Parameters Type Name System.Int32 count Returns Type Description PersistentSubscriptionSettingsBuilder Remarks It is important to tweak checkpointing for high performance streams as they cause writes to happen back in the system. There is a trade off between the number of writes that can happen in varying failure scenarios and the frequency of writing out the checkpoints within the system. Normally settings such as once per second with a minimum of 5-10 messages and a high max to checkpoint should be a good compromise for most streams though you may want to change this if you for instance are doing hundreds of messages/second through the subscription. PreferDispatchToSingle() If set the subscription will prefer if possible to dispatch only to a single of the connected clients. If however the buffer limits are reached on that client it will begin sending to other clients. Declaration public PersistentSubscriptionSettingsBuilder PreferDispatchToSingle() Returns Type Description PersistentSubscriptionSettingsBuilder A new PersistentSubscriptionSettingsBuilder PreferRoundRobin() If set the subscription will prefer if possible to round robin between the clients that are connected. Declaration public PersistentSubscriptionSettingsBuilder PreferRoundRobin() Returns Type Description PersistentSubscriptionSettingsBuilder A new PersistentSubscriptionSettingsBuilder ResolveLinkTos() Sets the option to resolve linktos on events that are found for this subscription. Declaration public PersistentSubscriptionSettingsBuilder ResolveLinkTos() Returns Type Description PersistentSubscriptionSettingsBuilder A new PersistentSubscriptionSettingsBuilder StartFrom(Int64) Sets that the subscription should start from a specified location of the stream. Declaration public PersistentSubscriptionSettingsBuilder StartFrom(long position) Parameters Type Name System.Int64 position Returns Type Description PersistentSubscriptionSettingsBuilder A new PersistentSubscriptionSettingsBuilder StartFromBeginning() Sets that the subscription should start from the beginning of the stream. Declaration public PersistentSubscriptionSettingsBuilder StartFromBeginning() Returns Type Description PersistentSubscriptionSettingsBuilder A new PersistentSubscriptionSettingsBuilder StartFromCurrent() Sets that the subscription should start from where the stream is when the subscription is first connected. Declaration public PersistentSubscriptionSettingsBuilder StartFromCurrent() Returns Type Description PersistentSubscriptionSettingsBuilder A new PersistentSubscriptionSettingsBuilder WithBufferSizeOf(Int32) Sets the size of the read batch used when paging in history for the subscription sizes should not be too big ... Declaration public PersistentSubscriptionSettingsBuilder WithBufferSizeOf(int count) Parameters Type Name System.Int32 count Returns Type Description PersistentSubscriptionSettingsBuilder A new PersistentSubscriptionSettingsBuilder WithExtraStatistics() Sets the option to include further latency statistics. These statistics have a cost and should not be used in high performance situations. Declaration public PersistentSubscriptionSettingsBuilder WithExtraStatistics() Returns Type Description PersistentSubscriptionSettingsBuilder A new PersistentSubscriptionSettingsBuilder WithLiveBufferSizeOf(Int32) Sets the size of the live buffer for the subscription. This is the buffer used to cache messages while sending messages as they happen. The count is in terms of the number of messages to cache. Declaration public PersistentSubscriptionSettingsBuilder WithLiveBufferSizeOf(int count) Parameters Type Name System.Int32 count Returns Type Description PersistentSubscriptionSettingsBuilder A new PersistentSubscriptionSettingsBuilder WithMaxRetriesOf(Int32) Sets the number of times a message should be retried before being considered a bad message Declaration public PersistentSubscriptionSettingsBuilder WithMaxRetriesOf(int count) Parameters Type Name System.Int32 count Returns Type Description PersistentSubscriptionSettingsBuilder A new PersistentSubscriptionSettingsBuilder WithMaxSubscriberCountOf(Int32) Sets the maximum number of subscribers allowed to connect. Declaration public PersistentSubscriptionSettingsBuilder WithMaxSubscriberCountOf(int count) Parameters Type Name System.Int32 count Returns Type Description PersistentSubscriptionSettingsBuilder A new PersistentSubscriptionSettingsBuilder WithMessageTimeoutOf(TimeSpan) Sets the timeout for a message (will be retried if an ack is not received within this timespan) Declaration public PersistentSubscriptionSettingsBuilder WithMessageTimeoutOf(TimeSpan timeout) Parameters Type Name System.TimeSpan timeout Returns Type Description PersistentSubscriptionSettingsBuilder A new PersistentSubscriptionSettingsBuilder WithNamedConsumerStrategy(String) Sets the consumer strategy for distributing event to clients. See SystemConsumerStrategies for system supported strategies. Declaration public PersistentSubscriptionSettingsBuilder WithNamedConsumerStrategy(string namedConsumerStrategy) Parameters Type Name System.String namedConsumerStrategy Returns Type Description PersistentSubscriptionSettingsBuilder A new PersistentSubscriptionSettingsBuilder WithReadBatchOf(Int32) Sets the size of the read batch used when paging in history for the subscription sizes should not be too big ... Declaration public PersistentSubscriptionSettingsBuilder WithReadBatchOf(int count) Parameters Type Name System.Int32 count Returns Type Description PersistentSubscriptionSettingsBuilder A new PersistentSubscriptionSettingsBuilder Operators Implicit(PersistentSubscriptionSettingsBuilder to PersistentSubscriptionSettings) Builds a PersistentSubscriptionSettings object from a PersistentSubscriptionSettingsBuilder . Declaration public static implicit operator PersistentSubscriptionSettings(PersistentSubscriptionSettingsBuilder builder) Parameters Type Name PersistentSubscriptionSettingsBuilder builder Returns Type Description PersistentSubscriptionSettings"
  },
  "dotnet-api/code/EventStore.ClientAPI.EventStoreAllCatchUpSubscription.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.EventStoreAllCatchUpSubscription.html",
    "title": "Class EventStoreAllCatchUpSubscription | Event Store",
    "keywords": "Class EventStoreAllCatchUpSubscription A catch-up subscription to all events in the Event Store. Inheritance System.Object EventStoreCatchUpSubscription EventStoreAllCatchUpSubscription Inherited Members EventStoreCatchUpSubscription.IsSubscribedToAll EventStoreCatchUpSubscription.StreamId EventStoreCatchUpSubscription.SubscriptionName EventStoreCatchUpSubscription.Log EventStoreCatchUpSubscription.Connection EventStoreCatchUpSubscription.ResolveLinkTos EventStoreCatchUpSubscription.UserCredentials EventStoreCatchUpSubscription.ReadBatchSize EventStoreCatchUpSubscription.MaxPushQueueSize EventStoreCatchUpSubscription.EventAppeared EventStoreCatchUpSubscription.Verbose EventStoreCatchUpSubscription.Subscription EventStoreCatchUpSubscription.AllowProcessing EventStoreCatchUpSubscription.ShouldStop EventStoreCatchUpSubscription.Stop(TimeSpan) EventStoreCatchUpSubscription.Stop() EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync() EventStoreCatchUpSubscription.EnqueuePushedEvent(EventStoreSubscription, ResolvedEvent) EventStoreCatchUpSubscription.ServerSubscriptionDropped(EventStoreSubscription, SubscriptionDropReason, Exception) EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification(SubscriptionDropReason, Exception) EventStoreCatchUpSubscription.EnsureProcessingPushQueue() EventStoreCatchUpSubscription.EnqueueAction(Func<Task>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class EventStoreAllCatchUpSubscription : EventStoreCatchUpSubscription Properties LastProcessedPosition The last position processed on the subscription. Declaration public Position LastProcessedPosition { get; } Property Value Type Position Methods LiveProcessingStarted(EventStoreCatchUpSubscription, Position) The callback invoked when the subscription switches to push notifications. Declaration protected override Task LiveProcessingStarted(EventStoreCatchUpSubscription eventStoreCatchUpSubscription, Position lastPosition) Parameters Type Name EventStoreCatchUpSubscription eventStoreCatchUpSubscription Position lastPosition Returns Type Description System.Threading.Tasks.Task Overrides EventStoreCatchUpSubscription.LiveProcessingStarted(EventStoreCatchUpSubscription, Position) ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>) Read events until the given position async. Declaration protected override Task<Position> ReadEventsTillAsync(IEventStoreConnection connection, bool resolveLinkTos, UserCredentials userCredentials, long? lastCommitPosition, long? lastEventNumber) Parameters Type Name IEventStoreConnection connection System.Boolean resolveLinkTos UserCredentials userCredentials System.Nullable < System.Int64 > lastCommitPosition System.Nullable < System.Int64 > lastEventNumber Returns Type Description System.Threading.Tasks.Task < Position > Overrides EventStoreCatchUpSubscription.ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>) SubscribeToStreamAsync() Subscribes to the stream. Declaration protected override Task SubscribeToStreamAsync() Returns Type Description System.Threading.Tasks.Task Overrides EventStoreCatchUpSubscription.SubscribeToStreamAsync() TryProcessAsync(ResolvedEvent) Try to process a single ResolvedEvent . Declaration protected override Task TryProcessAsync(ResolvedEvent e) Parameters Type Name ResolvedEvent e Returns Type Description System.Threading.Tasks.Task Overrides EventStoreCatchUpSubscription.TryProcessAsync(ResolvedEvent)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.StatisticsReport.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.StatisticsReport.html",
    "title": "Class CoreProjectionStatusMessage.StatisticsReport | Event Store",
    "keywords": "Class CoreProjectionStatusMessage.StatisticsReport Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionStatusMessage.CoreProjectionStatusMessageBase CoreProjectionStatusMessage.StatisticsReport Inherited Members CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class StatisticsReport : CoreProjectionStatusMessage.CoreProjectionStatusMessageBase Constructors StatisticsReport(Guid, ProjectionStatistics, Int32) Declaration public StatisticsReport(Guid projectionId, ProjectionStatistics statistics, int sequentialNumber) Parameters Type Name Guid projectionId ProjectionStatistics statistics System.Int32 sequentialNumber Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionStatusMessage.CoreProjectionStatusMessageBase.MsgTypeId SequentialNumber Declaration public int SequentialNumber { get; } Property Value Type System.Int32 Statistics Declaration public ProjectionStatistics Statistics { get; } Property Value Type ProjectionStatistics"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventByTypeIndexPositionTagger.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventByTypeIndexPositionTagger.html",
    "title": "Class EventByTypeIndexPositionTagger | Event Store",
    "keywords": "Class EventByTypeIndexPositionTagger Inheritance System.Object PositionTagger EventByTypeIndexPositionTagger Inherited Members PositionTagger.Phase Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class EventByTypeIndexPositionTagger : PositionTagger Constructors EventByTypeIndexPositionTagger(Int32, String[], Boolean) Declaration public EventByTypeIndexPositionTagger(int phase, string[] eventTypes, bool includeStreamDeletedNotification = false) Parameters Type Name System.Int32 phase System.String [] eventTypes System.Boolean includeStreamDeletedNotification Methods AdjustTag(CheckpointTag) Declaration public override CheckpointTag AdjustTag(CheckpointTag tag) Parameters Type Name CheckpointTag tag Returns Type Description CheckpointTag Overrides PositionTagger.AdjustTag(CheckpointTag) IsCompatible(CheckpointTag) Declaration public override bool IsCompatible(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag Returns Type Description System.Boolean Overrides PositionTagger.IsCompatible(CheckpointTag) IsMessageAfterCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public override bool IsMessageAfterCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.CommittedEventDistributed committedEvent Returns Type Description System.Boolean Overrides PositionTagger.IsMessageAfterCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.CommittedEventDistributed committedEvent Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionDeleted) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.EventReaderPartitionDeleted partitionDeleted) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.EventReaderPartitionDeleted partitionDeleted Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionDeleted) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionEof) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.EventReaderPartitionEof partitionEof) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.EventReaderPartitionEof partitionEof Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionEof) MakeZeroCheckpointTag() Declaration public override CheckpointTag MakeZeroCheckpointTag() Returns Type Description CheckpointTag Overrides PositionTagger.MakeZeroCheckpointTag()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Standard.CategorizeStreamByPath.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Standard.CategorizeStreamByPath.html",
    "title": "Class CategorizeStreamByPath | Event Store",
    "keywords": "Class CategorizeStreamByPath Inheritance System.Object CategorizeStreamByPath Implements IProjectionStateHandler IDisposable ISourceDefinitionSource Namespace : EventStore.Projections.Core.Standard Assembly : EventStore.Projections.Core.dll Syntax public class CategorizeStreamByPath : object, IProjectionStateHandler, IDisposable, ISourceDefinitionSource Constructors CategorizeStreamByPath(String, Action<String, Object[]>) Declaration public CategorizeStreamByPath(string source, Action<string, object[]> logger) Parameters Type Name System.String source Action < System.String , System.Object []> logger Methods ConfigureSourceProcessingStrategy(SourceDefinitionBuilder) Declaration public void ConfigureSourceProcessingStrategy(SourceDefinitionBuilder builder) Parameters Type Name SourceDefinitionBuilder builder Dispose() Declaration public void Dispose() GetSourceDefinition() Declaration public IQuerySources GetSourceDefinition() Returns Type Description IQuerySources GetStatePartition(CheckpointTag, String, ResolvedEvent) Declaration public string GetStatePartition(CheckpointTag eventPosition, string category, ResolvedEvent data) Parameters Type Name CheckpointTag eventPosition System.String category ResolvedEvent data Returns Type Description System.String Initialize() Declaration public void Initialize() InitializeShared() Declaration public void InitializeShared() Load(String) Declaration public void Load(string state) Parameters Type Name System.String state LoadShared(String) Declaration public void LoadShared(string state) Parameters Type Name System.String state ProcessEvent(String, CheckpointTag, String, ResolvedEvent, out String, out String, out EmittedEventEnvelope[]) Declaration public bool ProcessEvent(string partition, CheckpointTag eventPosition, string category1, ResolvedEvent data, out string newState, out string newSharedState, out EmittedEventEnvelope[] emittedEvents) Parameters Type Name System.String partition CheckpointTag eventPosition System.String category1 ResolvedEvent data System.String newState System.String newSharedState EmittedEventEnvelope [] emittedEvents Returns Type Description System.Boolean ProcessPartitionCreated(String, CheckpointTag, ResolvedEvent, out EmittedEventEnvelope[]) Declaration public bool ProcessPartitionCreated(string partition, CheckpointTag createPosition, ResolvedEvent data, out EmittedEventEnvelope[] emittedEvents) Parameters Type Name System.String partition CheckpointTag createPosition ResolvedEvent data EmittedEventEnvelope [] emittedEvents Returns Type Description System.Boolean ProcessPartitionDeleted(String, CheckpointTag, out String) Declaration public bool ProcessPartitionDeleted(string partition, CheckpointTag deletePosition, out string newState) Parameters Type Name System.String partition CheckpointTag deletePosition System.String newState Returns Type Description System.Boolean TransformStateToResult() Declaration public string TransformStateToResult() Returns Type Description System.String Implements IProjectionStateHandler IDisposable ISourceDefinitionSource"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProjectionOutputConfig.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProjectionOutputConfig.html",
    "title": "Class ProjectionOutputConfig | Event Store",
    "keywords": "Class ProjectionOutputConfig Inheritance System.Object ProjectionOutputConfig Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionOutputConfig : object Properties ResultStreamName Declaration public string ResultStreamName { get; set; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ByStreamStatePartitionSelector.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ByStreamStatePartitionSelector.html",
    "title": "Class ByStreamStatePartitionSelector | Event Store",
    "keywords": "Class ByStreamStatePartitionSelector Inheritance System.Object StatePartitionSelector ByStreamStatePartitionSelector Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class ByStreamStatePartitionSelector : StatePartitionSelector Methods EventReaderBasePartitionDeletedIsSupported() Declaration public override bool EventReaderBasePartitionDeletedIsSupported() Returns Type Description System.Boolean Overrides StatePartitionSelector.EventReaderBasePartitionDeletedIsSupported() GetStatePartition(EventReaderSubscriptionMessage.CommittedEventReceived) Declaration public override string GetStatePartition(EventReaderSubscriptionMessage.CommittedEventReceived event) Parameters Type Name EventReaderSubscriptionMessage.CommittedEventReceived event Returns Type Description System.String Overrides StatePartitionSelector.GetStatePartition(EventReaderSubscriptionMessage.CommittedEventReceived)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Standard.StreamCategoryExtractorByLastSeparator.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Standard.StreamCategoryExtractorByLastSeparator.html",
    "title": "Class StreamCategoryExtractorByLastSeparator | Event Store",
    "keywords": "Class StreamCategoryExtractorByLastSeparator Inheritance System.Object StreamCategoryExtractor StreamCategoryExtractorByLastSeparator Inherited Members StreamCategoryExtractor.GetExtractor(String, Action<String, Object[]>) Namespace : EventStore.Projections.Core.Standard Assembly : EventStore.Projections.Core.dll Syntax public class StreamCategoryExtractorByLastSeparator : StreamCategoryExtractor Constructors StreamCategoryExtractorByLastSeparator(Char) Declaration public StreamCategoryExtractorByLastSeparator(char separator) Parameters Type Name System.Char separator Methods GetCategoryByStreamId(String) Declaration public override string GetCategoryByStreamId(string streamId) Parameters Type Name System.String streamId Returns Type Description System.String Overrides StreamCategoryExtractor.GetCategoryByStreamId(String)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.ProjectionDataBase.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.ProjectionDataBase.html",
    "title": "Class ProjectionManagementMessage.ProjectionDataBase | Event Store",
    "keywords": "Class ProjectionManagementMessage.ProjectionDataBase Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.ProjectionDataBase ProjectionManagementMessage.ProjectionResult ProjectionManagementMessage.ProjectionState Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public abstract class ProjectionDataBase : Message Constructors ProjectionDataBase(String, String, CheckpointTag, Exception) Declaration protected ProjectionDataBase(string name, string partition, CheckpointTag position, Exception exception = null) Parameters Type Name System.String name System.String partition CheckpointTag position Exception exception Properties Exception Declaration public Exception Exception { get; } Property Value Type Exception MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String Partition Declaration public string Partition { get; } Property Value Type System.String Position Declaration public CheckpointTag Position { get; } Property Value Type CheckpointTag"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.html",
    "title": "Namespace EventStore.Projections.Core.Messages.Persisted.Commands | Event Store",
    "keywords": "Namespace EventStore.Projections.Core.Messages.Persisted.Commands Classes CreateAndPrepareCommand CreatePreparedCommand DisposeCommand GetResultCommand GetStateCommand KillCommand LoadStoppedCommand PersistedProjectionConfig StartCommand StopCommand Structs PersistedProjectionVersion"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderPartitionEof.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderPartitionEof.html",
    "title": "Class ReaderSubscriptionMessage.EventReaderPartitionEof | Event Store",
    "keywords": "Class ReaderSubscriptionMessage.EventReaderPartitionEof Inheritance System.Object EventStore.Core.Messaging.Message ReaderSubscriptionMessage.SubscriptionMessage ReaderSubscriptionMessage.EventReaderPartitionEof Inherited Members ReaderSubscriptionMessage.SubscriptionMessage.CorrelationId ReaderSubscriptionMessage.SubscriptionMessage.PreTagged ReaderSubscriptionMessage.SubscriptionMessage.Source EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class EventReaderPartitionEof : ReaderSubscriptionMessage.SubscriptionMessage Constructors EventReaderPartitionEof(Guid, String, CheckpointTag, Object) Declaration public EventReaderPartitionEof(Guid correlationId, string partition, CheckpointTag preTagged, object source = null) Parameters Type Name Guid correlationId System.String partition CheckpointTag preTagged System.Object source Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ReaderSubscriptionMessage.SubscriptionMessage.MsgTypeId Partition Declaration public string Partition { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.SliceReadStatus.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.SliceReadStatus.html",
    "title": "Enum SliceReadStatus | Event Store",
    "keywords": "Enum SliceReadStatus Enumeration detailing the possible outcomes of reading a slice of a stream. Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public enum SliceReadStatus Fields Name Description StreamDeleted The stream has previously existed but is deleted. StreamNotFound The stream was not found. Success The read was successful. Extension Methods EnumExtensions.EnumValueName<SliceReadStatus>()"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.WrongExpectedVersionException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.WrongExpectedVersionException.html",
    "title": "Class WrongExpectedVersionException | Event Store",
    "keywords": "Class WrongExpectedVersionException Exception thrown if the expected version specified on an operation does not match the version of the stream when the operation was attempted. Inheritance System.Object System.Exception EventStoreConnectionException WrongExpectedVersionException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class WrongExpectedVersionException : EventStoreConnectionException, ISerializable Constructors WrongExpectedVersionException(SerializationInfo, StreamingContext) Constructs a new instance of WrongExpectedVersionException . Declaration protected WrongExpectedVersionException(SerializationInfo info, StreamingContext context) Parameters Type Name System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context WrongExpectedVersionException(String) Constructs a new instance of WrongExpectedVersionException . Declaration public WrongExpectedVersionException(string message) Parameters Type Name System.String message WrongExpectedVersionException(String, Exception) Constructs a new instance of WrongExpectedVersionException . Declaration public WrongExpectedVersionException(string message, Exception innerException) Parameters Type Name System.String message System.Exception innerException WrongExpectedVersionException(String, Nullable<Int64>, Nullable<Int64>) Constructs a new instance of WrongExpectedVersionException with the expected and actual versions if available. Declaration public WrongExpectedVersionException(string message, long? expectedVersion, long? actualVersion) Parameters Type Name System.String message System.Nullable < System.Int64 > expectedVersion System.Nullable < System.Int64 > actualVersion Properties ActualVersion If available, the current version of the stream that the operation was attempted on. Declaration public long? ActualVersion { get; } Property Value Type System.Nullable < System.Int64 > Remarks Only available if the operation was AppendToStreamAsync(String, Int64, EventData[]) or one of it's overloads. ExpectedVersion If available, the expected version specified for the operation that failed. Declaration public long? ExpectedVersion { get; } Property Value Type System.Nullable < System.Int64 > Remarks Only available if the operation was AppendToStreamAsync(String, Int64, EventData[]) or one of it's overloads. Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.StatePartitionSelector.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.StatePartitionSelector.html",
    "title": "Class StatePartitionSelector | Event Store",
    "keywords": "Class StatePartitionSelector Inheritance System.Object StatePartitionSelector ByHandleStatePartitionSelector ByStreamStatePartitionSelector NoopStatePartitionSelector Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public abstract class StatePartitionSelector : object Methods EventReaderBasePartitionDeletedIsSupported() Declaration public abstract bool EventReaderBasePartitionDeletedIsSupported() Returns Type Description System.Boolean GetStatePartition(EventReaderSubscriptionMessage.CommittedEventReceived) Declaration public abstract string GetStatePartition(EventReaderSubscriptionMessage.CommittedEventReceived event) Parameters Type Name EventReaderSubscriptionMessage.CommittedEventReceived event Returns Type Description System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ReaderSubscription.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ReaderSubscription.html",
    "title": "Class ReaderSubscription | Event Store",
    "keywords": "Class ReaderSubscription Inheritance System.Object ReaderSubscriptionBase ReaderSubscription Implements IReaderSubscription EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.CommittedEventDistributed > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.EventReaderIdle > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.EventReaderStarting > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.EventReaderEof > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.EventReaderPartitionEof > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.EventReaderPartitionDeleted > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.EventReaderNotAuthorized > Inherited Members ReaderSubscriptionBase._eventFilter ReaderSubscriptionBase._positionTagger ReaderSubscriptionBase._positionTracker ReaderSubscriptionBase._tag ReaderSubscriptionBase.Tag ReaderSubscriptionBase.SubscriptionId ReaderSubscriptionBase.ProcessOne(ReaderSubscriptionMessage.CommittedEventDistributed) ReaderSubscriptionBase.PublishPartitionDeleted(String, CheckpointTag) ReaderSubscriptionBase.CreatePausedEventReader(IPublisher, IODispatcher, Guid) ReaderSubscriptionBase.Handle(ReaderSubscriptionMessage.EventReaderEof) ReaderSubscriptionBase.Handle(ReaderSubscriptionMessage.EventReaderPartitionEof) ReaderSubscriptionBase.Handle(ReaderSubscriptionMessage.EventReaderNotAuthorized) ReaderSubscriptionBase.Handle(ReaderSubscriptionMessage.EventReaderStarting) ReaderSubscriptionBase.EofReached() Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class ReaderSubscription : ReaderSubscriptionBase, IReaderSubscription, IHandle<ReaderSubscriptionMessage.CommittedEventDistributed>, IHandle<ReaderSubscriptionMessage.EventReaderIdle>, IHandle<ReaderSubscriptionMessage.EventReaderStarting>, IHandle<ReaderSubscriptionMessage.EventReaderEof>, IHandle<ReaderSubscriptionMessage.EventReaderPartitionEof>, IHandle<ReaderSubscriptionMessage.EventReaderPartitionDeleted>, IHandle<ReaderSubscriptionMessage.EventReaderNotAuthorized> Constructors ReaderSubscription(String, IPublisher, Guid, CheckpointTag, IReaderStrategy, ITimeProvider, Nullable<Int64>, Nullable<Int32>, Int32, Boolean, Nullable<Int32>) Declaration public ReaderSubscription(string tag, IPublisher publisher, Guid subscriptionId, CheckpointTag from, IReaderStrategy readerStrategy, ITimeProvider timeProvider, long? checkpointUnhandledBytesThreshold, int? checkpointProcessedEventsThreshold, int checkpointAfterMs, bool stopOnEof = false, int? stopAfterNEvents = null) Parameters Type Name System.String tag EventStore.Core.Bus.IPublisher publisher Guid subscriptionId CheckpointTag from IReaderStrategy readerStrategy EventStore.Core.Services.TimerService.ITimeProvider timeProvider System.Nullable < System.Int64 > checkpointUnhandledBytesThreshold System.Nullable < System.Int32 > checkpointProcessedEventsThreshold System.Int32 checkpointAfterMs System.Boolean stopOnEof System.Nullable < System.Int32 > stopAfterNEvents Methods Handle(ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public void Handle(ReaderSubscriptionMessage.CommittedEventDistributed message) Parameters Type Name ReaderSubscriptionMessage.CommittedEventDistributed message Handle(ReaderSubscriptionMessage.EventReaderIdle) Declaration public void Handle(ReaderSubscriptionMessage.EventReaderIdle message) Parameters Type Name ReaderSubscriptionMessage.EventReaderIdle message Handle(ReaderSubscriptionMessage.EventReaderPartitionDeleted) Declaration public void Handle(ReaderSubscriptionMessage.EventReaderPartitionDeleted message) Parameters Type Name ReaderSubscriptionMessage.EventReaderPartitionDeleted message Implements IReaderSubscription EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.AccessDeniedException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.AccessDeniedException.html",
    "title": "Class AccessDeniedException | Event Store",
    "keywords": "Class AccessDeniedException Exception thrown when a user is not authorised to carry out an operation. Inheritance System.Object System.Exception EventStoreConnectionException AccessDeniedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class AccessDeniedException : EventStoreConnectionException, ISerializable Constructors AccessDeniedException() Constructs a new AccessDeniedException . Declaration public AccessDeniedException() AccessDeniedException(SerializationInfo, StreamingContext) Constructs a new AccessDeniedException . Declaration protected AccessDeniedException(SerializationInfo info, StreamingContext context) Parameters Type Name System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context AccessDeniedException(String) Constructs a new AccessDeniedException . Declaration public AccessDeniedException(string message) Parameters Type Name System.String message AccessDeniedException(String, Exception) Constructs a new AccessDeniedException . Declaration public AccessDeniedException(string message, Exception innerException) Parameters Type Name System.String message System.Exception innerException Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.ReadPage.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.ReadPage.html",
    "title": "Class FeedReaderMessage.ReadPage | Event Store",
    "keywords": "Class FeedReaderMessage.ReadPage Inheritance System.Object EventStore.Core.Messaging.Message FeedReaderMessage.FeedReaderMessageBase FeedReaderMessage.ReadPage Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages.EventReaders.Feeds Assembly : EventStore.Projections.Core.dll Syntax public sealed class ReadPage : FeedReaderMessage.FeedReaderMessageBase Constructors ReadPage(Guid, IEnvelope, IPrincipal, QuerySourcesDefinition, CheckpointTag, Int32) Declaration public ReadPage(Guid correlationId, IEnvelope envelope, IPrincipal user, QuerySourcesDefinition querySource, CheckpointTag fromPosition, int maxEvents) Parameters Type Name Guid correlationId EventStore.Core.Messaging.IEnvelope envelope IPrincipal user QuerySourcesDefinition querySource CheckpointTag fromPosition System.Int32 maxEvents Fields CorrelationId Declaration public readonly Guid CorrelationId Field Value Type Guid Envelope Declaration public readonly IEnvelope Envelope Field Value Type EventStore.Core.Messaging.IEnvelope FromPosition Declaration public readonly CheckpointTag FromPosition Field Value Type CheckpointTag MaxEvents Declaration public readonly int MaxEvents Field Value Type System.Int32 QuerySource Declaration public readonly QuerySourcesDefinition QuerySource Field Value Type QuerySourcesDefinition User Declaration public readonly IPrincipal User Field Value Type IPrincipal Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides FeedReaderMessage.FeedReaderMessageBase.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Common.AllowedWritesInFlight.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Common.AllowedWritesInFlight.html",
    "title": "Class AllowedWritesInFlight | Event Store",
    "keywords": "Class AllowedWritesInFlight Inheritance System.Object AllowedWritesInFlight Namespace : EventStore.Projections.Core.Common Assembly : EventStore.Projections.Core.dll Syntax public static class AllowedWritesInFlight : object Fields Unbounded Declaration public const int Unbounded = null Field Value Type System.Int32"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Management.ProjectionManagerResponseReader.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Management.ProjectionManagerResponseReader.html",
    "title": "Class ProjectionManagerResponseReader | Event Store",
    "keywords": "Class ProjectionManagerResponseReader Inheritance System.Object ProjectionManagerResponseReader Implements EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Starting > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Internal.ReadTimeout > Namespace : EventStore.Projections.Core.Services.Management Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionManagerResponseReader : object, IHandle<ProjectionManagementMessage.Starting>, IHandle<ProjectionManagementMessage.Internal.ReadTimeout> Constructors ProjectionManagerResponseReader(IPublisher, IODispatcher, Int32) Declaration public ProjectionManagerResponseReader(IPublisher publisher, IODispatcher ioDispatcher, int numberOfWorkers) Parameters Type Name EventStore.Core.Bus.IPublisher publisher EventStore.Core.Helpers.IODispatcher ioDispatcher System.Int32 numberOfWorkers Methods Handle(ProjectionManagementMessage.Internal.ReadTimeout) Declaration public void Handle(ProjectionManagementMessage.Internal.ReadTimeout timeout) Parameters Type Name ProjectionManagementMessage.Internal.ReadTimeout timeout Handle(ProjectionManagementMessage.Starting) Declaration public void Handle(ProjectionManagementMessage.Starting message) Parameters Type Name ProjectionManagementMessage.Starting message Implements EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.ClientAPI.AllEventsSlice.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.AllEventsSlice.html",
    "title": "Class AllEventsSlice | Event Store",
    "keywords": "Class AllEventsSlice The result of a read operation from the $all stream. Inheritance System.Object AllEventsSlice Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class AllEventsSlice Fields Events The events read. Declaration public readonly ResolvedEvent[] Events Field Value Type ResolvedEvent [] FromPosition A Position representing the position where this slice was read from. Declaration public readonly Position FromPosition Field Value Type Position NextPosition A Position representing the position where the next slice should be read from. Declaration public readonly Position NextPosition Field Value Type Position ReadDirection The direction of read request. Declaration public readonly ReadDirection ReadDirection Field Value Type ReadDirection Properties IsEndOfStream A boolean representing whether or not this is the end of the $all stream. Declaration public bool IsEndOfStream { get; } Property Value Type System.Boolean"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventReorderingReaderSubscription.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventReorderingReaderSubscription.html",
    "title": "Class EventReorderingReaderSubscription | Event Store",
    "keywords": "Class EventReorderingReaderSubscription Inheritance System.Object ReaderSubscriptionBase EventReorderingReaderSubscription Implements IReaderSubscription EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.CommittedEventDistributed > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.EventReaderIdle > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.EventReaderStarting > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.EventReaderEof > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.EventReaderPartitionEof > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.EventReaderPartitionDeleted > EventStore.Core.Bus.IHandle < ReaderSubscriptionMessage.EventReaderNotAuthorized > Inherited Members ReaderSubscriptionBase._eventFilter ReaderSubscriptionBase._positionTagger ReaderSubscriptionBase._positionTracker ReaderSubscriptionBase._tag ReaderSubscriptionBase.Tag ReaderSubscriptionBase.SubscriptionId ReaderSubscriptionBase.ProcessOne(ReaderSubscriptionMessage.CommittedEventDistributed) ReaderSubscriptionBase.PublishPartitionDeleted(String, CheckpointTag) ReaderSubscriptionBase.CreatePausedEventReader(IPublisher, IODispatcher, Guid) ReaderSubscriptionBase.Handle(ReaderSubscriptionMessage.EventReaderEof) ReaderSubscriptionBase.Handle(ReaderSubscriptionMessage.EventReaderNotAuthorized) ReaderSubscriptionBase.Handle(ReaderSubscriptionMessage.EventReaderStarting) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class EventReorderingReaderSubscription : ReaderSubscriptionBase, IReaderSubscription, IHandle<ReaderSubscriptionMessage.CommittedEventDistributed>, IHandle<ReaderSubscriptionMessage.EventReaderIdle>, IHandle<ReaderSubscriptionMessage.EventReaderStarting>, IHandle<ReaderSubscriptionMessage.EventReaderEof>, IHandle<ReaderSubscriptionMessage.EventReaderPartitionEof>, IHandle<ReaderSubscriptionMessage.EventReaderPartitionDeleted>, IHandle<ReaderSubscriptionMessage.EventReaderNotAuthorized> Constructors EventReorderingReaderSubscription(IPublisher, Guid, CheckpointTag, IReaderStrategy, ITimeProvider, Nullable<Int64>, Nullable<Int32>, Int32, Int32, Boolean, Nullable<Int32>) Declaration public EventReorderingReaderSubscription(IPublisher publisher, Guid subscriptionId, CheckpointTag from, IReaderStrategy readerStrategy, ITimeProvider timeProvider, long? checkpointUnhandledBytesThreshold, int? checkpointProcessedEventsThreshold, int checkpointAfterMs, int processingLagMs, bool stopOnEof = false, int? stopAfterNEvents = null) Parameters Type Name EventStore.Core.Bus.IPublisher publisher Guid subscriptionId CheckpointTag from IReaderStrategy readerStrategy EventStore.Core.Services.TimerService.ITimeProvider timeProvider System.Nullable < System.Int64 > checkpointUnhandledBytesThreshold System.Nullable < System.Int32 > checkpointProcessedEventsThreshold System.Int32 checkpointAfterMs System.Int32 processingLagMs System.Boolean stopOnEof System.Nullable < System.Int32 > stopAfterNEvents Methods EofReached() Declaration protected override void EofReached() Overrides ReaderSubscriptionBase.EofReached() Handle(ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public void Handle(ReaderSubscriptionMessage.CommittedEventDistributed message) Parameters Type Name ReaderSubscriptionMessage.CommittedEventDistributed message Handle(ReaderSubscriptionMessage.EventReaderIdle) Declaration public void Handle(ReaderSubscriptionMessage.EventReaderIdle message) Parameters Type Name ReaderSubscriptionMessage.EventReaderIdle message Handle(ReaderSubscriptionMessage.EventReaderPartitionDeleted) Declaration public void Handle(ReaderSubscriptionMessage.EventReaderPartitionDeleted message) Parameters Type Name ReaderSubscriptionMessage.EventReaderPartitionDeleted message Handle(ReaderSubscriptionMessage.EventReaderPartitionEof) Declaration public void Handle(ReaderSubscriptionMessage.EventReaderPartitionEof message) Parameters Type Name ReaderSubscriptionMessage.EventReaderPartitionEof message Implements IReaderSubscription EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Resume.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Resume.html",
    "title": "Class ReaderSubscriptionManagement.Resume | Event Store",
    "keywords": "Class ReaderSubscriptionManagement.Resume Inheritance System.Object EventStore.Core.Messaging.Message ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage ReaderSubscriptionManagement.Resume Inherited Members ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage.SubscriptionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Resume : ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage Constructors Resume(Guid) Declaration public Resume(Guid subscriptionId) Parameters Type Name Guid subscriptionId Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ICoreProjectionCheckpointReader.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ICoreProjectionCheckpointReader.html",
    "title": "Interface ICoreProjectionCheckpointReader | Event Store",
    "keywords": "Interface ICoreProjectionCheckpointReader Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public interface ICoreProjectionCheckpointReader Methods BeginLoadState() Declaration void BeginLoadState() Initialize() Declaration void Initialize()"
  },
  "dotnet-api/code/EventStore.ClientAPI.Common.Log.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Common.Log.html",
    "title": "Namespace EventStore.ClientAPI.Common.Log | Event Store",
    "keywords": "Namespace EventStore.ClientAPI.Common.Log Classes ConsoleLogger Implementation of ILogger which outputs to System.Console ."
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderNotAuthorized.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderNotAuthorized.html",
    "title": "Class ReaderSubscriptionMessage.EventReaderNotAuthorized | Event Store",
    "keywords": "Class ReaderSubscriptionMessage.EventReaderNotAuthorized Inheritance System.Object EventStore.Core.Messaging.Message ReaderSubscriptionMessage.SubscriptionMessage ReaderSubscriptionMessage.EventReaderNotAuthorized Inherited Members ReaderSubscriptionMessage.SubscriptionMessage.CorrelationId ReaderSubscriptionMessage.SubscriptionMessage.PreTagged ReaderSubscriptionMessage.SubscriptionMessage.Source EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public sealed class EventReaderNotAuthorized : ReaderSubscriptionMessage.SubscriptionMessage Constructors EventReaderNotAuthorized(Guid, Object) Declaration public EventReaderNotAuthorized(Guid correlationId, object source = null) Parameters Type Name Guid correlationId System.Object source Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ReaderSubscriptionMessage.SubscriptionMessage.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.PublishSubscribeDispatcher-4.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.PublishSubscribeDispatcher-4.html",
    "title": "Class PublishSubscribeDispatcher<TGuid, TSubscribeRequest, TControlMessageBase, TResponseBase> | Event Store",
    "keywords": "Class PublishSubscribeDispatcher<TGuid, TSubscribeRequest, TControlMessageBase, TResponseBase> Inheritance System.Object PublishSubscribeDispatcher<TGuid, TSubscribeRequest, TControlMessageBase, TResponseBase> ReaderSubscriptionDispatcher Namespace : EventStore.Projections.Core.Services Assembly : EventStore.Projections.Core.dll Syntax public class PublishSubscribeDispatcher<TGuid, TSubscribeRequest, TControlMessageBase, TResponseBase> : object where TSubscribeRequest : Message where TControlMessageBase : Message where TResponseBase : Message Type Parameters Name Description TGuid TSubscribeRequest TControlMessageBase TResponseBase Constructors PublishSubscribeDispatcher(IPublisher, Func<TSubscribeRequest, TGuid>, Func<TResponseBase, TGuid>) Declaration public PublishSubscribeDispatcher(IPublisher publisher, Func<TSubscribeRequest, TGuid> getRequestCorrelationId, Func<TResponseBase, TGuid> getResponseCorrelationId) Parameters Type Name EventStore.Core.Bus.IPublisher publisher Func <TSubscribeRequest, TGuid> getRequestCorrelationId Func <TResponseBase, TGuid> getResponseCorrelationId Methods Cancel(TGuid) Declaration public void Cancel(TGuid requestId) Parameters Type Name TGuid requestId CancelAll() Declaration public void CancelAll() CreateSubscriber<T>() Declaration public IHandle<T> CreateSubscriber<T>() where T : TResponseBase Returns Type Description EventStore.Core.Bus.IHandle <T> Type Parameters Name Description T Handle<T>(T) Declaration public bool Handle<T>(T message) where T : TResponseBase Parameters Type Name T message Returns Type Description System.Boolean Type Parameters Name Description T Publish(TControlMessageBase) Declaration public void Publish(TControlMessageBase request) Parameters Type Name TControlMessageBase request Publish(IPublisher, TControlMessageBase) Declaration public void Publish(IPublisher publisher, TControlMessageBase request) Parameters Type Name EventStore.Core.Bus.IPublisher publisher TControlMessageBase request PublishSubscribe(TSubscribeRequest, Object) Declaration public TGuid PublishSubscribe(TSubscribeRequest request, object subscriber) Parameters Type Name TSubscribeRequest request System.Object subscriber Returns Type Description TGuid PublishSubscribe(IPublisher, TSubscribeRequest, Object) Declaration public TGuid PublishSubscribe(IPublisher publisher, TSubscribeRequest request, object subscriber) Parameters Type Name EventStore.Core.Bus.IPublisher publisher TSubscribeRequest request System.Object subscriber Returns Type Description TGuid Subscribed(TGuid, Object) Declaration public void Subscribed(TGuid correlationId, object subscriber) Parameters Type Name TGuid correlationId System.Object subscriber"
  },
  "dotnet-api/code/EventStore.ClientAPI.SystemData.UserCredentials.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.SystemData.UserCredentials.html",
    "title": "Class UserCredentials | Event Store",
    "keywords": "Class UserCredentials A username/password pair used for authentication and authorization to perform operations over an IEventStoreConnection . Inheritance System.Object UserCredentials Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI.SystemData Assembly : EventStore.ClientAPI.dll Syntax public class UserCredentials Constructors UserCredentials(String, String) Constructs a new UserCredentials . Declaration public UserCredentials(string username, string password) Parameters Type Name System.String username System.String password Fields Password The password Declaration public readonly string Password Field Value Type System.String Username The username Declaration public readonly string Username Field Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.Position.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Position.html",
    "title": "Struct Position | Event Store",
    "keywords": "Struct Position A structure referring to a potential logical record position in the Event Store transaction file. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public struct Position Constructors Position(Int64, Int64) Constructs a position with the given commit and prepare positions. It is not guaranteed that the position is actually the start of a record in the transaction file. The commit position cannot be less than the prepare position. Declaration public Position(long commitPosition, long preparePosition) Parameters Type Name System.Int64 commitPosition System.Int64 preparePosition Fields CommitPosition The commit position of the record Declaration public readonly long CommitPosition Field Value Type System.Int64 End Position representing the end of the transaction file Declaration public static readonly Position End Field Value Type Position PreparePosition The prepare position of the record. Declaration public readonly long PreparePosition Field Value Type System.Int64 Start Position representing the start of the transaction file Declaration public static readonly Position Start Field Value Type Position Methods Equals(Position) Compares this instance of Position for equality with another instance. Declaration public bool Equals(Position other) Parameters Type Name Position other Returns Type Description System.Boolean True if this instance is equal to the other instance. Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name System.Object obj Returns Type Description System.Boolean true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides System.ValueType.Equals(System.Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Overrides System.ValueType.GetHashCode() ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description System.String A System.String containing a fully qualified type name. Overrides System.ValueType.ToString() Operators Equality(Position, Position) Compares p1 and p2 for equality. Declaration public static bool operator ==(Position p1, Position p2) Parameters Type Name Position p1 Position p2 Returns Type Description System.Boolean True if p1 is equal to p2. GreaterThan(Position, Position) Compares whether p1 > p2. Declaration public static bool operator>(Position p1, Position p2) Parameters Type Name Position p1 Position p2 Returns Type Description System.Boolean True if p1 > p2. GreaterThanOrEqual(Position, Position) Compares whether p1 >= p2. Declaration public static bool operator >=(Position p1, Position p2) Parameters Type Name Position p1 Position p2 Returns Type Description System.Boolean True if p1 >= p2. Inequality(Position, Position) Compares p1 and p2 for equality. Declaration public static bool operator !=(Position p1, Position p2) Parameters Type Name Position p1 Position p2 Returns Type Description System.Boolean True if p1 is not equal to p2. LessThan(Position, Position) Compares whether p1 < p2. Declaration public static bool operator <(Position p1, Position p2) Parameters Type Name Position p1 Position p2 Returns Type Description System.Boolean True if p1 < p2. LessThanOrEqual(Position, Position) Compares whether p1 <= p2. Declaration public static bool operator <=(Position p1, Position p2) Parameters Type Name Position p1 Position p2 Returns Type Description System.Boolean True if p1 <= p2. Extension Methods EnumExtensions.EnumValueName<T>(T)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.DataReportBase.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.DataReportBase.html",
    "title": "Class CoreProjectionStatusMessage.DataReportBase | Event Store",
    "keywords": "Class CoreProjectionStatusMessage.DataReportBase Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionStatusMessage.CoreProjectionStatusMessageBase CoreProjectionStatusMessage.DataReportBase CoreProjectionStatusMessage.ResultReport CoreProjectionStatusMessage.StateReport Inherited Members CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public abstract class DataReportBase : CoreProjectionStatusMessage.CoreProjectionStatusMessageBase Constructors DataReportBase(Guid, Guid, String, CheckpointTag) Declaration protected DataReportBase(Guid correlationId, Guid projectionId, string partition, CheckpointTag position) Parameters Type Name Guid correlationId Guid projectionId System.String partition CheckpointTag position Properties CorrelationId Declaration public Guid CorrelationId { get; } Property Value Type Guid MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionStatusMessage.CoreProjectionStatusMessageBase.MsgTypeId Partition Declaration public string Partition { get; } Property Value Type System.String Position Declaration public CheckpointTag Position { get; } Property Value Type CheckpointTag"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.PartitionStateCache.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.PartitionStateCache.html",
    "title": "Class PartitionStateCache | Event Store",
    "keywords": "Class PartitionStateCache Inheritance System.Object PartitionStateCache Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class PartitionStateCache : object Constructors PartitionStateCache(Int32) Declaration public PartitionStateCache(int maxCachedPartitions = 4000) Parameters Type Name System.Int32 maxCachedPartitions Properties CachedItemCount Declaration public int CachedItemCount { get; } Property Value Type System.Int32 Methods CacheAndLockPartitionState(String, PartitionState, CheckpointTag) Declaration public void CacheAndLockPartitionState(string partition, PartitionState data, CheckpointTag at) Parameters Type Name System.String partition PartitionState data CheckpointTag at CachePartitionState(String, PartitionState) Declaration public void CachePartitionState(string partition, PartitionState data) Parameters Type Name System.String partition PartitionState data Enumerate() Declaration public IEnumerable<Tuple<string, PartitionState>> Enumerate() Returns Type Description IEnumerable < Tuple < System.String , PartitionState >> GetLockedPartitionState(String) Declaration public PartitionState GetLockedPartitionState(string partition) Parameters Type Name System.String partition Returns Type Description PartitionState Initialize() Declaration public void Initialize() TryGetAndLockPartitionState(String, CheckpointTag) Declaration public PartitionState TryGetAndLockPartitionState(string partition, CheckpointTag lockAt) Parameters Type Name System.String partition CheckpointTag lockAt Returns Type Description PartitionState TryGetPartitionState(String) Declaration public PartitionState TryGetPartitionState(string partition) Parameters Type Name System.String partition Returns Type Description PartitionState Unlock(CheckpointTag, Boolean) Declaration public void Unlock(CheckpointTag beforeCheckpoint, bool forgetUnlocked = false) Parameters Type Name CheckpointTag beforeCheckpoint System.Boolean forgetUnlocked"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.PersistentSubscriptionCommandFailedException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.PersistentSubscriptionCommandFailedException.html",
    "title": "Class PersistentSubscriptionCommandFailedException | Event Store",
    "keywords": "Class PersistentSubscriptionCommandFailedException Exception thrown if a persistent subscription command fails. Inheritance System.Object System.Exception EventStoreConnectionException PersistentSubscriptionCommandFailedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class PersistentSubscriptionCommandFailedException : EventStoreConnectionException, ISerializable Constructors PersistentSubscriptionCommandFailedException() Constructs a new PersistentSubscriptionCommandFailedException . Declaration public PersistentSubscriptionCommandFailedException() PersistentSubscriptionCommandFailedException(Int32, String) Constructs a new PersistentSubscriptionCommandFailedException . Declaration public PersistentSubscriptionCommandFailedException(int httpStatusCode, string message) Parameters Type Name System.Int32 httpStatusCode System.String message PersistentSubscriptionCommandFailedException(String, Exception) Constructs a new PersistentSubscriptionCommandFailedException . Declaration public PersistentSubscriptionCommandFailedException(string message, Exception innerException) Parameters Type Name System.String message System.Exception innerException Properties HttpStatusCode The HTTP status code returned by the server. Declaration public int HttpStatusCode { get; } Property Value Type System.Int32 Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Management.ProjectionManager.PendingProjection.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Management.ProjectionManager.PendingProjection.html",
    "title": "Class ProjectionManager.PendingProjection | Event Store",
    "keywords": "Class ProjectionManager.PendingProjection Inheritance System.Object ProjectionManager.PendingProjection Namespace : EventStore.Projections.Core.Services.Management Assembly : EventStore.Projections.Core.dll Syntax public class PendingProjection : object Constructors PendingProjection(Int64, ProjectionManagementMessage.Command.Post) Declaration public PendingProjection(long projectionId, ProjectionManagementMessage.Command.Post projection) Parameters Type Name System.Int64 projectionId ProjectionManagementMessage.Command.Post projection PendingProjection(Int64, ProjectionManagementMessage.Command.PostBatch.ProjectionPost) Declaration public PendingProjection(long projectionId, ProjectionManagementMessage.Command.PostBatch.ProjectionPost projection) Parameters Type Name System.Int64 projectionId ProjectionManagementMessage.Command.PostBatch.ProjectionPost projection PendingProjection(Int64, ProjectionMode, SerializedRunAs, String, String, String, Boolean, Boolean, Boolean, Boolean, Boolean) Declaration public PendingProjection(long projectionId, ProjectionMode mode, SerializedRunAs runAs, string name, string handlerType, string query, bool enabled, bool checkpointsEnabled, bool emitEnabled, bool enableRunAs, bool trackEmittedStreams) Parameters Type Name System.Int64 projectionId ProjectionMode mode SerializedRunAs runAs System.String name System.String handlerType System.String query System.Boolean enabled System.Boolean checkpointsEnabled System.Boolean emitEnabled System.Boolean enableRunAs System.Boolean trackEmittedStreams Properties CheckpointsEnabled Declaration public bool CheckpointsEnabled { get; } Property Value Type System.Boolean EmitEnabled Declaration public bool EmitEnabled { get; } Property Value Type System.Boolean Enabled Declaration public bool Enabled { get; } Property Value Type System.Boolean EnableRunAs Declaration public bool EnableRunAs { get; } Property Value Type System.Boolean HandlerType Declaration public string HandlerType { get; } Property Value Type System.String Mode Declaration public ProjectionMode Mode { get; } Property Value Type ProjectionMode Name Declaration public string Name { get; } Property Value Type System.String ProjectionId Declaration public long ProjectionId { get; } Property Value Type System.Int64 Query Declaration public string Query { get; } Property Value Type System.String RunAs Declaration public SerializedRunAs RunAs { get; } Property Value Type SerializedRunAs TrackEmittedStreams Declaration public bool TrackEmittedStreams { get; } Property Value Type System.Boolean Methods CreateInitializer(IEnvelope) Declaration public ProjectionManager.NewProjectionInitializer CreateInitializer(IEnvelope replyEnvelope) Parameters Type Name EventStore.Core.Messaging.IEnvelope replyEnvelope Returns Type Description ProjectionManager.NewProjectionInitializer"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.WriteQueryResultProjectionProcessingPhase.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.WriteQueryResultProjectionProcessingPhase.html",
    "title": "Class WriteQueryResultProjectionProcessingPhase | Event Store",
    "keywords": "Class WriteQueryResultProjectionProcessingPhase Inheritance System.Object WriteQueryResultProjectionProcessingPhaseBase WriteQueryResultProjectionProcessingPhase Implements IProjectionProcessingPhase IDisposable EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.GetState > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.GetResult > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.PrerecordedEventsLoaded > Inherited Members WriteQueryResultProjectionProcessingPhaseBase._resultStream WriteQueryResultProjectionProcessingPhaseBase._stateCache WriteQueryResultProjectionProcessingPhaseBase._checkpointManager WriteQueryResultProjectionProcessingPhaseBase._emittedEventWriter WriteQueryResultProjectionProcessingPhaseBase._emittedStreamsTracker WriteQueryResultProjectionProcessingPhaseBase.CheckpointManager WriteQueryResultProjectionProcessingPhaseBase.EmittedStreamsTracker WriteQueryResultProjectionProcessingPhaseBase.Dispose() WriteQueryResultProjectionProcessingPhaseBase.Handle(CoreProjectionManagementMessage.GetState) WriteQueryResultProjectionProcessingPhaseBase.Handle(CoreProjectionManagementMessage.GetResult) WriteQueryResultProjectionProcessingPhaseBase.Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded) WriteQueryResultProjectionProcessingPhaseBase.AdjustTag(CheckpointTag) WriteQueryResultProjectionProcessingPhaseBase.InitializeFromCheckpoint(CheckpointTag) WriteQueryResultProjectionProcessingPhaseBase.ProcessEvent() WriteQueryResultProjectionProcessingPhaseBase.Subscribe(CheckpointTag, Boolean) WriteQueryResultProjectionProcessingPhaseBase.SetProjectionState(PhaseState) WriteQueryResultProjectionProcessingPhaseBase.GetStatistics(ProjectionStatistics) WriteQueryResultProjectionProcessingPhaseBase.MakeZeroCheckpointTag() WriteQueryResultProjectionProcessingPhaseBase.EnsureUnsubscribed() Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public sealed class WriteQueryResultProjectionProcessingPhase : WriteQueryResultProjectionProcessingPhaseBase, IProjectionProcessingPhase, IDisposable, IHandle<CoreProjectionManagementMessage.GetState>, IHandle<CoreProjectionManagementMessage.GetResult>, IHandle<CoreProjectionProcessingMessage.PrerecordedEventsLoaded> Constructors WriteQueryResultProjectionProcessingPhase(IPublisher, Int32, String, ICoreProjectionForProcessingPhase, PartitionStateCache, ICoreProjectionCheckpointManager, IEmittedEventWriter, IEmittedStreamsTracker) Declaration public WriteQueryResultProjectionProcessingPhase(IPublisher publisher, int phase, string resultStream, ICoreProjectionForProcessingPhase coreProjection, PartitionStateCache stateCache, ICoreProjectionCheckpointManager checkpointManager, IEmittedEventWriter emittedEventWriter, IEmittedStreamsTracker emittedStreamsTracker) Parameters Type Name EventStore.Core.Bus.IPublisher publisher System.Int32 phase System.String resultStream ICoreProjectionForProcessingPhase coreProjection PartitionStateCache stateCache ICoreProjectionCheckpointManager checkpointManager IEmittedEventWriter emittedEventWriter IEmittedStreamsTracker emittedStreamsTracker Methods WriteResults(CheckpointTag) Declaration protected override IEnumerable<EmittedEventEnvelope> WriteResults(CheckpointTag phaseCheckpointTag) Parameters Type Name CheckpointTag phaseCheckpointTag Returns Type Description IEnumerable < EmittedEventEnvelope > Overrides WriteQueryResultProjectionProcessingPhaseBase.WriteResults(CheckpointTag) Implements IProjectionProcessingPhase IDisposable EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.GetStateCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.GetStateCommand.html",
    "title": "Class GetStateCommand | Event Store",
    "keywords": "Class GetStateCommand Inheritance System.Object GetStateCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class GetStateCommand : object Fields Name Declaration public string Name Field Value Type System.String Partition Declaration public string Partition Field Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.ClusterSettingsBuilder.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ClusterSettingsBuilder.html",
    "title": "Class ClusterSettingsBuilder | Event Store",
    "keywords": "Class ClusterSettingsBuilder Builder used for creating instances of ClusterSettings. Inheritance System.Object ClusterSettingsBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class ClusterSettingsBuilder Methods DiscoverClusterViaDns() Sets the client to discover nodes using a DNS name and a well-known port. Declaration public DnsClusterSettingsBuilder DiscoverClusterViaDns() Returns Type Description DnsClusterSettingsBuilder A DnsClusterSettingsBuilder for further configuration. DiscoverClusterViaGossipSeeds() Sets the client to discover cluster nodes by specifying the IP endpoints of one or more of the nodes. Declaration public GossipSeedClusterSettingsBuilder DiscoverClusterViaGossipSeeds() Returns Type Description GossipSeedClusterSettingsBuilder"
  },
  "dotnet-api/code/EventStore.ClientAPI.Transport.Http.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Transport.Http.html",
    "title": "Namespace EventStore.ClientAPI.Transport.Http | Event Store",
    "keywords": "Namespace EventStore.ClientAPI.Transport.Http Classes HttpAsyncClient An HttpAsyncClient. HttpResponse An Http response Interfaces IHttpClient An IHttpClient."
  },
  "dotnet-api/code/EventStore.Projections.Core.Utils.EnumExtensions.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Utils.EnumExtensions.html",
    "title": "Class EnumExtensions | Event Store",
    "keywords": "Class EnumExtensions Inheritance System.Object EnumExtensions Namespace : EventStore.Projections.Core.Utils Assembly : EventStore.Projections.Core.dll Syntax public static class EnumExtensions : object Methods EnumValueName<T>(T) Declaration public static string EnumValueName<T>(this T value) where T : struct Parameters Type Name T value Returns Type Description System.String Type Parameters Name Description T"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.Started.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.Started.html",
    "title": "Class Started | Event Store",
    "keywords": "Class Started Inheritance System.Object Started Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class Started : object Properties Id Declaration public string Id { get; set; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached.html",
    "title": "Class EventReaderSubscriptionMessage.EofReached | Event Store",
    "keywords": "Class EventReaderSubscriptionMessage.EofReached Inheritance System.Object EventStore.Core.Messaging.Message EventReaderSubscriptionMessageBase EventReaderSubscriptionMessage.EofReached Inherited Members EventReaderSubscriptionMessageBase.CheckpointTag EventReaderSubscriptionMessageBase.Progress EventReaderSubscriptionMessageBase.SubscriptionMessageSequenceNumber EventReaderSubscriptionMessageBase.SubscriptionId EventReaderSubscriptionMessageBase.Source EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class EofReached : EventReaderSubscriptionMessageBase Constructors EofReached(Guid, CheckpointTag, Int64, Object) Declaration public EofReached(Guid subscriptionId, CheckpointTag checkpointTag, long subscriptionMessageSequenceNumber, object source = null) Parameters Type Name Guid subscriptionId CheckpointTag checkpointTag System.Int64 subscriptionMessageSequenceNumber System.Object source Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventReaderSubscriptionMessageBase.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.RunAs.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.RunAs.html",
    "title": "Class ProjectionManagementMessage.RunAs | Event Store",
    "keywords": "Class ProjectionManagementMessage.RunAs Inheritance System.Object ProjectionManagementMessage.RunAs Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public sealed class RunAs : object Constructors RunAs(IPrincipal) Declaration public RunAs(IPrincipal runAs) Parameters Type Name IPrincipal runAs Properties Anonymous Declaration public static ProjectionManagementMessage.RunAs Anonymous { get; } Property Value Type ProjectionManagementMessage.RunAs Principal Declaration public IPrincipal Principal { get; } Property Value Type IPrincipal System Declaration public static ProjectionManagementMessage.RunAs System { get; } Property Value Type ProjectionManagementMessage.RunAs Methods ValidateRunAs(ProjectionMode, ReadWrite, IPrincipal, ProjectionManagementMessage.Command.ControlMessage, Boolean) Declaration public static bool ValidateRunAs(ProjectionMode mode, ReadWrite readWrite, IPrincipal existingRunAs, ProjectionManagementMessage.Command.ControlMessage message, bool replace = false) Parameters Type Name ProjectionMode mode ReadWrite readWrite IPrincipal existingRunAs ProjectionManagementMessage.Command.ControlMessage message System.Boolean replace Returns Type Description System.Boolean"
  },
  "dotnet-api/code/EventStore.ClientAPI.UserManagement.UserDetails.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.UserManagement.UserDetails.html",
    "title": "Class UserDetails | Event Store",
    "keywords": "Class UserDetails Provides the details for a user. Inheritance System.Object UserDetails Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI.UserManagement Assembly : EventStore.ClientAPI.dll Syntax public sealed class UserDetails Constructors UserDetails(String, String, String[], Boolean, Nullable<DateTimeOffset>, RelLink[]) create a new UserDetails class. Declaration public UserDetails(string loginName, string fullName, string[] groups, bool disabled, DateTimeOffset? dateLastUpdated, RelLink[] links) Parameters Type Name System.String loginName System.String fullName System.String [] groups System.Boolean disabled System.Nullable < System.DateTimeOffset > dateLastUpdated RelLink [] links Fields DateLastUpdated The date/time the user was updated in UTC format. Declaration public readonly DateTimeOffset? DateLastUpdated Field Value Type System.Nullable < System.DateTimeOffset > Disabled Whether the user disable or not. Declaration public readonly bool Disabled Field Value Type System.Boolean FullName The full name of the user. Declaration public readonly string FullName Field Value Type System.String Groups The groups the user is a member of. Declaration public readonly string[] Groups Field Value Type System.String [] Links List of hypermedia links describing actions allowed on user resource. Declaration public readonly RelLink[] Links Field Value Type RelLink [] LoginName The users login name. Declaration public readonly string LoginName Field Value Type System.String Methods GetRelLink(String) Declaration public string GetRelLink(string rel) Parameters Type Name System.String rel Returns Type Description System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IEventWriter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IEventWriter.html",
    "title": "Interface IEventWriter | Event Store",
    "keywords": "Interface IEventWriter Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public interface IEventWriter Methods ValidateOrderAndEmitEvents(EmittedEventEnvelope[]) Declaration void ValidateOrderAndEmitEvents(EmittedEventEnvelope[] events) Parameters Type Name EmittedEventEnvelope [] events"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.ProjectionConfig.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.ProjectionConfig.html",
    "title": "Class ProjectionConfig | Event Store",
    "keywords": "Class ProjectionConfig Inheritance System.Object ProjectionConfig Namespace : EventStore.Projections.Core.Services Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionConfig : object Constructors ProjectionConfig(IPrincipal, Int32, Int32, Int32, Int32, Boolean, Boolean, Boolean, Boolean, Boolean, Int32, Int32) Declaration public ProjectionConfig(IPrincipal runAs, int checkpointHandledThreshold, int checkpointUnhandledBytesThreshold, int pendingEventsThreshold, int maxWriteBatchLength, bool emitEventEnabled, bool checkpointsEnabled, bool createTempStreams, bool stopOnEof, bool trackEmittedStreams, int checkpointAfterMs, int maximumAllowedWritesInFlight) Parameters Type Name IPrincipal runAs System.Int32 checkpointHandledThreshold System.Int32 checkpointUnhandledBytesThreshold System.Int32 pendingEventsThreshold System.Int32 maxWriteBatchLength System.Boolean emitEventEnabled System.Boolean checkpointsEnabled System.Boolean createTempStreams System.Boolean stopOnEof System.Boolean trackEmittedStreams System.Int32 checkpointAfterMs System.Int32 maximumAllowedWritesInFlight Properties CheckpointAfterMs Declaration public int CheckpointAfterMs { get; } Property Value Type System.Int32 CheckpointHandledThreshold Declaration public int CheckpointHandledThreshold { get; } Property Value Type System.Int32 CheckpointsEnabled Declaration public bool CheckpointsEnabled { get; } Property Value Type System.Boolean CheckpointUnhandledBytesThreshold Declaration public int CheckpointUnhandledBytesThreshold { get; } Property Value Type System.Int32 CreateTempStreams Declaration public bool CreateTempStreams { get; } Property Value Type System.Boolean EmitEventEnabled Declaration public bool EmitEventEnabled { get; } Property Value Type System.Boolean MaximumAllowedWritesInFlight Declaration public int MaximumAllowedWritesInFlight { get; } Property Value Type System.Int32 MaxWriteBatchLength Declaration public int MaxWriteBatchLength { get; } Property Value Type System.Int32 PendingEventsThreshold Declaration public int PendingEventsThreshold { get; } Property Value Type System.Int32 RunAs Declaration public IPrincipal RunAs { get; } Property Value Type IPrincipal StopOnEof Declaration public bool StopOnEof { get; } Property Value Type System.Boolean TrackEmittedStreams Declaration public bool TrackEmittedStreams { get; } Property Value Type System.Boolean Methods GetTest() Declaration public static ProjectionConfig GetTest() Returns Type Description ProjectionConfig"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventProcessedResult.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventProcessedResult.html",
    "title": "Class EventProcessedResult | Event Store",
    "keywords": "Class EventProcessedResult Inheritance System.Object EventProcessedResult Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class EventProcessedResult : object Constructors EventProcessedResult(String, CheckpointTag, PartitionState, PartitionState, PartitionState, PartitionState, EmittedEventEnvelope[], Guid, String, Boolean) Declaration public EventProcessedResult(string partition, CheckpointTag checkpointTag, PartitionState oldState, PartitionState newState, PartitionState oldSharedState, PartitionState newSharedState, EmittedEventEnvelope[] emittedEvents, Guid causedBy, string correlationId, bool isPartitionTombstone = false) Parameters Type Name System.String partition CheckpointTag checkpointTag PartitionState oldState PartitionState newState PartitionState oldSharedState PartitionState newSharedState EmittedEventEnvelope [] emittedEvents Guid causedBy System.String correlationId System.Boolean isPartitionTombstone Properties CausedBy Declaration public Guid CausedBy { get; } Property Value Type Guid CheckpointTag Declaration public CheckpointTag CheckpointTag { get; } Property Value Type CheckpointTag CorrelationId Declaration public string CorrelationId { get; } Property Value Type System.String EmittedEvents Declaration public EmittedEventEnvelope[] EmittedEvents { get; } Property Value Type EmittedEventEnvelope [] IsPartitionTombstone Declaration public bool IsPartitionTombstone { get; } Property Value Type System.Boolean NewSharedState null - means no state change Declaration public PartitionState NewSharedState { get; } Property Value Type PartitionState NewState null - means no state change Declaration public PartitionState NewState { get; } Property Value Type PartitionState OldSharedState Declaration public PartitionState OldSharedState { get; } Property Value Type PartitionState OldState Declaration public PartitionState OldState { get; } Property Value Type PartitionState Partition Declaration public string Partition { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.Stopped.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.Stopped.html",
    "title": "Class Stopped | Event Store",
    "keywords": "Class Stopped Inheritance System.Object Stopped Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class Stopped : object Properties Completed Declaration public bool Completed { get; set; } Property Value Type System.Boolean Id Declaration public string Id { get; set; } Property Value Type System.String Name Declaration public string Name { get; set; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.InvalidTransactionException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.InvalidTransactionException.html",
    "title": "Class InvalidTransactionException | Event Store",
    "keywords": "Class InvalidTransactionException Exception thrown if there is an attempt to operate inside a transaction which does not exist. Inheritance System.Object System.Exception EventStoreConnectionException InvalidTransactionException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class InvalidTransactionException : EventStoreConnectionException, ISerializable Constructors InvalidTransactionException() Constructs a new InvalidTransactionException . Declaration public InvalidTransactionException() InvalidTransactionException(SerializationInfo, StreamingContext) Constructs a new InvalidTransactionException . Declaration protected InvalidTransactionException(SerializationInfo info, StreamingContext context) Parameters Type Name System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context InvalidTransactionException(String) Constructs a new InvalidTransactionException . Declaration public InvalidTransactionException(string message) Parameters Type Name System.String message InvalidTransactionException(String, Exception) Constructs a new InvalidTransactionException . Declaration public InvalidTransactionException(string message, Exception innerException) Parameters Type Name System.String message System.Exception innerException Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventReader.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventReader.html",
    "title": "Class EventReader | Event Store",
    "keywords": "Class EventReader Inheritance System.Object EventReader EventByTypeIndexEventReader MultiStreamEventReader StreamEventReader TransactionFileEventReader Implements IEventReader IDisposable Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public abstract class EventReader : object, IEventReader, IDisposable Constructors EventReader(IPublisher, Guid, IPrincipal, Boolean) Declaration protected EventReader(IPublisher publisher, Guid eventReaderCorrelationId, IPrincipal readAs, bool stopOnEof) Parameters Type Name EventStore.Core.Bus.IPublisher publisher Guid eventReaderCorrelationId IPrincipal readAs System.Boolean stopOnEof Fields _disposed Declaration protected bool _disposed Field Value Type System.Boolean _publisher Declaration protected readonly IPublisher _publisher Field Value Type EventStore.Core.Bus.IPublisher _stopOnEof Declaration protected readonly bool _stopOnEof Field Value Type System.Boolean EventReaderCorrelationId Declaration protected readonly Guid EventReaderCorrelationId Field Value Type Guid Properties Paused Declaration protected bool Paused { get; } Property Value Type System.Boolean PauseRequested Declaration protected bool PauseRequested { get; } Property Value Type System.Boolean ReadAs Declaration protected IPrincipal ReadAs { get; } Property Value Type IPrincipal Methods AreEventsRequested() Declaration protected abstract bool AreEventsRequested() Returns Type Description System.Boolean Dispose() Declaration public virtual void Dispose() GetLastCommitPositionFrom(ClientMessage.ReadStreamEventsForwardCompleted) Declaration protected static long? GetLastCommitPositionFrom(ClientMessage.ReadStreamEventsForwardCompleted msg) Parameters Type Name EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted msg Returns Type Description System.Nullable < System.Int64 > NotifyIfStarting(Int64) Declaration protected void NotifyIfStarting(long startingLastCommitPosition) Parameters Type Name System.Int64 startingLastCommitPosition Pause() Declaration public void Pause() PauseOrContinueProcessing() Declaration protected void PauseOrContinueProcessing() RequestEvents() Declaration protected abstract void RequestEvents() Resume() Declaration public void Resume() SendEof() Declaration protected void SendEof() SendNotAuthorized() Declaration public void SendNotAuthorized() SendPartitionDeleted_WhenReadingDataStream(String, Nullable<Int64>, Nullable<TFPos>, Nullable<TFPos>, String, Nullable<Int32>, CheckpointTag) Declaration protected void SendPartitionDeleted_WhenReadingDataStream(string partition, long? lastEventNumber, TFPos? deletedLinkOrEventPosition, TFPos? deletedEventPosition, string positionStreamId, int? positionEventNumber, CheckpointTag preTagged = null) Parameters Type Name System.String partition System.Nullable < System.Int64 > lastEventNumber System.Nullable < EventStore.Core.Data.TFPos > deletedLinkOrEventPosition System.Nullable < EventStore.Core.Data.TFPos > deletedEventPosition System.String positionStreamId System.Nullable < System.Int32 > positionEventNumber CheckpointTag preTagged SendPartitionEof(String, CheckpointTag) Declaration protected void SendPartitionEof(string partition, CheckpointTag preTagged) Parameters Type Name System.String partition CheckpointTag preTagged Implements IEventReader IDisposable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.WriteQueryEofProjectionProcessingPhase.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.WriteQueryEofProjectionProcessingPhase.html",
    "title": "Class WriteQueryEofProjectionProcessingPhase | Event Store",
    "keywords": "Class WriteQueryEofProjectionProcessingPhase Inheritance System.Object WriteQueryResultProjectionProcessingPhaseBase WriteQueryEofProjectionProcessingPhase Implements IProjectionProcessingPhase IDisposable EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.GetState > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.GetResult > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.PrerecordedEventsLoaded > Inherited Members WriteQueryResultProjectionProcessingPhaseBase._resultStream WriteQueryResultProjectionProcessingPhaseBase._stateCache WriteQueryResultProjectionProcessingPhaseBase._checkpointManager WriteQueryResultProjectionProcessingPhaseBase._emittedEventWriter WriteQueryResultProjectionProcessingPhaseBase._emittedStreamsTracker WriteQueryResultProjectionProcessingPhaseBase.CheckpointManager WriteQueryResultProjectionProcessingPhaseBase.EmittedStreamsTracker WriteQueryResultProjectionProcessingPhaseBase.Dispose() WriteQueryResultProjectionProcessingPhaseBase.Handle(CoreProjectionManagementMessage.GetState) WriteQueryResultProjectionProcessingPhaseBase.Handle(CoreProjectionManagementMessage.GetResult) WriteQueryResultProjectionProcessingPhaseBase.Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded) WriteQueryResultProjectionProcessingPhaseBase.AdjustTag(CheckpointTag) WriteQueryResultProjectionProcessingPhaseBase.InitializeFromCheckpoint(CheckpointTag) WriteQueryResultProjectionProcessingPhaseBase.ProcessEvent() WriteQueryResultProjectionProcessingPhaseBase.Subscribe(CheckpointTag, Boolean) WriteQueryResultProjectionProcessingPhaseBase.SetProjectionState(PhaseState) WriteQueryResultProjectionProcessingPhaseBase.GetStatistics(ProjectionStatistics) WriteQueryResultProjectionProcessingPhaseBase.MakeZeroCheckpointTag() WriteQueryResultProjectionProcessingPhaseBase.EnsureUnsubscribed() Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public sealed class WriteQueryEofProjectionProcessingPhase : WriteQueryResultProjectionProcessingPhaseBase, IProjectionProcessingPhase, IDisposable, IHandle<CoreProjectionManagementMessage.GetState>, IHandle<CoreProjectionManagementMessage.GetResult>, IHandle<CoreProjectionProcessingMessage.PrerecordedEventsLoaded> Constructors WriteQueryEofProjectionProcessingPhase(IPublisher, Int32, String, ICoreProjectionForProcessingPhase, PartitionStateCache, ICoreProjectionCheckpointManager, IEmittedEventWriter, IEmittedStreamsTracker) Declaration public WriteQueryEofProjectionProcessingPhase(IPublisher publisher, int phase, string resultStream, ICoreProjectionForProcessingPhase coreProjection, PartitionStateCache stateCache, ICoreProjectionCheckpointManager checkpointManager, IEmittedEventWriter emittedEventWriter, IEmittedStreamsTracker emittedStreamsTracker) Parameters Type Name EventStore.Core.Bus.IPublisher publisher System.Int32 phase System.String resultStream ICoreProjectionForProcessingPhase coreProjection PartitionStateCache stateCache ICoreProjectionCheckpointManager checkpointManager IEmittedEventWriter emittedEventWriter IEmittedStreamsTracker emittedStreamsTracker Methods WriteResults(CheckpointTag) Declaration protected override IEnumerable<EmittedEventEnvelope> WriteResults(CheckpointTag phaseCheckpointTag) Parameters Type Name CheckpointTag phaseCheckpointTag Returns Type Description IEnumerable < EmittedEventEnvelope > Overrides WriteQueryResultProjectionProcessingPhaseBase.WriteResults(CheckpointTag) Implements IProjectionProcessingPhase IDisposable EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.StateReport.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.StateReport.html",
    "title": "Class StateReport | Event Store",
    "keywords": "Class StateReport Inheritance System.Object StateReport Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class StateReport : object Properties CorrelationId Declaration public string CorrelationId { get; set; } Property Value Type System.String Id Declaration public string Id { get; set; } Property Value Type System.String Partition Declaration public string Partition { get; set; } Property Value Type System.String Position Declaration public CheckpointTag Position { get; set; } Property Value Type CheckpointTag State Declaration public string State { get; set; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.OperationNotSupportedException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.OperationNotSupportedException.html",
    "title": "Class OperationNotSupportedException | Event Store",
    "keywords": "Class OperationNotSupportedException Exception thrown if an operation is not supported by a node. For example: Write operations are not supported by read only nodes. Inheritance System.Object System.Exception EventStoreConnectionException OperationNotSupportedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class OperationNotSupportedException : EventStoreConnectionException, ISerializable Constructors OperationNotSupportedException(String) Constructs a new instance of OperationNotSupportedException . Declaration public OperationNotSupportedException(string operation) Parameters Type Name System.String operation OperationNotSupportedException(String, String) Constructs a new instance of OperationNotSupportedException . Declaration public OperationNotSupportedException(string operation, string reason) Parameters Type Name System.String operation System.String reason Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionSubsystemMessage.InvalidSubsystemRestart.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionSubsystemMessage.InvalidSubsystemRestart.html",
    "title": "Class ProjectionSubsystemMessage.InvalidSubsystemRestart | Event Store",
    "keywords": "Class ProjectionSubsystemMessage.InvalidSubsystemRestart Inheritance System.Object EventStore.Core.Messaging.Message ProjectionSubsystemMessage.InvalidSubsystemRestart Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class InvalidSubsystemRestart : Message Constructors InvalidSubsystemRestart(String) Declaration public InvalidSubsystemRestart(string subsystemState) Parameters Type Name System.String subsystemState Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId SubsystemState Declaration public string SubsystemState { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.CreatePreparedCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.CreatePreparedCommand.html",
    "title": "Class CreatePreparedCommand | Event Store",
    "keywords": "Class CreatePreparedCommand Inheritance System.Object CreatePreparedCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Commands Assembly : EventStore.Projections.Core.dll Syntax public class CreatePreparedCommand : object Properties Config Declaration public PersistedProjectionConfig Config { get; set; } Property Value Type PersistedProjectionConfig HandlerType Declaration public string HandlerType { get; set; } Property Value Type System.String Id Declaration public string Id { get; set; } Property Value Type System.String Name Declaration public string Name { get; set; } Property Value Type System.String Query Declaration public string Query { get; set; } Property Value Type System.String SourceDefinition Declaration public QuerySourcesDefinition SourceDefinition { get; set; } Property Value Type QuerySourcesDefinition Version Declaration public PersistedProjectionVersion Version { get; set; } Property Value Type PersistedProjectionVersion"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Management.ManagedProjection.PersistedState.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Management.ManagedProjection.PersistedState.html",
    "title": "Class ManagedProjection.PersistedState | Event Store",
    "keywords": "Class ManagedProjection.PersistedState Inheritance System.Object ManagedProjection.PersistedState Namespace : EventStore.Projections.Core.Services.Management Assembly : EventStore.Projections.Core.dll Syntax public class PersistedState : object Constructors PersistedState() Declaration public PersistedState() Fields NumberOfPrequisitesMetForDeletion Declaration public int NumberOfPrequisitesMetForDeletion Field Value Type System.Int32 Properties CheckpointAfterMs Declaration public int CheckpointAfterMs { get; set; } Property Value Type System.Int32 CheckpointHandledThreshold Declaration public int CheckpointHandledThreshold { get; set; } Property Value Type System.Int32 CheckpointsDisabled Declaration public bool? CheckpointsDisabled { get; set; } Property Value Type System.Nullable < System.Boolean > CheckpointUnhandledBytesThreshold Declaration public int CheckpointUnhandledBytesThreshold { get; set; } Property Value Type System.Int32 CreateTempStreams Declaration public bool? CreateTempStreams { get; set; } Property Value Type System.Nullable < System.Boolean > DeleteCheckpointStream Declaration public bool DeleteCheckpointStream { get; set; } Property Value Type System.Boolean Deleted Declaration public bool Deleted { get; set; } Property Value Type System.Boolean DeleteEmittedStreams Declaration public bool DeleteEmittedStreams { get; set; } Property Value Type System.Boolean DeleteStateStream Declaration public bool DeleteStateStream { get; set; } Property Value Type System.Boolean Deleting Declaration public bool Deleting { get; set; } Property Value Type System.Boolean EmitEnabled Declaration public bool? EmitEnabled { get; set; } Property Value Type System.Nullable < System.Boolean > Enabled Declaration public bool Enabled { get; set; } Property Value Type System.Boolean Epoch Declaration public long? Epoch { get; set; } Property Value Type System.Nullable < System.Int64 > HandlerType Declaration public string HandlerType { get; set; } Property Value Type System.String MaxAllowedWritesInFlight Declaration public int MaxAllowedWritesInFlight { get; set; } Property Value Type System.Int32 MaxWriteBatchLength Declaration public int MaxWriteBatchLength { get; set; } Property Value Type System.Int32 Message Declaration public string Message { get; set; } Property Value Type System.String Mode Declaration public ProjectionMode Mode { get; set; } Property Value Type ProjectionMode PendingEventsThreshold Declaration public int PendingEventsThreshold { get; set; } Property Value Type System.Int32 Query Declaration public string Query { get; set; } Property Value Type System.String RunAs Declaration public SerializedRunAs RunAs { get; set; } Property Value Type SerializedRunAs SourceDefinition Declaration public ProjectionSourceDefinition SourceDefinition { get; set; } Property Value Type ProjectionSourceDefinition TrackEmittedStreams Declaration public bool? TrackEmittedStreams { get; set; } Property Value Type System.Nullable < System.Boolean > Version Declaration public long? Version { get; set; } Property Value Type System.Nullable < System.Int64 >"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedEventEnvelope.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedEventEnvelope.html",
    "title": "Class EmittedEventEnvelope | Event Store",
    "keywords": "Class EmittedEventEnvelope Inheritance System.Object EmittedEventEnvelope Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public sealed class EmittedEventEnvelope : object Constructors EmittedEventEnvelope(EmittedEvent, EmittedStream.WriterConfiguration.StreamMetadata) Declaration public EmittedEventEnvelope(EmittedEvent event, EmittedStream.WriterConfiguration.StreamMetadata streamMetadata = null) Parameters Type Name EmittedEvent event EmittedStream.WriterConfiguration.StreamMetadata streamMetadata Fields Event Declaration public readonly EmittedEvent Event Field Value Type EmittedEvent StreamMetadata Declaration public readonly EmittedStream.WriterConfiguration.StreamMetadata StreamMetadata Field Value Type EmittedStream.WriterConfiguration.StreamMetadata"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.PositionTagger.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.PositionTagger.html",
    "title": "Class PositionTagger | Event Store",
    "keywords": "Class PositionTagger Inheritance System.Object PositionTagger EventByTypeIndexPositionTagger MultiStreamPositionTagger PhasePositionTagger PreparePositionTagger PreTaggedPositionTagger StreamPositionTagger TransactionFilePositionTagger Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public abstract class PositionTagger : object Constructors PositionTagger(Int32) Declaration public PositionTagger(int phase) Parameters Type Name System.Int32 phase Fields Phase Declaration public readonly int Phase Field Value Type System.Int32 Methods AdjustTag(CheckpointTag) Declaration public abstract CheckpointTag AdjustTag(CheckpointTag tag) Parameters Type Name CheckpointTag tag Returns Type Description CheckpointTag IsCompatible(CheckpointTag) Declaration public abstract bool IsCompatible(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag Returns Type Description System.Boolean IsMessageAfterCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public abstract bool IsMessageAfterCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.CommittedEventDistributed committedEvent Returns Type Description System.Boolean MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public abstract CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.CommittedEventDistributed committedEvent Returns Type Description CheckpointTag MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionDeleted) Declaration public abstract CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.EventReaderPartitionDeleted partitionDeleted) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.EventReaderPartitionDeleted partitionDeleted Returns Type Description CheckpointTag MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionEof) Declaration public abstract CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.EventReaderPartitionEof partitionEof) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.EventReaderPartitionEof partitionEof Returns Type Description CheckpointTag MakeZeroCheckpointTag() Declaration public abstract CheckpointTag MakeZeroCheckpointTag() Returns Type Description CheckpointTag"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop.html",
    "title": "Class CoreProjectionManagementMessage.Stop | Event Store",
    "keywords": "Class CoreProjectionManagementMessage.Stop Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionManagementControlMessage CoreProjectionManagementMessage.Stop Inherited Members CoreProjectionManagementControlMessage.WorkerId CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Stop : CoreProjectionManagementControlMessage Constructors Stop(Guid, Guid) Declaration public Stop(Guid projectionId, Guid workerId) Parameters Type Name Guid projectionId Guid workerId Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionManagementControlMessage.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.ControlMessage.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.ControlMessage.html",
    "title": "Class ProjectionManagementMessage.Command.ControlMessage | Event Store",
    "keywords": "Class ProjectionManagementMessage.Command.ControlMessage Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Command.ControlMessage ProjectionManagementMessage.Command.Abort ProjectionManagementMessage.Command.Delete ProjectionManagementMessage.Command.Disable ProjectionManagementMessage.Command.Enable ProjectionManagementMessage.Command.GetConfig ProjectionManagementMessage.Command.GetQuery ProjectionManagementMessage.Command.Post ProjectionManagementMessage.Command.PostBatch ProjectionManagementMessage.Command.Reset ProjectionManagementMessage.Command.SetRunAs ProjectionManagementMessage.Command.UpdateConfig ProjectionManagementMessage.Command.UpdateQuery Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public abstract class ControlMessage : Message Constructors ControlMessage(IEnvelope, ProjectionManagementMessage.RunAs) Declaration protected ControlMessage(IEnvelope envelope, ProjectionManagementMessage.RunAs runAs) Parameters Type Name EventStore.Core.Messaging.IEnvelope envelope ProjectionManagementMessage.RunAs runAs Fields RunAs Declaration public readonly ProjectionManagementMessage.RunAs RunAs Field Value Type ProjectionManagementMessage.RunAs Properties Envelope Declaration public IEnvelope Envelope { get; } Property Value Type EventStore.Core.Messaging.IEnvelope MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.Post.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.Post.html",
    "title": "Class ProjectionManagementMessage.Command.Post | Event Store",
    "keywords": "Class ProjectionManagementMessage.Command.Post Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Command.ControlMessage ProjectionManagementMessage.Command.Post Inherited Members ProjectionManagementMessage.Command.ControlMessage.RunAs ProjectionManagementMessage.Command.ControlMessage.Envelope EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Post : ProjectionManagementMessage.Command.ControlMessage Constructors Post(IEnvelope, ProjectionManagementMessage.RunAs, String, Boolean) Declaration public Post(IEnvelope envelope, ProjectionManagementMessage.RunAs runAs, string query, bool enabled) Parameters Type Name EventStore.Core.Messaging.IEnvelope envelope ProjectionManagementMessage.RunAs runAs System.String query System.Boolean enabled Post(IEnvelope, ProjectionMode, String, ProjectionManagementMessage.RunAs, String, String, Boolean, Boolean, Boolean, Boolean, Boolean) Declaration public Post(IEnvelope envelope, ProjectionMode mode, string name, ProjectionManagementMessage.RunAs runAs, string handlerType, string query, bool enabled, bool checkpointsEnabled, bool emitEnabled, bool trackEmittedStreams, bool enableRunAs = false) Parameters Type Name EventStore.Core.Messaging.IEnvelope envelope ProjectionMode mode System.String name ProjectionManagementMessage.RunAs runAs System.String handlerType System.String query System.Boolean enabled System.Boolean checkpointsEnabled System.Boolean emitEnabled System.Boolean trackEmittedStreams System.Boolean enableRunAs Post(IEnvelope, ProjectionMode, String, ProjectionManagementMessage.RunAs, Type, String, Boolean, Boolean, Boolean, Boolean, Boolean) Declaration public Post(IEnvelope envelope, ProjectionMode mode, string name, ProjectionManagementMessage.RunAs runAs, Type handlerType, string query, bool enabled, bool checkpointsEnabled, bool emitEnabled, bool trackEmittedStreams, bool enableRunAs = false) Parameters Type Name EventStore.Core.Messaging.IEnvelope envelope ProjectionMode mode System.String name ProjectionManagementMessage.RunAs runAs Type handlerType System.String query System.Boolean enabled System.Boolean checkpointsEnabled System.Boolean emitEnabled System.Boolean trackEmittedStreams System.Boolean enableRunAs Properties CheckpointsEnabled Declaration public bool CheckpointsEnabled { get; } Property Value Type System.Boolean EmitEnabled Declaration public bool EmitEnabled { get; } Property Value Type System.Boolean Enabled Declaration public bool Enabled { get; } Property Value Type System.Boolean EnableRunAs Declaration public bool EnableRunAs { get; } Property Value Type System.Boolean HandlerType Declaration public string HandlerType { get; } Property Value Type System.String Mode Declaration public ProjectionMode Mode { get; } Property Value Type ProjectionMode MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ProjectionManagementMessage.Command.ControlMessage.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String Query Declaration public string Query { get; } Property Value Type System.String TrackEmittedStreams Declaration public bool TrackEmittedStreams { get; } Property Value Type System.Boolean"
  },
  "dotnet-api/code/EventStore.ClientAPI.EventStoreTransaction.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.EventStoreTransaction.html",
    "title": "Class EventStoreTransaction | Event Store",
    "keywords": "Class EventStoreTransaction Represents a multi-request transaction with the Event Store Inheritance System.Object EventStoreTransaction Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class EventStoreTransaction : IDisposable Fields TransactionId The ID of the transaction. This can be used to recover a transaction later. Declaration public readonly long TransactionId Field Value Type System.Int64 Methods CommitAsync() Asynchronously commits this transaction Declaration public Task<WriteResult> CommitAsync() Returns Type Description System.Threading.Tasks.Task < WriteResult > A System.Threading.Tasks.Task that returns expected version for following write requests Dispose() Disposes this transaction rolling it back if not already committed Declaration public void Dispose() Rollback() Rollsback this transaction. Declaration public void Rollback() WriteAsync(EventData[]) Writes to a transaction in the event store asynchronously Declaration public Task WriteAsync(params EventData[] events) Parameters Type Name EventData [] events Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task allowing the caller to control the async operation WriteAsync(IEnumerable<EventData>) Writes to a transaction in the event store asynchronously Declaration public Task WriteAsync(IEnumerable<EventData> events) Parameters Type Name System.Collections.Generic.IEnumerable < EventData > events Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task allowing the caller to control the async operation Implements System.IDisposable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.ProjectionWorkerStarted.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.ProjectionWorkerStarted.html",
    "title": "Class ProjectionWorkerStarted | Event Store",
    "keywords": "Class ProjectionWorkerStarted Inheritance System.Object ProjectionWorkerStarted Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionWorkerStarted : object Properties Id Declaration public string Id { get; set; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.PostBatch.ProjectionPost.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.PostBatch.ProjectionPost.html",
    "title": "Class ProjectionManagementMessage.Command.PostBatch.ProjectionPost | Event Store",
    "keywords": "Class ProjectionManagementMessage.Command.PostBatch.ProjectionPost Inheritance System.Object ProjectionManagementMessage.Command.PostBatch.ProjectionPost Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionPost : object Constructors ProjectionPost(ProjectionMode, ProjectionManagementMessage.RunAs, String, String, String, Boolean, Boolean, Boolean, Boolean, Boolean) Declaration public ProjectionPost(ProjectionMode mode, ProjectionManagementMessage.RunAs runAs, string name, string handlerType, string query, bool enabled, bool checkpointsEnabled, bool emitEnabled, bool enableRunAs, bool trackEmittedStreams) Parameters Type Name ProjectionMode mode ProjectionManagementMessage.RunAs runAs System.String name System.String handlerType System.String query System.Boolean enabled System.Boolean checkpointsEnabled System.Boolean emitEnabled System.Boolean enableRunAs System.Boolean trackEmittedStreams Properties CheckpointsEnabled Declaration public bool CheckpointsEnabled { get; } Property Value Type System.Boolean EmitEnabled Declaration public bool EmitEnabled { get; } Property Value Type System.Boolean Enabled Declaration public bool Enabled { get; } Property Value Type System.Boolean EnableRunAs Declaration public bool EnableRunAs { get; } Property Value Type System.Boolean HandlerType Declaration public string HandlerType { get; } Property Value Type System.String Mode Declaration public ProjectionMode Mode { get; } Property Value Type ProjectionMode Name Declaration public string Name { get; } Property Value Type System.String Query Declaration public string Query { get; } Property Value Type System.String RunAs Declaration public ProjectionManagementMessage.RunAs RunAs { get; } Property Value Type ProjectionManagementMessage.RunAs TrackEmittedStreams Declaration public bool TrackEmittedStreams { get; } Property Value Type System.Boolean"
  },
  "dotnet-api/code/EventStore.Projections.Core.Standard.IndexStreams.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Standard.IndexStreams.html",
    "title": "Class IndexStreams | Event Store",
    "keywords": "Class IndexStreams Inheritance System.Object IndexStreams Implements IProjectionStateHandler IDisposable ISourceDefinitionSource Namespace : EventStore.Projections.Core.Standard Assembly : EventStore.Projections.Core.dll Syntax public class IndexStreams : object, IProjectionStateHandler, IDisposable, ISourceDefinitionSource Constructors IndexStreams(String, Action<String, Object[]>) Declaration public IndexStreams(string source, Action<string, object[]> logger) Parameters Type Name System.String source Action < System.String , System.Object []> logger Methods ConfigureSourceProcessingStrategy(SourceDefinitionBuilder) Declaration public void ConfigureSourceProcessingStrategy(SourceDefinitionBuilder builder) Parameters Type Name SourceDefinitionBuilder builder Dispose() Declaration public void Dispose() GetSourceDefinition() Declaration public IQuerySources GetSourceDefinition() Returns Type Description IQuerySources GetStatePartition(CheckpointTag, String, ResolvedEvent) Declaration public string GetStatePartition(CheckpointTag eventPosition, string category, ResolvedEvent data) Parameters Type Name CheckpointTag eventPosition System.String category ResolvedEvent data Returns Type Description System.String Initialize() Declaration public void Initialize() InitializeShared() Declaration public void InitializeShared() Load(String) Declaration public void Load(string state) Parameters Type Name System.String state LoadShared(String) Declaration public void LoadShared(string state) Parameters Type Name System.String state ProcessEvent(String, CheckpointTag, String, ResolvedEvent, out String, out String, out EmittedEventEnvelope[]) Declaration public bool ProcessEvent(string partition, CheckpointTag eventPosition, string category1, ResolvedEvent data, out string newState, out string newSharedState, out EmittedEventEnvelope[] emittedEvents) Parameters Type Name System.String partition CheckpointTag eventPosition System.String category1 ResolvedEvent data System.String newState System.String newSharedState EmittedEventEnvelope [] emittedEvents Returns Type Description System.Boolean ProcessPartitionCreated(String, CheckpointTag, ResolvedEvent, out EmittedEventEnvelope[]) Declaration public bool ProcessPartitionCreated(string partition, CheckpointTag createPosition, ResolvedEvent data, out EmittedEventEnvelope[] emittedEvents) Parameters Type Name System.String partition CheckpointTag createPosition ResolvedEvent data EmittedEventEnvelope [] emittedEvents Returns Type Description System.Boolean ProcessPartitionDeleted(String, CheckpointTag, out String) Declaration public bool ProcessPartitionDeleted(string partition, CheckpointTag deletePosition, out string newState) Parameters Type Name System.String partition CheckpointTag deletePosition System.String newState Returns Type Description System.Boolean TransformStateToResult() Declaration public string TransformStateToResult() Returns Type Description System.String Implements IProjectionStateHandler IDisposable ISourceDefinitionSource"
  },
  "dotnet-api/code/EventStore.ClientAPI.ClientAuthenticationFailedEventArgs.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ClientAuthenticationFailedEventArgs.html",
    "title": "Class ClientAuthenticationFailedEventArgs | Event Store",
    "keywords": "Class ClientAuthenticationFailedEventArgs Event Arguments for the event raised when an IEventStoreConnection fails to authenticate against an Event Store server. Inheritance System.Object System.EventArgs ClientAuthenticationFailedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class ClientAuthenticationFailedEventArgs : EventArgs Constructors ClientAuthenticationFailedEventArgs(IEventStoreConnection, String) Constructs a new instance of ClientAuthenticationFailedEventArgs . Declaration public ClientAuthenticationFailedEventArgs(IEventStoreConnection connection, string reason) Parameters Type Name IEventStoreConnection connection System.String reason Properties Connection The IEventStoreConnection responsible for raising the event. Declaration public IEventStoreConnection Connection { get; } Property Value Type IEventStoreConnection Reason A reason for authentication failure, if known. Declaration public string Reason { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.ProjectionStatistics.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.ProjectionStatistics.html",
    "title": "Class ProjectionStatistics | Event Store",
    "keywords": "Class ProjectionStatistics Inheritance System.Object ProjectionStatistics Namespace : EventStore.Projections.Core.Services Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionStatistics : object Properties BufferedEvents Declaration public int BufferedEvents { get; set; } Property Value Type System.Int32 CheckpointStatus Declaration public string CheckpointStatus { get; set; } Property Value Type System.String CoreProcessingTime Declaration public long CoreProcessingTime { get; set; } Property Value Type System.Int64 EffectiveName Declaration public string EffectiveName { get; set; } Property Value Type System.String Enabled Declaration public bool Enabled { get; set; } Property Value Type System.Boolean Epoch Declaration public long Epoch { get; set; } Property Value Type System.Int64 EventsProcessedAfterRestart Declaration public int EventsProcessedAfterRestart { get; set; } Property Value Type System.Int32 LastCheckpoint Declaration public string LastCheckpoint { get; set; } Property Value Type System.String MasterStatus Declaration public ManagedProjectionState MasterStatus { get; set; } Property Value Type ManagedProjectionState Mode Declaration public ProjectionMode Mode { get; set; } Property Value Type ProjectionMode Name Declaration public string Name { get; set; } Property Value Type System.String PartitionsCached Declaration public int PartitionsCached { get; set; } Property Value Type System.Int32 Position Declaration public string Position { get; set; } Property Value Type System.String Progress Declaration public float Progress { get; set; } Property Value Type System.Single ProjectionId Declaration public long ProjectionId { get; set; } Property Value Type System.Int64 ReadsInProgress Declaration public int ReadsInProgress { get; set; } Property Value Type System.Int32 ResultStreamName Declaration public string ResultStreamName { get; set; } Property Value Type System.String StateReason Declaration public string StateReason { get; set; } Property Value Type System.String Status Declaration public string Status { get; set; } Property Value Type System.String Version Declaration public long Version { get; set; } Property Value Type System.Int64 WritePendingEventsAfterCheckpoint Declaration public int WritePendingEventsAfterCheckpoint { get; set; } Property Value Type System.Int32 WritePendingEventsBeforeCheckpoint Declaration public int WritePendingEventsBeforeCheckpoint { get; set; } Property Value Type System.Int32 WritesInProgress Declaration public int WritesInProgress { get; set; } Property Value Type System.Int32 Methods Clone() Declaration public ProjectionStatistics Clone() Returns Type Description ProjectionStatistics Equals(ProjectionStatistics) Declaration protected bool Equals(ProjectionStatistics other) Parameters Type Name ProjectionStatistics other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name System.Object obj Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32"
  },
  "dotnet-api/code/EventStore.ClientAPI.ClientClosedEventArgs.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ClientClosedEventArgs.html",
    "title": "Class ClientClosedEventArgs | Event Store",
    "keywords": "Class ClientClosedEventArgs Event Arguments for the event raised when an IEventStoreConnection is disconnected from an Event Store server. Inheritance System.Object System.EventArgs ClientClosedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class ClientClosedEventArgs : EventArgs Constructors ClientClosedEventArgs(IEventStoreConnection, String) Constructs a new instance of ClientClosedEventArgs . Declaration public ClientClosedEventArgs(IEventStoreConnection connection, string reason) Parameters Type Name IEventStoreConnection connection System.String reason Properties Connection The IEventStoreConnection responsible for raising the event. Declaration public IEventStoreConnection Connection { get; } Property Value Type IEventStoreConnection Reason A description of the reason the connection was closed if closing was initiated by the server or client API directly rather than by calling Close() . Declaration public string Reason { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.v8.Js1.LoadModuleDelegate.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.v8.Js1.LoadModuleDelegate.html",
    "title": "Delegate Js1.LoadModuleDelegate | Event Store",
    "keywords": "Delegate Js1.LoadModuleDelegate Namespace : EventStore.Projections.Core.v8 Assembly : EventStore.Projections.Core.dll Syntax public delegate IntPtr LoadModuleDelegate(IntPtr prelude, string moduleName); Parameters Type Name Description IntPtr prelude System.String moduleName Returns Type Description IntPtr"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore.html",
    "title": "Class ProjectionCoreServiceMessage.StartCore | Event Store",
    "keywords": "Class ProjectionCoreServiceMessage.StartCore Inheritance System.Object EventStore.Core.Messaging.Message ProjectionCoreServiceMessage.StartCore Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class StartCore : Message Constructors StartCore(Guid) Declaration public StartCore(Guid instanceCorrelationId) Parameters Type Name Guid instanceCorrelationId Fields InstanceCorrelationId Declaration public readonly Guid InstanceCorrelationId Field Value Type Guid Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProjectionCoreService.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProjectionCoreService.html",
    "title": "Class ProjectionCoreService | Event Store",
    "keywords": "Class ProjectionCoreService Inheritance System.Object ProjectionCoreService Implements EventStore.Core.Bus.IHandle < ProjectionCoreServiceMessage.StartCore > EventStore.Core.Bus.IHandle < ProjectionCoreServiceMessage.StopCore > EventStore.Core.Bus.IHandle < ProjectionCoreServiceMessage.CoreTick > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.CreateAndPrepare > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.CreatePrepared > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.Dispose > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.Start > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.LoadStopped > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.Stop > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.Kill > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.GetState > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.GetResult > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.CheckpointCompleted > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.CheckpointLoaded > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.PrerecordedEventsLoaded > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.RestartRequested > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.Failed > EventStore.Core.Bus.IHandle < ProjectionCoreServiceMessage.StopCoreTimeout > EventStore.Core.Bus.IHandle < CoreProjectionStatusMessage.Suspended > Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionCoreService : object, IHandle<ProjectionCoreServiceMessage.StartCore>, IHandle<ProjectionCoreServiceMessage.StopCore>, IHandle<ProjectionCoreServiceMessage.CoreTick>, IHandle<CoreProjectionManagementMessage.CreateAndPrepare>, IHandle<CoreProjectionManagementMessage.CreatePrepared>, IHandle<CoreProjectionManagementMessage.Dispose>, IHandle<CoreProjectionManagementMessage.Start>, IHandle<CoreProjectionManagementMessage.LoadStopped>, IHandle<CoreProjectionManagementMessage.Stop>, IHandle<CoreProjectionManagementMessage.Kill>, IHandle<CoreProjectionManagementMessage.GetState>, IHandle<CoreProjectionManagementMessage.GetResult>, IHandle<CoreProjectionProcessingMessage.CheckpointCompleted>, IHandle<CoreProjectionProcessingMessage.CheckpointLoaded>, IHandle<CoreProjectionProcessingMessage.PrerecordedEventsLoaded>, IHandle<CoreProjectionProcessingMessage.RestartRequested>, IHandle<CoreProjectionProcessingMessage.Failed>, IHandle<ProjectionCoreServiceMessage.StopCoreTimeout>, IHandle<CoreProjectionStatusMessage.Suspended> Constructors ProjectionCoreService(Guid, IPublisher, IPublisher, ReaderSubscriptionDispatcher, ITimeProvider, IODispatcher, ISingletonTimeoutScheduler) Declaration public ProjectionCoreService(Guid workerId, IPublisher inputQueue, IPublisher publisher, ReaderSubscriptionDispatcher subscriptionDispatcher, ITimeProvider timeProvider, IODispatcher ioDispatcher, ISingletonTimeoutScheduler timeoutScheduler) Parameters Type Name Guid workerId EventStore.Core.Bus.IPublisher inputQueue EventStore.Core.Bus.IPublisher publisher ReaderSubscriptionDispatcher subscriptionDispatcher EventStore.Core.Services.TimerService.ITimeProvider timeProvider EventStore.Core.Helpers.IODispatcher ioDispatcher ISingletonTimeoutScheduler timeoutScheduler Fields SubComponentName Declaration public const string SubComponentName = null Field Value Type System.String Properties Logger Declaration public ILogger Logger { get; } Property Value Type EventStore.Common.Log.ILogger Methods CreateStateHandler(ISingletonTimeoutScheduler, ILogger, String, String) Declaration public static IProjectionStateHandler CreateStateHandler(ISingletonTimeoutScheduler singletonTimeoutScheduler, ILogger logger, string handlerType, string query) Parameters Type Name ISingletonTimeoutScheduler singletonTimeoutScheduler EventStore.Common.Log.ILogger logger System.String handlerType System.String query Returns Type Description IProjectionStateHandler Handle(CoreProjectionProcessingMessage.CheckpointCompleted) Declaration public void Handle(CoreProjectionProcessingMessage.CheckpointCompleted message) Parameters Type Name CoreProjectionProcessingMessage.CheckpointCompleted message Handle(CoreProjectionProcessingMessage.CheckpointLoaded) Declaration public void Handle(CoreProjectionProcessingMessage.CheckpointLoaded message) Parameters Type Name CoreProjectionProcessingMessage.CheckpointLoaded message Handle(CoreProjectionProcessingMessage.Failed) Declaration public void Handle(CoreProjectionProcessingMessage.Failed message) Parameters Type Name CoreProjectionProcessingMessage.Failed message Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded) Declaration public void Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded message) Parameters Type Name CoreProjectionProcessingMessage.PrerecordedEventsLoaded message Handle(CoreProjectionProcessingMessage.RestartRequested) Declaration public void Handle(CoreProjectionProcessingMessage.RestartRequested message) Parameters Type Name CoreProjectionProcessingMessage.RestartRequested message Handle(CoreProjectionManagementMessage.CreateAndPrepare) Declaration public void Handle(CoreProjectionManagementMessage.CreateAndPrepare message) Parameters Type Name CoreProjectionManagementMessage.CreateAndPrepare message Handle(CoreProjectionManagementMessage.CreatePrepared) Declaration public void Handle(CoreProjectionManagementMessage.CreatePrepared message) Parameters Type Name CoreProjectionManagementMessage.CreatePrepared message Handle(CoreProjectionManagementMessage.Dispose) Declaration public void Handle(CoreProjectionManagementMessage.Dispose message) Parameters Type Name CoreProjectionManagementMessage.Dispose message Handle(CoreProjectionManagementMessage.GetResult) Declaration public void Handle(CoreProjectionManagementMessage.GetResult message) Parameters Type Name CoreProjectionManagementMessage.GetResult message Handle(CoreProjectionManagementMessage.GetState) Declaration public void Handle(CoreProjectionManagementMessage.GetState message) Parameters Type Name CoreProjectionManagementMessage.GetState message Handle(CoreProjectionManagementMessage.Kill) Declaration public void Handle(CoreProjectionManagementMessage.Kill message) Parameters Type Name CoreProjectionManagementMessage.Kill message Handle(CoreProjectionManagementMessage.LoadStopped) Declaration public void Handle(CoreProjectionManagementMessage.LoadStopped message) Parameters Type Name CoreProjectionManagementMessage.LoadStopped message Handle(CoreProjectionManagementMessage.Start) Declaration public void Handle(CoreProjectionManagementMessage.Start message) Parameters Type Name CoreProjectionManagementMessage.Start message Handle(CoreProjectionManagementMessage.Stop) Declaration public void Handle(CoreProjectionManagementMessage.Stop message) Parameters Type Name CoreProjectionManagementMessage.Stop message Handle(CoreProjectionStatusMessage.Suspended) Declaration public void Handle(CoreProjectionStatusMessage.Suspended message) Parameters Type Name CoreProjectionStatusMessage.Suspended message Handle(ProjectionCoreServiceMessage.CoreTick) Declaration public void Handle(ProjectionCoreServiceMessage.CoreTick message) Parameters Type Name ProjectionCoreServiceMessage.CoreTick message Handle(ProjectionCoreServiceMessage.StartCore) Declaration public void Handle(ProjectionCoreServiceMessage.StartCore message) Parameters Type Name ProjectionCoreServiceMessage.StartCore message Handle(ProjectionCoreServiceMessage.StopCore) Declaration public void Handle(ProjectionCoreServiceMessage.StopCore message) Parameters Type Name ProjectionCoreServiceMessage.StopCore message Handle(ProjectionCoreServiceMessage.StopCoreTimeout) Declaration public void Handle(ProjectionCoreServiceMessage.StopCoreTimeout message) Parameters Type Name ProjectionCoreServiceMessage.StopCoreTimeout message Implements EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.ClientAPI.PersistentSubscriptionSettings.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.PersistentSubscriptionSettings.html",
    "title": "Class PersistentSubscriptionSettings | Event Store",
    "keywords": "Class PersistentSubscriptionSettings Represents the settings for a EventStore.ClientAPI.PersistentEventStoreSubscription . You should not use this directly, but instead created via a PersistentSubscriptionSettingsBuilder . Inheritance System.Object PersistentSubscriptionSettings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class PersistentSubscriptionSettings Fields CheckPointAfter The amount of time to try to checkpoint after. Declaration public readonly TimeSpan CheckPointAfter Field Value Type System.TimeSpan ExtraStatistics Whether to track latency statistics on this subscription. Declaration public readonly bool ExtraStatistics Field Value Type System.Boolean HistoryBufferSize The number of events to cache when paging through history. Declaration public int HistoryBufferSize Field Value Type System.Int32 LiveBufferSize The size of the buffer (in-memory) listening to live messages as they happen before paging occurs. Declaration public int LiveBufferSize Field Value Type System.Int32 MaxCheckPointCount The maximum number of messages not checkpointed before forcing a checkpoint. Declaration public readonly int MaxCheckPointCount Field Value Type System.Int32 MaxRetryCount The maximum number of retries (due to timeout) before a message is considered to be parked. Declaration public int MaxRetryCount Field Value Type System.Int32 MaxSubscriberCount The maximum number of subscribers allowed. Declaration public readonly int MaxSubscriberCount Field Value Type System.Int32 MessageTimeout The amount of time after which to consider a message as timedout and retried. Declaration public readonly TimeSpan MessageTimeout Field Value Type System.TimeSpan MinCheckPointCount The minimum number of messages to write to a checkpoint. Declaration public readonly int MinCheckPointCount Field Value Type System.Int32 NamedConsumerStrategy The strategy to use for distributing events to client consumers. See SystemConsumerStrategies for system supported strategies. Declaration public string NamedConsumerStrategy Field Value Type System.String ReadBatchSize The number of events read at a time when paging through history. Declaration public int ReadBatchSize Field Value Type System.Int32 ResolveLinkTos Whether the EventStore.ClientAPI.PersistentEventStoreSubscription should resolve linkTo events to their linked events. Declaration public readonly bool ResolveLinkTos Field Value Type System.Boolean StartFrom Which event position in the stream the subscription should start from. Declaration public readonly long StartFrom Field Value Type System.Int64 Methods Create() Creates a new PersistentSubscriptionSettingsBuilder object Declaration public static PersistentSubscriptionSettingsBuilder Create() Returns Type Description PersistentSubscriptionSettingsBuilder a new PersistentSubscriptionSettingsBuilder object"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Internal.ReadTimeout.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Internal.ReadTimeout.html",
    "title": "Class ProjectionManagementMessage.Internal.ReadTimeout | Event Store",
    "keywords": "Class ProjectionManagementMessage.Internal.ReadTimeout Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Internal.ReadTimeout Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class ReadTimeout : Message Constructors ReadTimeout(Guid, String) Declaration public ReadTimeout(Guid correlationId, string streamId) Parameters Type Name Guid correlationId System.String streamId ReadTimeout(Guid, String, Dictionary<String, Object>) Declaration public ReadTimeout(Guid correlationId, string streamId, Dictionary<string, object> parameters) Parameters Type Name Guid correlationId System.String streamId Dictionary < System.String , System.Object > parameters Properties CorrelationId Declaration public Guid CorrelationId { get; } Property Value Type Guid MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId Parameters Declaration public Dictionary<string, object> Parameters { get; } Property Value Type Dictionary < System.String , System.Object > StreamId Declaration public string StreamId { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionCheckpointWriterMessage.RestartRequested.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionCheckpointWriterMessage.RestartRequested.html",
    "title": "Class CoreProjectionCheckpointWriterMessage.RestartRequested | Event Store",
    "keywords": "Class CoreProjectionCheckpointWriterMessage.RestartRequested Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionCheckpointWriterMessage.RestartRequested Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public sealed class RestartRequested : Message Constructors RestartRequested(String) Declaration public RestartRequested(string reason) Parameters Type Name System.String reason Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId Reason Declaration public string Reason { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.SystemData.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.SystemData.html",
    "title": "Namespace EventStore.ClientAPI.SystemData | Event Store",
    "keywords": "Namespace EventStore.ClientAPI.SystemData Classes UserCredentials A username/password pair used for authentication and authorization to perform operations over an IEventStoreConnection ."
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.UpdateQueryCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.UpdateQueryCommand.html",
    "title": "Class UpdateQueryCommand | Event Store",
    "keywords": "Class UpdateQueryCommand Inheritance System.Object UpdateQueryCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class UpdateQueryCommand : object Fields EmitEnabled Declaration public bool? EmitEnabled Field Value Type System.Nullable < System.Boolean > HandlerType Declaration public string HandlerType Field Value Type System.String Name Declaration public string Name Field Value Type System.String Query Declaration public string Query Field Value Type System.String RunAs Declaration public SerializedRunAs RunAs Field Value Type SerializedRunAs"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedStreamsWriter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedStreamsWriter.html",
    "title": "Class EmittedStreamsWriter | Event Store",
    "keywords": "Class EmittedStreamsWriter Inheritance System.Object EmittedStreamsWriter Implements IEmittedStreamsWriter Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class EmittedStreamsWriter : object, IEmittedStreamsWriter Constructors EmittedStreamsWriter(IODispatcher) Declaration public EmittedStreamsWriter(IODispatcher ioDispatcher) Parameters Type Name EventStore.Core.Helpers.IODispatcher ioDispatcher Methods WriteEvents(String, Int64, Event[], IPrincipal, Action<ClientMessage.WriteEventsCompleted>) Declaration public void WriteEvents(string streamId, long expectedVersion, Event[] events, IPrincipal writeAs, Action<ClientMessage.WriteEventsCompleted> complete) Parameters Type Name System.String streamId System.Int64 expectedVersion EventStore.Core.Data.Event [] events IPrincipal writeAs Action < EventStore.Core.Messages.ClientMessage.WriteEventsCompleted > complete Implements IEmittedStreamsWriter"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.v8.V8ProjectionStateHandler.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.v8.V8ProjectionStateHandler.html",
    "title": "Class V8ProjectionStateHandler | Event Store",
    "keywords": "Class V8ProjectionStateHandler Inheritance System.Object V8ProjectionStateHandler DefaultV8ProjectionStateHandler Implements IProjectionStateHandler IDisposable ISourceDefinitionSource Namespace : EventStore.Projections.Core.Services.v8 Assembly : EventStore.Projections.Core.dll Syntax public class V8ProjectionStateHandler : object, IProjectionStateHandler, IDisposable, ISourceDefinitionSource Constructors V8ProjectionStateHandler(String, String, Func<String, Tuple<String, String>>, Action<String, Object[]>, Action<Int32, Action>) Declaration public V8ProjectionStateHandler(string preludeName, string querySource, Func<string, Tuple<string, string>> getModuleSource, Action<string, object[]> logger, Action<int, Action> cancelCallbackFactory) Parameters Type Name System.String preludeName System.String querySource Func < System.String , Tuple < System.String , System.String >> getModuleSource Action < System.String , System.Object []> logger Action < System.Int32 , Action > cancelCallbackFactory Methods Dispose() Declaration public void Dispose() GetSourceDefinition() Declaration public IQuerySources GetSourceDefinition() Returns Type Description IQuerySources GetStatePartition(CheckpointTag, String, ResolvedEvent) Declaration public string GetStatePartition(CheckpointTag eventPosition, string category, ResolvedEvent event) Parameters Type Name CheckpointTag eventPosition System.String category ResolvedEvent event Returns Type Description System.String Initialize() Declaration public void Initialize() InitializeShared() Declaration public void InitializeShared() Load(String) Declaration public void Load(string state) Parameters Type Name System.String state LoadShared(String) Declaration public void LoadShared(string state) Parameters Type Name System.String state ProcessEvent(String, CheckpointTag, String, ResolvedEvent, out String, out String, out EmittedEventEnvelope[]) Declaration public bool ProcessEvent(string partition, CheckpointTag eventPosition, string category, ResolvedEvent data, out string newState, out string newSharedState, out EmittedEventEnvelope[] emittedEvents) Parameters Type Name System.String partition CheckpointTag eventPosition System.String category ResolvedEvent data System.String newState System.String newSharedState EmittedEventEnvelope [] emittedEvents Returns Type Description System.Boolean ProcessPartitionCreated(String, CheckpointTag, ResolvedEvent, out EmittedEventEnvelope[]) Declaration public bool ProcessPartitionCreated(string partition, CheckpointTag createPosition, ResolvedEvent data, out EmittedEventEnvelope[] emittedEvents) Parameters Type Name System.String partition CheckpointTag createPosition ResolvedEvent data EmittedEventEnvelope [] emittedEvents Returns Type Description System.Boolean ProcessPartitionDeleted(String, CheckpointTag, out String) Declaration public bool ProcessPartitionDeleted(string partition, CheckpointTag deletePosition, out string newState) Parameters Type Name System.String partition CheckpointTag deletePosition System.String newState Returns Type Description System.Boolean TransformStateToResult() Declaration public string TransformStateToResult() Returns Type Description System.String Implements IProjectionStateHandler IDisposable ISourceDefinitionSource"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState.html",
    "title": "Class CoreProjectionManagementMessage.GetState | Event Store",
    "keywords": "Class CoreProjectionManagementMessage.GetState Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionManagementControlMessage CoreProjectionManagementMessage.GetState Inherited Members CoreProjectionManagementControlMessage.WorkerId CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class GetState : CoreProjectionManagementControlMessage Constructors GetState(Guid, Guid, String, Guid) Declaration public GetState(Guid correlationId, Guid projectionId, string partition, Guid workerId) Parameters Type Name Guid correlationId Guid projectionId System.String partition Guid workerId Properties CorrelationId Declaration public Guid CorrelationId { get; } Property Value Type Guid MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionManagementControlMessage.MsgTypeId Partition Declaration public string Partition { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested.html",
    "title": "Class EventReaderSubscriptionMessage.CheckpointSuggested | Event Store",
    "keywords": "Class EventReaderSubscriptionMessage.CheckpointSuggested A CheckpointSuggested message is sent to core projection to allow bookmarking a position that can be used to restore the projection processing (typically an event at this position does not satisfy projection filter) Inheritance System.Object EventStore.Core.Messaging.Message EventReaderSubscriptionMessageBase EventReaderSubscriptionMessage.CheckpointSuggested Inherited Members EventReaderSubscriptionMessageBase.CheckpointTag EventReaderSubscriptionMessageBase.Progress EventReaderSubscriptionMessageBase.SubscriptionMessageSequenceNumber EventReaderSubscriptionMessageBase.SubscriptionId EventReaderSubscriptionMessageBase.Source EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class CheckpointSuggested : EventReaderSubscriptionMessageBase Constructors CheckpointSuggested(Guid, CheckpointTag, Single, Int64, Object) Declaration public CheckpointSuggested(Guid subscriptionId, CheckpointTag checkpointTag, float progress, long subscriptionMessageSequenceNumber, object source = null) Parameters Type Name Guid subscriptionId CheckpointTag checkpointTag System.Single progress System.Int64 subscriptionMessageSequenceNumber System.Object source Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventReaderSubscriptionMessageBase.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.v8.DefaultV8ProjectionStateHandler.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.v8.DefaultV8ProjectionStateHandler.html",
    "title": "Class DefaultV8ProjectionStateHandler | Event Store",
    "keywords": "Class DefaultV8ProjectionStateHandler Inheritance System.Object V8ProjectionStateHandler DefaultV8ProjectionStateHandler Implements IProjectionStateHandler IDisposable ISourceDefinitionSource Inherited Members V8ProjectionStateHandler.Load(String) V8ProjectionStateHandler.LoadShared(String) V8ProjectionStateHandler.Initialize() V8ProjectionStateHandler.InitializeShared() V8ProjectionStateHandler.GetStatePartition(CheckpointTag, String, ResolvedEvent) V8ProjectionStateHandler.ProcessEvent(String, CheckpointTag, String, ResolvedEvent, String, String, EmittedEventEnvelope[]) V8ProjectionStateHandler.ProcessPartitionCreated(String, CheckpointTag, ResolvedEvent, EmittedEventEnvelope[]) V8ProjectionStateHandler.ProcessPartitionDeleted(String, CheckpointTag, String) V8ProjectionStateHandler.TransformStateToResult() V8ProjectionStateHandler.Dispose() V8ProjectionStateHandler.GetSourceDefinition() Namespace : EventStore.Projections.Core.Services.v8 Assembly : EventStore.Projections.Core.dll Syntax public class DefaultV8ProjectionStateHandler : V8ProjectionStateHandler, IProjectionStateHandler, IDisposable, ISourceDefinitionSource Constructors DefaultV8ProjectionStateHandler(String, Action<String, Object[]>, Action<Int32, Action>) Declaration public DefaultV8ProjectionStateHandler(string query, Action<string, object[]> logger, Action<int, Action> cancelCallbackFactory) Parameters Type Name System.String query Action < System.String , System.Object []> logger Action < System.Int32 , Action > cancelCallbackFactory Methods GetModuleSource(String) Declaration public static Tuple<string, string> GetModuleSource(string name) Parameters Type Name System.String name Returns Type Description Tuple < System.String , System.String > Implements IProjectionStateHandler IDisposable ISourceDefinitionSource"
  },
  "dotnet-api/code/EventStore.Projections.Core.Standard.StubHandler.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Standard.StubHandler.html",
    "title": "Class StubHandler | Event Store",
    "keywords": "Class StubHandler Inheritance System.Object StubHandler Implements IProjectionStateHandler IDisposable ISourceDefinitionSource Namespace : EventStore.Projections.Core.Standard Assembly : EventStore.Projections.Core.dll Syntax public class StubHandler : object, IProjectionStateHandler, IDisposable, ISourceDefinitionSource Constructors StubHandler(String, Action<String, Object[]>) Declaration public StubHandler(string source, Action<string, object[]> logger) Parameters Type Name System.String source Action < System.String , System.Object []> logger Methods ConfigureSourceProcessingStrategy(SourceDefinitionBuilder) Declaration public void ConfigureSourceProcessingStrategy(SourceDefinitionBuilder builder) Parameters Type Name SourceDefinitionBuilder builder Dispose() Declaration public void Dispose() GetSourceDefinition() Declaration public IQuerySources GetSourceDefinition() Returns Type Description IQuerySources GetStatePartition(CheckpointTag, String, ResolvedEvent) Declaration public string GetStatePartition(CheckpointTag eventPosition, string category, ResolvedEvent data) Parameters Type Name CheckpointTag eventPosition System.String category ResolvedEvent data Returns Type Description System.String Initialize() Declaration public void Initialize() InitializeShared() Declaration public void InitializeShared() Load(String) Declaration public void Load(string state) Parameters Type Name System.String state LoadShared(String) Declaration public void LoadShared(string state) Parameters Type Name System.String state ProcessEvent(String, CheckpointTag, String, ResolvedEvent, out String, out String, out EmittedEventEnvelope[]) Declaration public bool ProcessEvent(string partition, CheckpointTag eventPosition, string category1, ResolvedEvent data, out string newState, out string newSharedState, out EmittedEventEnvelope[] emittedEvents) Parameters Type Name System.String partition CheckpointTag eventPosition System.String category1 ResolvedEvent data System.String newState System.String newSharedState EmittedEventEnvelope [] emittedEvents Returns Type Description System.Boolean ProcessPartitionCreated(String, CheckpointTag, ResolvedEvent, out EmittedEventEnvelope[]) Declaration public bool ProcessPartitionCreated(string partition, CheckpointTag createPosition, ResolvedEvent data, out EmittedEventEnvelope[] emittedEvents) Parameters Type Name System.String partition CheckpointTag createPosition ResolvedEvent data EmittedEventEnvelope [] emittedEvents Returns Type Description System.Boolean ProcessPartitionDeleted(String, CheckpointTag, out String) Declaration public bool ProcessPartitionDeleted(string partition, CheckpointTag deletePosition, out string newState) Parameters Type Name System.String partition CheckpointTag deletePosition System.String newState Returns Type Description System.Boolean TransformStateToResult() Declaration public string TransformStateToResult() Returns Type Description System.String Implements IProjectionStateHandler IDisposable ISourceDefinitionSource"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.ProjectionMode.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.ProjectionMode.html",
    "title": "Enum ProjectionMode | Event Store",
    "keywords": "Enum ProjectionMode Namespace : EventStore.Projections.Core.Services Assembly : EventStore.Projections.Core.dll Syntax public enum ProjectionMode : int Fields Name Description AllNonTransient Continuous OneTime Transient Extension Methods EnumExtensions.EnumValueName<ProjectionMode>()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CheckpointTagExtensions.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CheckpointTagExtensions.html",
    "title": "Class CheckpointTagExtensions | Event Store",
    "keywords": "Class CheckpointTagExtensions Inheritance System.Object CheckpointTagExtensions Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public static class CheckpointTagExtensions : object Methods ParseCheckpointExtraJson(String) Declaration public static Dictionary<string, JToken> ParseCheckpointExtraJson(this string source) Parameters Type Name System.String source Returns Type Description Dictionary < System.String , JToken > ParseCheckpointTagCorrelationId(String) Declaration public static string ParseCheckpointTagCorrelationId(this string source) Parameters Type Name System.String source Returns Type Description System.String ParseCheckpointTagJson(Byte[]) Declaration public static CheckpointTag ParseCheckpointTagJson(this byte[] source) Parameters Type Name System.Byte [] source Returns Type Description CheckpointTag ParseCheckpointTagJson(String) Declaration public static CheckpointTag ParseCheckpointTagJson(this string source) Parameters Type Name System.String source Returns Type Description CheckpointTag ParseCheckpointTagVersionExtraJson(Byte[], ProjectionVersion) Declaration public static CheckpointTagVersion ParseCheckpointTagVersionExtraJson(this byte[] source, ProjectionVersion current) Parameters Type Name System.Byte [] source ProjectionVersion current Returns Type Description CheckpointTagVersion ParseCheckpointTagVersionExtraJson(String, ProjectionVersion) Declaration public static CheckpointTagVersion ParseCheckpointTagVersionExtraJson(this string source, ProjectionVersion current) Parameters Type Name System.String source ProjectionVersion current Returns Type Description CheckpointTagVersion"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Http.ProjectionsStatisticsHttpFormatted.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Http.ProjectionsStatisticsHttpFormatted.html",
    "title": "Class ProjectionsStatisticsHttpFormatted | Event Store",
    "keywords": "Class ProjectionsStatisticsHttpFormatted Inheritance System.Object ProjectionsStatisticsHttpFormatted Namespace : EventStore.Projections.Core.Services.Http Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionsStatisticsHttpFormatted : object Constructors ProjectionsStatisticsHttpFormatted(ProjectionManagementMessage.Statistics, Func<String, String>) Declaration public ProjectionsStatisticsHttpFormatted(ProjectionManagementMessage.Statistics source, Func<string, string> makeAbsouteUrl) Parameters Type Name ProjectionManagementMessage.Statistics source Func < System.String , System.String > makeAbsouteUrl Properties Projections Declaration public ProjectionStatisticsHttpFormatted[] Projections { get; } Property Value Type ProjectionStatisticsHttpFormatted []"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventByTypeIndexEventFilter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventByTypeIndexEventFilter.html",
    "title": "Class EventByTypeIndexEventFilter | Event Store",
    "keywords": "Class EventByTypeIndexEventFilter Inheritance System.Object EventFilter EventByTypeIndexEventFilter Inherited Members EventFilter.Passes(Boolean, String, String, Boolean) EventFilter.PassesDeleteNotification(String) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class EventByTypeIndexEventFilter : EventFilter Constructors EventByTypeIndexEventFilter(HashSet<String>) Declaration public EventByTypeIndexEventFilter(HashSet<string> events) Parameters Type Name HashSet < System.String > events Methods DeletedNotificationPasses(String) Declaration protected override bool DeletedNotificationPasses(string positionStreamId) Parameters Type Name System.String positionStreamId Returns Type Description System.Boolean Overrides EventFilter.DeletedNotificationPasses(String) GetCategory(String) Declaration public override string GetCategory(string positionStreamId) Parameters Type Name System.String positionStreamId Returns Type Description System.String Overrides EventFilter.GetCategory(String) PassesSource(Boolean, String, String) Declaration public override bool PassesSource(bool resolvedFromLinkTo, string positionStreamId, string eventType) Parameters Type Name System.Boolean resolvedFromLinkTo System.String positionStreamId System.String eventType Returns Type Description System.Boolean Overrides EventFilter.PassesSource(Boolean, String, String)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.ProgressChanged.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.ProgressChanged.html",
    "title": "Class EventReaderSubscriptionMessage.ProgressChanged | Event Store",
    "keywords": "Class EventReaderSubscriptionMessage.ProgressChanged Inheritance System.Object EventStore.Core.Messaging.Message EventReaderSubscriptionMessageBase EventReaderSubscriptionMessage.ProgressChanged Inherited Members EventReaderSubscriptionMessageBase.CheckpointTag EventReaderSubscriptionMessageBase.Progress EventReaderSubscriptionMessageBase.SubscriptionMessageSequenceNumber EventReaderSubscriptionMessageBase.SubscriptionId EventReaderSubscriptionMessageBase.Source EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class ProgressChanged : EventReaderSubscriptionMessageBase Constructors ProgressChanged(Guid, CheckpointTag, Single, Int64, Object) Declaration public ProgressChanged(Guid subscriptionId, CheckpointTag checkpointTag, float progress, long subscriptionMessageSequenceNumber, object source = null) Parameters Type Name Guid subscriptionId CheckpointTag checkpointTag System.Single progress System.Int64 subscriptionMessageSequenceNumber System.Object source Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventReaderSubscriptionMessageBase.MsgTypeId"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException.html",
    "title": "Class CannotEstablishConnectionException | Event Store",
    "keywords": "Class CannotEstablishConnectionException Exception thrown if an EventStoreConnection is unable to establish a connection to an Event Store server. Inheritance System.Object System.Exception EventStoreConnectionException CannotEstablishConnectionException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class CannotEstablishConnectionException : EventStoreConnectionException, ISerializable Constructors CannotEstablishConnectionException() Constructs a new CannotEstablishConnectionException . Declaration public CannotEstablishConnectionException() CannotEstablishConnectionException(SerializationInfo, StreamingContext) Constructs a new CannotEstablishConnectionException . Declaration protected CannotEstablishConnectionException(SerializationInfo info, StreamingContext context) Parameters Type Name System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context CannotEstablishConnectionException(String) Constructs a new CannotEstablishConnectionException . Declaration public CannotEstablishConnectionException(string message) Parameters Type Name System.String message CannotEstablishConnectionException(String, Exception) Constructs a new CannotEstablishConnectionException . Declaration public CannotEstablishConnectionException(string message, Exception innerException) Parameters Type Name System.String message System.Exception innerException Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.WriteQueryResultProjectionProcessingPhaseBase.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.WriteQueryResultProjectionProcessingPhaseBase.html",
    "title": "Class WriteQueryResultProjectionProcessingPhaseBase | Event Store",
    "keywords": "Class WriteQueryResultProjectionProcessingPhaseBase Inheritance System.Object WriteQueryResultProjectionProcessingPhaseBase WriteQueryEofProjectionProcessingPhase WriteQueryResultProjectionProcessingPhase Implements IProjectionProcessingPhase IDisposable EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.GetState > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.GetResult > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.PrerecordedEventsLoaded > Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public abstract class WriteQueryResultProjectionProcessingPhaseBase : object, IProjectionProcessingPhase, IDisposable, IHandle<CoreProjectionManagementMessage.GetState>, IHandle<CoreProjectionManagementMessage.GetResult>, IHandle<CoreProjectionProcessingMessage.PrerecordedEventsLoaded> Constructors WriteQueryResultProjectionProcessingPhaseBase(IPublisher, Int32, String, ICoreProjectionForProcessingPhase, PartitionStateCache, ICoreProjectionCheckpointManager, IEmittedEventWriter, IEmittedStreamsTracker) Declaration public WriteQueryResultProjectionProcessingPhaseBase(IPublisher publisher, int phase, string resultStream, ICoreProjectionForProcessingPhase coreProjection, PartitionStateCache stateCache, ICoreProjectionCheckpointManager checkpointManager, IEmittedEventWriter emittedEventWriter, IEmittedStreamsTracker emittedStreamsTracker) Parameters Type Name EventStore.Core.Bus.IPublisher publisher System.Int32 phase System.String resultStream ICoreProjectionForProcessingPhase coreProjection PartitionStateCache stateCache ICoreProjectionCheckpointManager checkpointManager IEmittedEventWriter emittedEventWriter IEmittedStreamsTracker emittedStreamsTracker Fields _checkpointManager Declaration protected readonly ICoreProjectionCheckpointManager _checkpointManager Field Value Type ICoreProjectionCheckpointManager _emittedEventWriter Declaration protected readonly IEmittedEventWriter _emittedEventWriter Field Value Type IEmittedEventWriter _emittedStreamsTracker Declaration protected readonly IEmittedStreamsTracker _emittedStreamsTracker Field Value Type IEmittedStreamsTracker _resultStream Declaration protected readonly string _resultStream Field Value Type System.String _stateCache Declaration protected readonly PartitionStateCache _stateCache Field Value Type PartitionStateCache Properties CheckpointManager Declaration public ICoreProjectionCheckpointManager CheckpointManager { get; } Property Value Type ICoreProjectionCheckpointManager EmittedStreamsTracker Declaration public IEmittedStreamsTracker EmittedStreamsTracker { get; } Property Value Type IEmittedStreamsTracker Methods AdjustTag(CheckpointTag) Declaration public CheckpointTag AdjustTag(CheckpointTag tag) Parameters Type Name CheckpointTag tag Returns Type Description CheckpointTag Dispose() Declaration public void Dispose() EnsureUnsubscribed() Declaration public void EnsureUnsubscribed() GetStatistics(ProjectionStatistics) Declaration public void GetStatistics(ProjectionStatistics info) Parameters Type Name ProjectionStatistics info Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded) Declaration public void Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded message) Parameters Type Name CoreProjectionProcessingMessage.PrerecordedEventsLoaded message Handle(CoreProjectionManagementMessage.GetResult) Declaration public void Handle(CoreProjectionManagementMessage.GetResult message) Parameters Type Name CoreProjectionManagementMessage.GetResult message Handle(CoreProjectionManagementMessage.GetState) Declaration public void Handle(CoreProjectionManagementMessage.GetState message) Parameters Type Name CoreProjectionManagementMessage.GetState message InitializeFromCheckpoint(CheckpointTag) Declaration public void InitializeFromCheckpoint(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag MakeZeroCheckpointTag() Declaration public CheckpointTag MakeZeroCheckpointTag() Returns Type Description CheckpointTag ProcessEvent() Declaration public void ProcessEvent() SetProjectionState(PhaseState) Declaration public void SetProjectionState(PhaseState state) Parameters Type Name PhaseState state Subscribe(CheckpointTag, Boolean) Declaration public void Subscribe(CheckpointTag from, bool fromCheckpoint) Parameters Type Name CheckpointTag from System.Boolean fromCheckpoint WriteResults(CheckpointTag) Declaration protected abstract IEnumerable<EmittedEventEnvelope> WriteResults(CheckpointTag phaseCheckpointTag) Parameters Type Name CheckpointTag phaseCheckpointTag Returns Type Description IEnumerable < EmittedEventEnvelope > Implements IProjectionProcessingPhase IDisposable EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.ClientAPI.Common.SystemConsumerStrategies.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Common.SystemConsumerStrategies.html",
    "title": "Class SystemConsumerStrategies | Event Store",
    "keywords": "Class SystemConsumerStrategies System supported consumer strategies for use with persistent subscriptions. Inheritance System.Object SystemConsumerStrategies Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI.Common Assembly : EventStore.ClientAPI.dll Syntax public static class SystemConsumerStrategies Fields DispatchToSingle Distributes events to a single client until it is full. Then round robin to the next client. Declaration public const string DispatchToSingle = \"DispatchToSingle\" Field Value Type System.String Pinned Distribute events of the same streamId to the same client until it disconnects on a best efforts basis. Designed to be used with indexes such as the category projection. Declaration public const string Pinned = \"Pinned\" Field Value Type System.String RoundRobin Distribute events to each client in a round robin fashion. Declaration public const string RoundRobin = \"RoundRobin\" Field Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Management.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Management.html",
    "title": "Namespace EventStore.Projections.Core.Services.Management | Event Store",
    "keywords": "Namespace EventStore.Projections.Core.Services.Management Classes ManagedProjection managed projection controls start/stop/create/update/delete lifecycle of the projection. ManagedProjection.PersistedState MultiStreamMessageWriter ProjectionCoreCoordinator ProjectionCoreResponseWriter ProjectionManager ProjectionManager.NewProjectionInitializer ProjectionManager.PendingProjection ProjectionManagerCommandWriter ProjectionManagerMessageDispatcher ProjectionManagerResponseReader ProjectionStateHandlerFactory ResponseWriter SerializedRunAs TimeoutScheduler Interfaces IMultiStreamMessageWriter IResponseWriter Enums ManagedProjectionState"
  },
  "dotnet-api/code/EventStore.Projections.Core.v8.Js1.ExitCancellableRegionDelegate.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.v8.Js1.ExitCancellableRegionDelegate.html",
    "title": "Delegate Js1.ExitCancellableRegionDelegate | Event Store",
    "keywords": "Delegate Js1.ExitCancellableRegionDelegate Namespace : EventStore.Projections.Core.v8 Assembly : EventStore.Projections.Core.dll Syntax public delegate bool ExitCancellableRegionDelegate(); Returns Type Description System.Boolean"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.NotAuthenticatedException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.NotAuthenticatedException.html",
    "title": "Class NotAuthenticatedException | Event Store",
    "keywords": "Class NotAuthenticatedException Exception thrown if an operation requires authentication but the client is not authenticated. Inheritance System.Object System.Exception EventStoreConnectionException NotAuthenticatedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class NotAuthenticatedException : EventStoreConnectionException, ISerializable Constructors NotAuthenticatedException() Constructs a new NotAuthenticatedException . Declaration public NotAuthenticatedException() NotAuthenticatedException(SerializationInfo, StreamingContext) Constructs a new NotAuthenticatedException . Declaration protected NotAuthenticatedException(SerializationInfo info, StreamingContext context) Parameters Type Name System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context NotAuthenticatedException(String) Constructs a new NotAuthenticatedException . Declaration public NotAuthenticatedException(string message) Parameters Type Name System.String message NotAuthenticatedException(String, Exception) Constructs a new NotAuthenticatedException . Declaration public NotAuthenticatedException(string message, Exception innerException) Parameters Type Name System.String message System.Exception innerException Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.Delete.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.Delete.html",
    "title": "Class ProjectionManagementMessage.Command.Delete | Event Store",
    "keywords": "Class ProjectionManagementMessage.Command.Delete Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Command.ControlMessage ProjectionManagementMessage.Command.Delete Inherited Members ProjectionManagementMessage.Command.ControlMessage.RunAs ProjectionManagementMessage.Command.ControlMessage.Envelope EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Delete : ProjectionManagementMessage.Command.ControlMessage Constructors Delete(IEnvelope, String, ProjectionManagementMessage.RunAs, Boolean, Boolean, Boolean) Declaration public Delete(IEnvelope envelope, string name, ProjectionManagementMessage.RunAs runAs, bool deleteCheckpointStream, bool deleteStateStream, bool deleteEmittedStreams) Parameters Type Name EventStore.Core.Messaging.IEnvelope envelope System.String name ProjectionManagementMessage.RunAs runAs System.Boolean deleteCheckpointStream System.Boolean deleteStateStream System.Boolean deleteEmittedStreams Properties DeleteCheckpointStream Declaration public bool DeleteCheckpointStream { get; } Property Value Type System.Boolean DeleteEmittedStreams Declaration public bool DeleteEmittedStreams { get; } Property Value Type System.Boolean DeleteStateStream Declaration public bool DeleteStateStream { get; } Property Value Type System.Boolean MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ProjectionManagementMessage.Command.ControlMessage.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.LoadStoppedCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.LoadStoppedCommand.html",
    "title": "Class LoadStoppedCommand | Event Store",
    "keywords": "Class LoadStoppedCommand Inheritance System.Object LoadStoppedCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Commands Assembly : EventStore.Projections.Core.dll Syntax public class LoadStoppedCommand : object Properties Id Declaration public string Id { get; set; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.FilterContext.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.FilterContext.html",
    "title": "Class FilterContext | Event Store",
    "keywords": "Class FilterContext A filter context. Inheritance System.Object FilterContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class FilterContext Methods Prefix(String[]) Filters by starting-with. Declaration public Filter Prefix(params string[] prefixes) Parameters Type Name System.String [] prefixes Returns Type Description Filter Regex(Regex) Filters by Regex(Regex) . Declaration public Filter Regex(Regex regex) Parameters Type Name System.Text.RegularExpressions.Regex regex Returns Type Description Filter"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.GetResult.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.GetResult.html",
    "title": "Class ProjectionManagementMessage.Command.GetResult | Event Store",
    "keywords": "Class ProjectionManagementMessage.Command.GetResult Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Command.GetResult Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class GetResult : Message Constructors GetResult(IEnvelope, String, String) Declaration public GetResult(IEnvelope envelope, string name, string partition) Parameters Type Name EventStore.Core.Messaging.IEnvelope envelope System.String name System.String partition Properties Envelope Declaration public IEnvelope Envelope { get; } Property Value Type EventStore.Core.Messaging.IEnvelope MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String Partition Declaration public string Partition { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.ResetCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.ResetCommand.html",
    "title": "Class ResetCommand | Event Store",
    "keywords": "Class ResetCommand Inheritance System.Object ResetCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class ResetCommand : object Fields Name Declaration public string Name Field Value Type System.String RunAs Declaration public SerializedRunAs RunAs Field Value Type SerializedRunAs"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.PostCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.PostCommand.html",
    "title": "Class PostCommand | Event Store",
    "keywords": "Class PostCommand Inheritance System.Object PostCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class PostCommand : object Fields CheckpointsEnabled Declaration public bool CheckpointsEnabled Field Value Type System.Boolean EmitEnabled Declaration public bool EmitEnabled Field Value Type System.Boolean Enabled Declaration public bool Enabled Field Value Type System.Boolean EnableRunAs Declaration public bool EnableRunAs Field Value Type System.Boolean HandlerType Declaration public string HandlerType Field Value Type System.String Mode Declaration public ProjectionMode Mode Field Value Type ProjectionMode Name Declaration public string Name Field Value Type System.String Query Declaration public string Query Field Value Type System.String RunAs Declaration public SerializedRunAs RunAs Field Value Type SerializedRunAs TrackEmittedStreams Declaration public bool TrackEmittedStreams Field Value Type System.Boolean"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted.html",
    "title": "Class ProjectionCoreServiceMessage.SubComponentStarted | Event Store",
    "keywords": "Class ProjectionCoreServiceMessage.SubComponentStarted Inheritance System.Object EventStore.Core.Messaging.Message ProjectionCoreServiceMessage.SubComponentStarted Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class SubComponentStarted : Message Constructors SubComponentStarted(String, Guid) Declaration public SubComponentStarted(string subComponent, Guid instanceCorrelationId) Parameters Type Name System.String subComponent Guid instanceCorrelationId Properties InstanceCorrelationId Declaration public Guid InstanceCorrelationId { get; } Property Value Type Guid MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId SubComponent Declaration public string SubComponent { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.v8.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.v8.html",
    "title": "Namespace EventStore.Projections.Core.Services.v8 | Event Store",
    "keywords": "Namespace EventStore.Projections.Core.Services.v8 Classes DefaultV8ProjectionStateHandler V8ProjectionStateHandler V8ProjectionStateHandler.EmittedEventJsonContract"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.GetResultCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.GetResultCommand.html",
    "title": "Class GetResultCommand | Event Store",
    "keywords": "Class GetResultCommand Inheritance System.Object GetResultCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Commands Assembly : EventStore.Projections.Core.dll Syntax public sealed class GetResultCommand : object Properties CorrelationId Declaration public string CorrelationId { get; set; } Property Value Type System.String Id Declaration public string Id { get; set; } Property Value Type System.String Partition Declaration public string Partition { get; set; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.IProjectionCheckpointHandler.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.IProjectionCheckpointHandler.html",
    "title": "Interface IProjectionCheckpointHandler | Event Store",
    "keywords": "Interface IProjectionCheckpointHandler Namespace : EventStore.Projections.Core.Services Assembly : EventStore.Projections.Core.dll Syntax public interface IProjectionCheckpointHandler Methods ProcessNewCheckpoint(CheckpointTag, out EmittedEventEnvelope[]) Declaration void ProcessNewCheckpoint(CheckpointTag checkpointPosition, out EmittedEventEnvelope[] emittedEvents) Parameters Type Name CheckpointTag checkpointPosition EmittedEventEnvelope [] emittedEvents"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.TaggedResolvedEvent.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.TaggedResolvedEvent.html",
    "title": "Class TaggedResolvedEvent | Event Store",
    "keywords": "Class TaggedResolvedEvent Inheritance System.Object TaggedResolvedEvent Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public sealed class TaggedResolvedEvent : object Constructors TaggedResolvedEvent(ResolvedEvent, CheckpointTag) Declaration public TaggedResolvedEvent(ResolvedEvent resolvedEvent, CheckpointTag readerPosition) Parameters Type Name ResolvedEvent resolvedEvent CheckpointTag readerPosition Fields ReaderPosition Declaration public readonly CheckpointTag ReaderPosition Field Value Type CheckpointTag ResolvedEvent Declaration public readonly ResolvedEvent ResolvedEvent Field Value Type ResolvedEvent"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.ResultReport.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.ResultReport.html",
    "title": "Class CoreProjectionStatusMessage.ResultReport | Event Store",
    "keywords": "Class CoreProjectionStatusMessage.ResultReport Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionStatusMessage.CoreProjectionStatusMessageBase CoreProjectionStatusMessage.DataReportBase CoreProjectionStatusMessage.ResultReport Inherited Members CoreProjectionStatusMessage.DataReportBase.Partition CoreProjectionStatusMessage.DataReportBase.CorrelationId CoreProjectionStatusMessage.DataReportBase.Position CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class ResultReport : CoreProjectionStatusMessage.DataReportBase Constructors ResultReport(Guid, Guid, String, String, CheckpointTag) Declaration public ResultReport(Guid correlationId, Guid projectionId, string partition, string result, CheckpointTag position) Parameters Type Name Guid correlationId Guid projectionId System.String partition System.String result CheckpointTag position Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionStatusMessage.DataReportBase.MsgTypeId Result Declaration public string Result { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.NoopResultEventEmitter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.NoopResultEventEmitter.html",
    "title": "Class NoopResultEventEmitter | Event Store",
    "keywords": "Class NoopResultEventEmitter Inheritance System.Object NoopResultEventEmitter Implements IResultEventEmitter Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class NoopResultEventEmitter : object, IResultEventEmitter Methods ResultUpdated(String, String, CheckpointTag) Declaration public EmittedEventEnvelope[] ResultUpdated(string partition, string result, CheckpointTag at) Parameters Type Name System.String partition System.String result CheckpointTag at Returns Type Description EmittedEventEnvelope [] Implements IResultEventEmitter"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Management.ProjectionManagerCommandWriter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Management.ProjectionManagerCommandWriter.html",
    "title": "Class ProjectionManagerCommandWriter | Event Store",
    "keywords": "Class ProjectionManagerCommandWriter Inheritance System.Object ProjectionManagerCommandWriter Implements EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.CreatePrepared > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.CreateAndPrepare > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.LoadStopped > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.Start > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.Stop > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.Kill > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.Dispose > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.GetState > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.GetResult > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Starting > Namespace : EventStore.Projections.Core.Services.Management Assembly : EventStore.Projections.Core.dll Syntax public sealed class ProjectionManagerCommandWriter : object, IHandle<CoreProjectionManagementMessage.CreatePrepared>, IHandle<CoreProjectionManagementMessage.CreateAndPrepare>, IHandle<CoreProjectionManagementMessage.LoadStopped>, IHandle<CoreProjectionManagementMessage.Start>, IHandle<CoreProjectionManagementMessage.Stop>, IHandle<CoreProjectionManagementMessage.Kill>, IHandle<CoreProjectionManagementMessage.Dispose>, IHandle<CoreProjectionManagementMessage.GetState>, IHandle<CoreProjectionManagementMessage.GetResult>, IHandle<ProjectionManagementMessage.Starting> Constructors ProjectionManagerCommandWriter(IMultiStreamMessageWriter) Declaration public ProjectionManagerCommandWriter(IMultiStreamMessageWriter commandWriter) Parameters Type Name IMultiStreamMessageWriter commandWriter Methods Handle(CoreProjectionManagementMessage.CreateAndPrepare) Declaration public void Handle(CoreProjectionManagementMessage.CreateAndPrepare message) Parameters Type Name CoreProjectionManagementMessage.CreateAndPrepare message Handle(CoreProjectionManagementMessage.CreatePrepared) Declaration public void Handle(CoreProjectionManagementMessage.CreatePrepared message) Parameters Type Name CoreProjectionManagementMessage.CreatePrepared message Handle(CoreProjectionManagementMessage.Dispose) Declaration public void Handle(CoreProjectionManagementMessage.Dispose message) Parameters Type Name CoreProjectionManagementMessage.Dispose message Handle(CoreProjectionManagementMessage.GetResult) Declaration public void Handle(CoreProjectionManagementMessage.GetResult message) Parameters Type Name CoreProjectionManagementMessage.GetResult message Handle(CoreProjectionManagementMessage.GetState) Declaration public void Handle(CoreProjectionManagementMessage.GetState message) Parameters Type Name CoreProjectionManagementMessage.GetState message Handle(CoreProjectionManagementMessage.Kill) Declaration public void Handle(CoreProjectionManagementMessage.Kill message) Parameters Type Name CoreProjectionManagementMessage.Kill message Handle(CoreProjectionManagementMessage.LoadStopped) Declaration public void Handle(CoreProjectionManagementMessage.LoadStopped message) Parameters Type Name CoreProjectionManagementMessage.LoadStopped message Handle(CoreProjectionManagementMessage.Start) Declaration public void Handle(CoreProjectionManagementMessage.Start message) Parameters Type Name CoreProjectionManagementMessage.Start message Handle(CoreProjectionManagementMessage.Stop) Declaration public void Handle(CoreProjectionManagementMessage.Stop message) Parameters Type Name CoreProjectionManagementMessage.Stop message Handle(ProjectionManagementMessage.Starting) Declaration public void Handle(ProjectionManagementMessage.Starting message) Parameters Type Name ProjectionManagementMessage.Starting message Implements EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails.html",
    "title": "Class PersistentSubscriptionDetails | Event Store",
    "keywords": "Class PersistentSubscriptionDetails Details for a Persistent Subscription. Inheritance System.Object PersistentSubscriptionDetails Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI.PersistentSubscriptions Assembly : EventStore.ClientAPI.dll Syntax public sealed class PersistentSubscriptionDetails Properties AverageItemsPerSecond Average items per second (count). Declaration public decimal AverageItemsPerSecond { get; set; } Property Value Type System.Decimal Config Configuration of persistent subscription. Declaration public PersistentSubscriptionConfigDetails Config { get; set; } Property Value Type PersistentSubscriptionConfigDetails Remarks Only populated when retrieved via Describe(String, String, UserCredentials) method. Connections List of current connections on this persistent subscription . Declaration public List<PersistentSubscriptionConnectionDetails> Connections { get; set; } Property Value Type System.Collections.Generic.List < PersistentSubscriptionConnectionDetails > Remarks Only populated when retrieved via Describe(String, String, UserCredentials) method. CountSinceLastMeasurement Number of items seen since last measurement on this connection (used as the basis for AverageItemsPerSecond ). Declaration public long CountSinceLastMeasurement { get; set; } Property Value Type System.Int64 EventStreamId Target stream that refers to this subscription. Declaration public string EventStreamId { get; set; } Property Value Type System.String GetMessagesUri Messages URI. Declaration public string GetMessagesUri { get; set; } Property Value Type System.String GroupName The persistent subscription name. Declaration public string GroupName { get; set; } Property Value Type System.String LastKnownEventNumber Last checkpointed target stream version. Declaration public long LastKnownEventNumber { get; set; } Property Value Type System.Int64 LastProcessedEventNumber Last processed target stream version. Declaration public long LastProcessedEventNumber { get; set; } Property Value Type System.Int64 LiveBufferCount Live buffer count. Declaration public long LiveBufferCount { get; set; } Property Value Type System.Int64 ParkedMessageUri Parked message stream URI. Declaration public string ParkedMessageUri { get; set; } Property Value Type System.String ReadBufferCount Read buffer count. Declaration public int ReadBufferCount { get; set; } Property Value Type System.Int32 RetryBufferCount Retry buffer count. Declaration public int RetryBufferCount { get; set; } Property Value Type System.Int32 Status Current status. Declaration public string Status { get; set; } Property Value Type System.String TotalInFlightMessages Current in flight messages across all connections. Declaration public int TotalInFlightMessages { get; set; } Property Value Type System.Int32 TotalItemsProcessed Total items processed (count). Declaration public long TotalItemsProcessed { get; set; } Property Value Type System.Int64"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.GetQuery.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.GetQuery.html",
    "title": "Class ProjectionManagementMessage.Command.GetQuery | Event Store",
    "keywords": "Class ProjectionManagementMessage.Command.GetQuery Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Command.ControlMessage ProjectionManagementMessage.Command.GetQuery Inherited Members ProjectionManagementMessage.Command.ControlMessage.RunAs ProjectionManagementMessage.Command.ControlMessage.Envelope EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class GetQuery : ProjectionManagementMessage.Command.ControlMessage Constructors GetQuery(IEnvelope, String, ProjectionManagementMessage.RunAs) Declaration public GetQuery(IEnvelope envelope, string name, ProjectionManagementMessage.RunAs runAs) Parameters Type Name EventStore.Core.Messaging.IEnvelope envelope System.String name ProjectionManagementMessage.RunAs runAs Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ProjectionManagementMessage.Command.ControlMessage.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CategoryEventFilter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CategoryEventFilter.html",
    "title": "Class CategoryEventFilter | Event Store",
    "keywords": "Class CategoryEventFilter Inheritance System.Object EventFilter CategoryEventFilter Inherited Members EventFilter.Passes(Boolean, String, String, Boolean) EventFilter.PassesDeleteNotification(String) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class CategoryEventFilter : EventFilter Constructors CategoryEventFilter(String, Boolean, HashSet<String>) Declaration public CategoryEventFilter(string category, bool allEvents, HashSet<string> events) Parameters Type Name System.String category System.Boolean allEvents HashSet < System.String > events Methods DeletedNotificationPasses(String) Declaration protected override bool DeletedNotificationPasses(string positionStreamId) Parameters Type Name System.String positionStreamId Returns Type Description System.Boolean Overrides EventFilter.DeletedNotificationPasses(String) GetCategory(String) Declaration public override string GetCategory(string positionStreamId) Parameters Type Name System.String positionStreamId Returns Type Description System.String Overrides EventFilter.GetCategory(String) PassesSource(Boolean, String, String) Declaration public override bool PassesSource(bool resolvedFromLinkTo, string positionStreamId, string eventType) Parameters Type Name System.Boolean resolvedFromLinkTo System.String positionStreamId System.String eventType Returns Type Description System.Boolean Overrides EventFilter.PassesSource(Boolean, String, String) ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.EventReaders.Feeds.FeedReader.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.EventReaders.Feeds.FeedReader.html",
    "title": "Class FeedReader | Event Store",
    "keywords": "Class FeedReader Inheritance System.Object FeedReader Implements EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.CommittedEventReceived > EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.EofReached > EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.PartitionEofReached > EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.CheckpointSuggested > EventStore.Core.Bus.IHandle < EventReaderSubscriptionMessage.NotAuthorized > Namespace : EventStore.Projections.Core.EventReaders.Feeds Assembly : EventStore.Projections.Core.dll Syntax public class FeedReader : object, IHandle<EventReaderSubscriptionMessage.CommittedEventReceived>, IHandle<EventReaderSubscriptionMessage.EofReached>, IHandle<EventReaderSubscriptionMessage.PartitionEofReached>, IHandle<EventReaderSubscriptionMessage.CheckpointSuggested>, IHandle<EventReaderSubscriptionMessage.NotAuthorized> Constructors FeedReader(PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase>, IPrincipal, QuerySourcesDefinition, CheckpointTag, Int32, Guid, IEnvelope, ITimeProvider) Declaration public FeedReader(PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase> subscriptionDispatcher, IPrincipal user, QuerySourcesDefinition querySource, CheckpointTag fromPosition, int maxEvents, Guid requestCorrelationId, IEnvelope replyEnvelope, ITimeProvider timeProvider) Parameters Type Name PublishSubscribeDispatcher < Guid , ReaderSubscriptionManagement.Subscribe , ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage , EventReaderSubscriptionMessageBase > subscriptionDispatcher IPrincipal user QuerySourcesDefinition querySource CheckpointTag fromPosition System.Int32 maxEvents Guid requestCorrelationId EventStore.Core.Messaging.IEnvelope replyEnvelope EventStore.Core.Services.TimerService.ITimeProvider timeProvider Methods Create(PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase>, FeedReaderMessage.ReadPage, ITimeProvider) Declaration public static FeedReader Create(PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase> publishSubscribeDispatcher, FeedReaderMessage.ReadPage message, ITimeProvider timeProvider) Parameters Type Name PublishSubscribeDispatcher < Guid , ReaderSubscriptionManagement.Subscribe , ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage , EventReaderSubscriptionMessageBase > publishSubscribeDispatcher FeedReaderMessage.ReadPage message EventStore.Core.Services.TimerService.ITimeProvider timeProvider Returns Type Description FeedReader Handle(EventReaderSubscriptionMessage.CheckpointSuggested) Declaration public void Handle(EventReaderSubscriptionMessage.CheckpointSuggested message) Parameters Type Name EventReaderSubscriptionMessage.CheckpointSuggested message Handle(EventReaderSubscriptionMessage.CommittedEventReceived) Declaration public void Handle(EventReaderSubscriptionMessage.CommittedEventReceived message) Parameters Type Name EventReaderSubscriptionMessage.CommittedEventReceived message Handle(EventReaderSubscriptionMessage.EofReached) Declaration public void Handle(EventReaderSubscriptionMessage.EofReached message) Parameters Type Name EventReaderSubscriptionMessage.EofReached message Handle(EventReaderSubscriptionMessage.NotAuthorized) Declaration public void Handle(EventReaderSubscriptionMessage.NotAuthorized message) Parameters Type Name EventReaderSubscriptionMessage.NotAuthorized message Handle(EventReaderSubscriptionMessage.PartitionEofReached) Declaration public void Handle(EventReaderSubscriptionMessage.PartitionEofReached message) Parameters Type Name EventReaderSubscriptionMessage.PartitionEofReached message Start() Declaration public void Start() Implements EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProjectionSourceDefinition.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProjectionSourceDefinition.html",
    "title": "Class ProjectionSourceDefinition | Event Store",
    "keywords": "Class ProjectionSourceDefinition Inheritance System.Object ProjectionSourceDefinition Implements IQuerySources Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionSourceDefinition : object, IQuerySources Properties AllEvents Declaration public bool AllEvents { get; set; } Property Value Type System.Boolean AllStreams Declaration public bool AllStreams { get; set; } Property Value Type System.Boolean ByCustomPartitions Declaration public bool ByCustomPartitions { get; set; } Property Value Type System.Boolean ByStream Declaration public bool ByStream { get; set; } Property Value Type System.Boolean Categories Declaration public string[] Categories { get; set; } Property Value Type System.String [] Events Declaration public string[] Events { get; set; } Property Value Type System.String [] LimitingCommitPosition Declaration public long? LimitingCommitPosition { get; set; } Property Value Type System.Nullable < System.Int64 > Options Declaration public QuerySourceOptions Options { get; set; } Property Value Type QuerySourceOptions Streams Declaration public string[] Streams { get; set; } Property Value Type System.String [] Methods Equals(ProjectionSourceDefinition) Declaration protected bool Equals(ProjectionSourceDefinition other) Parameters Type Name ProjectionSourceDefinition other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name System.Object obj Returns Type Description System.Boolean From(IQuerySources) Declaration public static ProjectionSourceDefinition From(IQuerySources sources) Parameters Type Name IQuerySources sources Returns Type Description ProjectionSourceDefinition GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Explicit Interface Implementations IQuerySources.ByStreams Declaration bool IQuerySources.ByStreams { get; } Returns Type Description System.Boolean IQuerySources.DefinesFold Declaration bool IQuerySources.DefinesFold { get; } Returns Type Description System.Boolean IQuerySources.DefinesStateTransform Declaration bool IQuerySources.DefinesStateTransform { get; } Returns Type Description System.Boolean IQuerySources.HandlesDeletedNotifications Declaration bool IQuerySources.HandlesDeletedNotifications { get; } Returns Type Description System.Boolean IQuerySources.IncludeLinksOption Declaration bool IQuerySources.IncludeLinksOption { get; } Returns Type Description System.Boolean IQuerySources.IsBiState Declaration bool IQuerySources.IsBiState { get; } Returns Type Description System.Boolean IQuerySources.PartitionResultStreamNamePatternOption Declaration string IQuerySources.PartitionResultStreamNamePatternOption { get; } Returns Type Description System.String IQuerySources.ProcessingLagOption Declaration int? IQuerySources.ProcessingLagOption { get; } Returns Type Description System.Nullable < System.Int32 > IQuerySources.ProducesResults Declaration bool IQuerySources.ProducesResults { get; } Returns Type Description System.Boolean IQuerySources.ReorderEventsOption Declaration bool IQuerySources.ReorderEventsOption { get; } Returns Type Description System.Boolean IQuerySources.ResultStreamNameOption Declaration string IQuerySources.ResultStreamNameOption { get; } Returns Type Description System.String Implements IQuerySources"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached.html",
    "title": "Class EventReaderSubscriptionMessage.PartitionEofReached | Event Store",
    "keywords": "Class EventReaderSubscriptionMessage.PartitionEofReached Inheritance System.Object EventStore.Core.Messaging.Message EventReaderSubscriptionMessageBase EventReaderSubscriptionMessage.PartitionEofReached Inherited Members EventReaderSubscriptionMessageBase.CheckpointTag EventReaderSubscriptionMessageBase.Progress EventReaderSubscriptionMessageBase.SubscriptionMessageSequenceNumber EventReaderSubscriptionMessageBase.SubscriptionId EventReaderSubscriptionMessageBase.Source EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class PartitionEofReached : EventReaderSubscriptionMessageBase Constructors PartitionEofReached(Guid, CheckpointTag, String, Int64, Object) Declaration public PartitionEofReached(Guid subscriptionId, CheckpointTag checkpointTag, string partition, long subscriptionMessageSequenceNumber, object source = null) Parameters Type Name Guid subscriptionId CheckpointTag checkpointTag System.String partition System.Int64 subscriptionMessageSequenceNumber System.Object source Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventReaderSubscriptionMessageBase.MsgTypeId Partition Declaration public string Partition { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.ClientAPI.ConditionalWriteResult.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ConditionalWriteResult.html",
    "title": "Struct ConditionalWriteResult | Event Store",
    "keywords": "Struct ConditionalWriteResult Result type returned after conditionally writing to a stream. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public struct ConditionalWriteResult Constructors ConditionalWriteResult(ConditionalWriteStatus) Constructs a new WriteResult . Declaration public ConditionalWriteResult(ConditionalWriteStatus status) Parameters Type Name ConditionalWriteStatus status ConditionalWriteResult(Int64, Position) Constructs a new WriteResult . Declaration public ConditionalWriteResult(long nextExpectedVersion, Position logPosition) Parameters Type Name System.Int64 nextExpectedVersion Position logPosition Fields LogPosition The LogPosition of the write. Declaration public readonly Position? LogPosition Field Value Type System.Nullable < Position > NextExpectedVersion The next expected version for the stream. Declaration public readonly long? NextExpectedVersion Field Value Type System.Nullable < System.Int64 > Status Returns if the write was successful. Declaration public readonly ConditionalWriteStatus Status Field Value Type ConditionalWriteStatus Extension Methods EnumExtensions.EnumValueName<T>(T)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ByHandleStatePartitionSelector.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ByHandleStatePartitionSelector.html",
    "title": "Class ByHandleStatePartitionSelector | Event Store",
    "keywords": "Class ByHandleStatePartitionSelector Inheritance System.Object StatePartitionSelector ByHandleStatePartitionSelector Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class ByHandleStatePartitionSelector : StatePartitionSelector Constructors ByHandleStatePartitionSelector(IProjectionStateHandler) Declaration public ByHandleStatePartitionSelector(IProjectionStateHandler handler) Parameters Type Name IProjectionStateHandler handler Methods EventReaderBasePartitionDeletedIsSupported() Declaration public override bool EventReaderBasePartitionDeletedIsSupported() Returns Type Description System.Boolean Overrides StatePartitionSelector.EventReaderBasePartitionDeletedIsSupported() GetStatePartition(EventReaderSubscriptionMessage.CommittedEventReceived) Declaration public override string GetStatePartition(EventReaderSubscriptionMessage.CommittedEventReceived event) Parameters Type Name EventReaderSubscriptionMessage.CommittedEventReceived event Returns Type Description System.String Overrides StatePartitionSelector.GetStatePartition(EventReaderSubscriptionMessage.CommittedEventReceived)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.GetStateCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.GetStateCommand.html",
    "title": "Class GetStateCommand | Event Store",
    "keywords": "Class GetStateCommand Inheritance System.Object GetStateCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Commands Assembly : EventStore.Projections.Core.dll Syntax public sealed class GetStateCommand : object Properties CorrelationId Declaration public string CorrelationId { get; set; } Property Value Type System.String Id Declaration public string Id { get; set; } Property Value Type System.String Partition Declaration public string Partition { get; set; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.StagedTask.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.StagedTask.html",
    "title": "Class StagedTask | Event Store",
    "keywords": "Class StagedTask Inheritance System.Object StagedTask WorkItem Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public abstract class StagedTask : object Constructors StagedTask(Object) Declaration protected StagedTask(object initialCorrelationId) Parameters Type Name System.Object initialCorrelationId Fields InitialCorrelationId Declaration public readonly object InitialCorrelationId Field Value Type System.Object Methods Process(Int32, Action<Int32, Object>) Declaration public abstract void Process(int onStage, Action<int, object> readyForStage) Parameters Type Name System.Int32 onStage Action < System.Int32 , System.Object > readyForStage"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messaging.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messaging.html",
    "title": "Namespace EventStore.Projections.Core.Messaging | Event Store",
    "keywords": "Namespace EventStore.Projections.Core.Messaging Classes UnwrapEnvelopeHandler UnwrapEnvelopeMessage"
  },
  "dotnet-api/code/EventStore.ClientAPI.Projections.ProjectionConfig.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Projections.ProjectionConfig.html",
    "title": "Class ProjectionConfig | Event Store",
    "keywords": "Class ProjectionConfig Provides the configuration for a projection. Inheritance System.Object ProjectionConfig Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI.Projections Assembly : EventStore.ClientAPI.dll Syntax public sealed class ProjectionConfig Constructors ProjectionConfig(Boolean, Boolean, Int32, Int32, Int32, Int32, Int32, Int32) create a new ProjectionConfig class. Declaration public ProjectionConfig(bool emitEnabled, bool trackEmittedStreams, int checkpointAfterMs, int checkpointHandledThreshold, int checkpointUnhandledBytesThreshold, int pendingEventsThreshold, int maxWriteBatchLength, int maxAllowedWritesInFlight) Parameters Type Name System.Boolean emitEnabled System.Boolean trackEmittedStreams System.Int32 checkpointAfterMs System.Int32 checkpointHandledThreshold System.Int32 checkpointUnhandledBytesThreshold System.Int32 pendingEventsThreshold System.Int32 maxWriteBatchLength System.Int32 maxAllowedWritesInFlight Fields CheckpointAfterMs Minimum time (in ms) after which to write a projection checkpoint. Declaration public readonly int CheckpointAfterMs Field Value Type System.Int32 CheckpointHandledThreshold Number of events that a projection can handle before attempting to write a checkpoint. Declaration public readonly int CheckpointHandledThreshold Field Value Type System.Int32 CheckpointUnhandledBytesThreshold Number of bytes a projection can process before attempting to write a checkpoint. Declaration public readonly int CheckpointUnhandledBytesThreshold Field Value Type System.Int32 EmitEnabled Whether this projection can emit events using emit() or linkTo(). Declaration public readonly bool EmitEnabled Field Value Type System.Boolean MaxAllowedWritesInFlight Maximum number of concurrent writes to allow for a projection. Declaration public readonly int MaxAllowedWritesInFlight Field Value Type System.Int32 MaxWriteBatchLength Maximum number of events the projection can write in a batch at a time. Declaration public readonly int MaxWriteBatchLength Field Value Type System.Int32 PendingEventsThreshold Number of events that can be pending before the projection is temporarily paused. Declaration public readonly int PendingEventsThreshold Field Value Type System.Int32 TrackEmittedStreams Whether this projection tracks emitted streams. This enables you to delete a projection and all the streams that it has created. Declaration public readonly bool TrackEmittedStreams Field Value Type System.Boolean"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.PhaseState.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.PhaseState.html",
    "title": "Enum PhaseState | Event Store",
    "keywords": "Enum PhaseState Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public enum PhaseState : int Fields Name Description Running Starting Stopped Unknown Extension Methods EnumExtensions.EnumValueName<PhaseState>()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.PreparePositionTagger.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.PreparePositionTagger.html",
    "title": "Class PreparePositionTagger | Event Store",
    "keywords": "Class PreparePositionTagger Inheritance System.Object PositionTagger PreparePositionTagger Inherited Members PositionTagger.Phase Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class PreparePositionTagger : PositionTagger Constructors PreparePositionTagger(Int32) Declaration public PreparePositionTagger(int phase) Parameters Type Name System.Int32 phase Methods AdjustTag(CheckpointTag) Declaration public override CheckpointTag AdjustTag(CheckpointTag tag) Parameters Type Name CheckpointTag tag Returns Type Description CheckpointTag Overrides PositionTagger.AdjustTag(CheckpointTag) IsCompatible(CheckpointTag) Declaration public override bool IsCompatible(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag Returns Type Description System.Boolean Overrides PositionTagger.IsCompatible(CheckpointTag) IsMessageAfterCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public override bool IsMessageAfterCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.CommittedEventDistributed committedEvent Returns Type Description System.Boolean Overrides PositionTagger.IsMessageAfterCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.CommittedEventDistributed committedEvent Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.CommittedEventDistributed) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionDeleted) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.EventReaderPartitionDeleted partitionDeleted) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.EventReaderPartitionDeleted partitionDeleted Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionDeleted) MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionEof) Declaration public override CheckpointTag MakeCheckpointTag(CheckpointTag previous, ReaderSubscriptionMessage.EventReaderPartitionEof partitionEof) Parameters Type Name CheckpointTag previous ReaderSubscriptionMessage.EventReaderPartitionEof partitionEof Returns Type Description CheckpointTag Overrides PositionTagger.MakeCheckpointTag(CheckpointTag, ReaderSubscriptionMessage.EventReaderPartitionEof) MakeZeroCheckpointTag() Declaration public override CheckpointTag MakeZeroCheckpointTag() Returns Type Description CheckpointTag Overrides PositionTagger.MakeZeroCheckpointTag()"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderEof.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderEof.html",
    "title": "Class ReaderSubscriptionMessage.EventReaderEof | Event Store",
    "keywords": "Class ReaderSubscriptionMessage.EventReaderEof Inheritance System.Object EventStore.Core.Messaging.Message ReaderSubscriptionMessage.SubscriptionMessage ReaderSubscriptionMessage.EventReaderEof Inherited Members ReaderSubscriptionMessage.SubscriptionMessage.CorrelationId ReaderSubscriptionMessage.SubscriptionMessage.PreTagged ReaderSubscriptionMessage.SubscriptionMessage.Source EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class EventReaderEof : ReaderSubscriptionMessage.SubscriptionMessage Constructors EventReaderEof(Guid, Boolean, Object) Declaration public EventReaderEof(Guid correlationId, bool maxEventsReached = false, object source = null) Parameters Type Name Guid correlationId System.Boolean maxEventsReached System.Object source Properties MaxEventsReached Declaration public bool MaxEventsReached { get; } Property Value Type System.Boolean MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ReaderSubscriptionMessage.SubscriptionMessage.MsgTypeId"
  },
  "dotnet-api/code/EventStore.ClientAPI.Common.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Common.html",
    "title": "Namespace EventStore.ClientAPI.Common | Event Store",
    "keywords": "Namespace EventStore.ClientAPI.Common Classes SystemConsumerStrategies System supported consumer strategies for use with persistent subscriptions. SystemEventTypes Constants for System event types SystemMetadata Constants for information in stream metadata"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionSubsystemMessage.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionSubsystemMessage.html",
    "title": "Class ProjectionSubsystemMessage | Event Store",
    "keywords": "Class ProjectionSubsystemMessage Inheritance System.Object ProjectionSubsystemMessage Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionSubsystemMessage : object"
  },
  "dotnet-api/code/EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionConfigDetails.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionConfigDetails.html",
    "title": "Class PersistentSubscriptionConfigDetails | Event Store",
    "keywords": "Class PersistentSubscriptionConfigDetails Configuration details of a persistent subscription. Inheritance System.Object PersistentSubscriptionConfigDetails Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI.PersistentSubscriptions Assembly : EventStore.ClientAPI.dll Syntax public sealed class PersistentSubscriptionConfigDetails Properties BufferSize Buffer size. Declaration public int BufferSize { get; set; } Property Value Type System.Int32 CheckPointAfterMilliseconds Checkpoint interval in ms. Declaration public int CheckPointAfterMilliseconds { get; set; } Property Value Type System.Int32 ExtraStatistics Extra statistics. Declaration public bool ExtraStatistics { get; set; } Property Value Type System.Boolean LiveBufferSize Live buffer size. Declaration public int LiveBufferSize { get; set; } Property Value Type System.Int32 MaxCheckPointCount Max number of events between checkpoints. Declaration public int MaxCheckPointCount { get; set; } Property Value Type System.Int32 MaxRetryCount Max retry count. Declaration public int MaxRetryCount { get; set; } Property Value Type System.Int32 MaxSubscriberCount Max subscribers permitted. Declaration public int MaxSubscriberCount { get; set; } Property Value Type System.Int32 MessageTimeoutMilliseconds Message timeout in ms. Declaration public int MessageTimeoutMilliseconds { get; set; } Property Value Type System.Int32 MinCheckPointCount Min number of events between checkpoints. Declaration public int MinCheckPointCount { get; set; } Property Value Type System.Int32 NamedConsumerStrategy Consumer strategy. Declaration public string NamedConsumerStrategy { get; set; } Property Value Type System.String PreferRoundRobin Whether to prefer round robin. Declaration public bool PreferRoundRobin { get; set; } Property Value Type System.Boolean ReadBatchSize Read buffer size. Declaration public int ReadBatchSize { get; set; } Property Value Type System.Int32 ResolveLinktos Whether to resolve LinkTos. Declaration public bool ResolveLinktos { get; set; } Property Value Type System.Boolean StartFrom Which event to start from. Declaration public long StartFrom { get; set; } Property Value Type System.Int64"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.CoreProjectionStatusMessageBase.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.CoreProjectionStatusMessageBase.html",
    "title": "Class CoreProjectionStatusMessage.CoreProjectionStatusMessageBase | Event Store",
    "keywords": "Class CoreProjectionStatusMessage.CoreProjectionStatusMessageBase Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionStatusMessage.CoreProjectionStatusMessageBase CoreProjectionStatusMessage.DataReportBase CoreProjectionStatusMessage.Faulted CoreProjectionStatusMessage.Prepared CoreProjectionStatusMessage.Started CoreProjectionStatusMessage.StatisticsReport CoreProjectionStatusMessage.Stopped CoreProjectionStatusMessage.Suspended Inherited Members CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class CoreProjectionStatusMessageBase : CoreProjectionManagementMessageBase Constructors CoreProjectionStatusMessageBase(Guid) Declaration protected CoreProjectionStatusMessageBase(Guid projectionId) Parameters Type Name Guid projectionId Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionManagementMessageBase.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionSubsystemMessage.ComponentStopped.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionSubsystemMessage.ComponentStopped.html",
    "title": "Class ProjectionSubsystemMessage.ComponentStopped | Event Store",
    "keywords": "Class ProjectionSubsystemMessage.ComponentStopped Inheritance System.Object EventStore.Core.Messaging.Message ProjectionSubsystemMessage.ComponentStopped Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class ComponentStopped : Message Constructors ComponentStopped(String, Guid) Declaration public ComponentStopped(string componentName, Guid instanceCorrelationId) Parameters Type Name System.String componentName Guid instanceCorrelationId Properties ComponentName Declaration public string ComponentName { get; } Property Value Type System.String InstanceCorrelationId Declaration public Guid InstanceCorrelationId { get; } Property Value Type Guid MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill.html",
    "title": "Class CoreProjectionManagementMessage.Kill | Event Store",
    "keywords": "Class CoreProjectionManagementMessage.Kill Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionManagementControlMessage CoreProjectionManagementMessage.Kill Inherited Members CoreProjectionManagementControlMessage.WorkerId CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Kill : CoreProjectionManagementControlMessage Constructors Kill(Guid, Guid) Declaration public Kill(Guid projectionId, Guid workerId) Parameters Type Name Guid projectionId Guid workerId Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionManagementControlMessage.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.SubscriptionStarted.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.SubscriptionStarted.html",
    "title": "Class EventReaderSubscriptionMessage.SubscriptionStarted | Event Store",
    "keywords": "Class EventReaderSubscriptionMessage.SubscriptionStarted Inheritance System.Object EventStore.Core.Messaging.Message EventReaderSubscriptionMessageBase EventReaderSubscriptionMessage.SubscriptionStarted Inherited Members EventReaderSubscriptionMessageBase.CheckpointTag EventReaderSubscriptionMessageBase.Progress EventReaderSubscriptionMessageBase.SubscriptionMessageSequenceNumber EventReaderSubscriptionMessageBase.SubscriptionId EventReaderSubscriptionMessageBase.Source EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class SubscriptionStarted : EventReaderSubscriptionMessageBase Constructors SubscriptionStarted(Guid, CheckpointTag, Int64, Int64, Object) Declaration public SubscriptionStarted(Guid subscriptionId, CheckpointTag checkpointTag, long startingLastCommitPosition, long subscriptionMessageSequenceNumber, object source = null) Parameters Type Name Guid subscriptionId CheckpointTag checkpointTag System.Int64 startingLastCommitPosition System.Int64 subscriptionMessageSequenceNumber System.Object source Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventReaderSubscriptionMessageBase.MsgTypeId StartingLastCommitPosition Declaration public long StartingLastCommitPosition { get; } Property Value Type System.Int64"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.Disable.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.Disable.html",
    "title": "Class ProjectionManagementMessage.Command.Disable | Event Store",
    "keywords": "Class ProjectionManagementMessage.Command.Disable Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Command.ControlMessage ProjectionManagementMessage.Command.Disable Inherited Members ProjectionManagementMessage.Command.ControlMessage.RunAs ProjectionManagementMessage.Command.ControlMessage.Envelope EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Disable : ProjectionManagementMessage.Command.ControlMessage Constructors Disable(IEnvelope, String, ProjectionManagementMessage.RunAs) Declaration public Disable(IEnvelope envelope, string name, ProjectionManagementMessage.RunAs runAs) Parameters Type Name EventStore.Core.Messaging.IEnvelope envelope System.String name ProjectionManagementMessage.RunAs runAs Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ProjectionManagementMessage.Command.ControlMessage.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedStream.WriterConfiguration.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedStream.WriterConfiguration.html",
    "title": "Class EmittedStream.WriterConfiguration | Event Store",
    "keywords": "Class EmittedStream.WriterConfiguration Inheritance System.Object EmittedStream.WriterConfiguration Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class WriterConfiguration : object Constructors WriterConfiguration(IEmittedStreamsWriter, EmittedStream.WriterConfiguration.StreamMetadata, IPrincipal, Int32, ILogger) Declaration public WriterConfiguration(IEmittedStreamsWriter writer, EmittedStream.WriterConfiguration.StreamMetadata streamMetadata, IPrincipal writeAs, int maxWriteBatchLength, ILogger logger = null) Parameters Type Name IEmittedStreamsWriter writer EmittedStream.WriterConfiguration.StreamMetadata streamMetadata IPrincipal writeAs System.Int32 maxWriteBatchLength EventStore.Common.Log.ILogger logger Properties Logger Declaration public ILogger Logger { get; } Property Value Type EventStore.Common.Log.ILogger MaxAge Declaration public TimeSpan? MaxAge { get; } Property Value Type System.Nullable < TimeSpan > MaxCount Declaration public int? MaxCount { get; } Property Value Type System.Nullable < System.Int32 > MaxWriteBatchLength Declaration public int MaxWriteBatchLength { get; } Property Value Type System.Int32 WriteAs Declaration public IPrincipal WriteAs { get; } Property Value Type IPrincipal Writer Declaration public IEmittedStreamsWriter Writer { get; } Property Value Type IEmittedStreamsWriter"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult.html",
    "title": "Class CoreProjectionManagementMessage.GetResult | Event Store",
    "keywords": "Class CoreProjectionManagementMessage.GetResult Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionManagementControlMessage CoreProjectionManagementMessage.GetResult Inherited Members CoreProjectionManagementControlMessage.WorkerId CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class GetResult : CoreProjectionManagementControlMessage Constructors GetResult(Guid, Guid, String, Guid) Declaration public GetResult(Guid correlationId, Guid projectionId, string partition, Guid workerId) Parameters Type Name Guid correlationId Guid projectionId System.String partition Guid workerId Properties CorrelationId Declaration public Guid CorrelationId { get; } Property Value Type Guid MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionManagementControlMessage.MsgTypeId Partition Declaration public string Partition { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.DisposeCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Commands.DisposeCommand.html",
    "title": "Class DisposeCommand | Event Store",
    "keywords": "Class DisposeCommand Inheritance System.Object DisposeCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Commands Assembly : EventStore.Projections.Core.dll Syntax public class DisposeCommand : object Properties Id Declaration public string Id { get; set; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventByTypeIndexEventReader.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EventByTypeIndexEventReader.html",
    "title": "Class EventByTypeIndexEventReader | Event Store",
    "keywords": "Class EventByTypeIndexEventReader Inheritance System.Object EventReader EventByTypeIndexEventReader Implements IEventReader IDisposable Inherited Members EventReader.EventReaderCorrelationId EventReader._publisher EventReader._stopOnEof EventReader._disposed EventReader.PauseRequested EventReader.Paused EventReader.ReadAs EventReader.Resume() EventReader.Pause() EventReader.SendEof() EventReader.SendPartitionEof(String, CheckpointTag) EventReader.SendPartitionDeleted_WhenReadingDataStream(String, Nullable<Int64>, Nullable<TFPos>, Nullable<TFPos>, String, Nullable<Int32>, CheckpointTag) EventReader.SendNotAuthorized() EventReader.GetLastCommitPositionFrom(ClientMessage.ReadStreamEventsForwardCompleted) EventReader.PauseOrContinueProcessing() EventReader.NotifyIfStarting(Int64) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class EventByTypeIndexEventReader : EventReader, IEventReader, IDisposable Constructors EventByTypeIndexEventReader(IPublisher, Guid, IPrincipal, String[], Boolean, TFPos, Dictionary<String, Int64>, Boolean, ITimeProvider, Boolean) Declaration public EventByTypeIndexEventReader(IPublisher publisher, Guid eventReaderCorrelationId, IPrincipal readAs, string[] eventTypes, bool includeDeletedStreamNotification, TFPos fromTfPosition, Dictionary<string, long> fromPositions, bool resolveLinkTos, ITimeProvider timeProvider, bool stopOnEof = false) Parameters Type Name EventStore.Core.Bus.IPublisher publisher Guid eventReaderCorrelationId IPrincipal readAs System.String [] eventTypes System.Boolean includeDeletedStreamNotification EventStore.Core.Data.TFPos fromTfPosition Dictionary < System.String , System.Int64 > fromPositions System.Boolean resolveLinkTos EventStore.Core.Services.TimerService.ITimeProvider timeProvider System.Boolean stopOnEof Fields MaxReadCount Declaration public const int MaxReadCount = null Field Value Type System.Int32 Methods AreEventsRequested() Declaration protected override bool AreEventsRequested() Returns Type Description System.Boolean Overrides EventReader.AreEventsRequested() Dispose() Declaration public override void Dispose() Overrides EventReader.Dispose() RequestEvents() Declaration protected override void RequestEvents() Overrides EventReader.RequestEvents() Implements IEventReader IDisposable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.html",
    "title": "Class ProjectionCoreServiceMessage | Event Store",
    "keywords": "Class ProjectionCoreServiceMessage Inheritance System.Object ProjectionCoreServiceMessage Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public static class ProjectionCoreServiceMessage : object"
  },
  "dotnet-api/code/EventStore.ClientAPI.ClientReconnectingEventArgs.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ClientReconnectingEventArgs.html",
    "title": "Class ClientReconnectingEventArgs | Event Store",
    "keywords": "Class ClientReconnectingEventArgs Event Arguments for the event raised when an IEventStoreConnection is about to reconnect to an Event Store server. Inheritance System.Object System.EventArgs ClientReconnectingEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class ClientReconnectingEventArgs : EventArgs Constructors ClientReconnectingEventArgs(IEventStoreConnection) Constructs a new instance of ClientReconnectingEventArgs . Declaration public ClientReconnectingEventArgs(IEventStoreConnection connection) Parameters Type Name IEventStoreConnection connection Properties Connection The IEventStoreConnection responsible for raising the event. Declaration public IEventStoreConnection Connection { get; } Property Value Type IEventStoreConnection"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.Abort.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.Abort.html",
    "title": "Class ProjectionManagementMessage.Command.Abort | Event Store",
    "keywords": "Class ProjectionManagementMessage.Command.Abort Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Command.ControlMessage ProjectionManagementMessage.Command.Abort Inherited Members ProjectionManagementMessage.Command.ControlMessage.RunAs ProjectionManagementMessage.Command.ControlMessage.Envelope EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Abort : ProjectionManagementMessage.Command.ControlMessage Constructors Abort(IEnvelope, String, ProjectionManagementMessage.RunAs) Declaration public Abort(IEnvelope envelope, string name, ProjectionManagementMessage.RunAs runAs) Parameters Type Name EventStore.Core.Messaging.IEnvelope envelope System.String name ProjectionManagementMessage.RunAs runAs Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides ProjectionManagementMessage.Command.ControlMessage.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.TransactionFileEventReader.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.TransactionFileEventReader.html",
    "title": "Class TransactionFileEventReader | Event Store",
    "keywords": "Class TransactionFileEventReader Inheritance System.Object EventReader TransactionFileEventReader Implements IEventReader IDisposable EventStore.Core.Bus.IHandle < EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted > EventStore.Core.Bus.IHandle < ProjectionManagementMessage.Internal.ReadTimeout > Inherited Members EventReader.EventReaderCorrelationId EventReader._publisher EventReader._stopOnEof EventReader._disposed EventReader.PauseRequested EventReader.Paused EventReader.ReadAs EventReader.Resume() EventReader.Pause() EventReader.Dispose() EventReader.SendEof() EventReader.SendPartitionEof(String, CheckpointTag) EventReader.SendPartitionDeleted_WhenReadingDataStream(String, Nullable<Int64>, Nullable<TFPos>, Nullable<TFPos>, String, Nullable<Int32>, CheckpointTag) EventReader.SendNotAuthorized() EventReader.GetLastCommitPositionFrom(ClientMessage.ReadStreamEventsForwardCompleted) EventReader.PauseOrContinueProcessing() EventReader.NotifyIfStarting(Int64) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class TransactionFileEventReader : EventReader, IEventReader, IDisposable, IHandle<ClientMessage.ReadAllEventsForwardCompleted>, IHandle<ProjectionManagementMessage.Internal.ReadTimeout> Constructors TransactionFileEventReader(IPublisher, Guid, IPrincipal, TFPos, ITimeProvider, Boolean, Boolean, Boolean) Declaration public TransactionFileEventReader(IPublisher publisher, Guid eventReaderCorrelationId, IPrincipal readAs, TFPos from, ITimeProvider timeProvider, bool stopOnEof = false, bool deliverEndOfTFPosition = true, bool resolveLinkTos = true) Parameters Type Name EventStore.Core.Bus.IPublisher publisher Guid eventReaderCorrelationId IPrincipal readAs EventStore.Core.Data.TFPos from EventStore.Core.Services.TimerService.ITimeProvider timeProvider System.Boolean stopOnEof System.Boolean deliverEndOfTFPosition System.Boolean resolveLinkTos Methods AreEventsRequested() Declaration protected override bool AreEventsRequested() Returns Type Description System.Boolean Overrides EventReader.AreEventsRequested() Handle(ClientMessage.ReadAllEventsForwardCompleted) Declaration public void Handle(ClientMessage.ReadAllEventsForwardCompleted message) Parameters Type Name EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted message Handle(ProjectionManagementMessage.Internal.ReadTimeout) Declaration public void Handle(ProjectionManagementMessage.Internal.ReadTimeout message) Parameters Type Name ProjectionManagementMessage.Internal.ReadTimeout message RequestEvents() Declaration protected override void RequestEvents() Overrides EventReader.RequestEvents() Implements IEventReader IDisposable EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized.html",
    "title": "Class EventReaderSubscriptionMessage.NotAuthorized | Event Store",
    "keywords": "Class EventReaderSubscriptionMessage.NotAuthorized Inheritance System.Object EventStore.Core.Messaging.Message EventReaderSubscriptionMessageBase EventReaderSubscriptionMessage.NotAuthorized Inherited Members EventReaderSubscriptionMessageBase.CheckpointTag EventReaderSubscriptionMessageBase.Progress EventReaderSubscriptionMessageBase.SubscriptionMessageSequenceNumber EventReaderSubscriptionMessageBase.SubscriptionId EventReaderSubscriptionMessageBase.Source EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public sealed class NotAuthorized : EventReaderSubscriptionMessageBase Constructors NotAuthorized(Guid, CheckpointTag, Single, Int64, Object) Declaration public NotAuthorized(Guid subscriptionId, CheckpointTag checkpointTag, float progress, long subscriptionMessageSequenceNumber, object source = null) Parameters Type Name Guid subscriptionId CheckpointTag checkpointTag System.Single progress System.Int64 subscriptionMessageSequenceNumber System.Object source Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventReaderSubscriptionMessageBase.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CoreProjection.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CoreProjection.html",
    "title": "Class CoreProjection | Event Store",
    "keywords": "Class CoreProjection Inheritance System.Object CoreProjection Implements ICoreProjection EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.CheckpointLoaded > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.PrerecordedEventsLoaded > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.CheckpointCompleted > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.RestartRequested > EventStore.Core.Bus.IHandle < CoreProjectionProcessingMessage.Failed > ICoreProjectionForProcessingPhase EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.GetState > EventStore.Core.Bus.IHandle < CoreProjectionManagementMessage.GetResult > Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class CoreProjection : IDisposable, ICoreProjection, IHandle<CoreProjectionProcessingMessage.CheckpointLoaded>, IHandle<CoreProjectionProcessingMessage.PrerecordedEventsLoaded>, IHandle<CoreProjectionProcessingMessage.CheckpointCompleted>, IHandle<CoreProjectionProcessingMessage.RestartRequested>, IHandle<CoreProjectionProcessingMessage.Failed>, ICoreProjectionForProcessingPhase, IHandle<CoreProjectionManagementMessage.GetState>, IHandle<CoreProjectionManagementMessage.GetResult> Constructors CoreProjection(ProjectionProcessingStrategy, ProjectionVersion, Guid, IPublisher, Guid, IPrincipal, IPublisher, IODispatcher, ReaderSubscriptionDispatcher, ILogger, ProjectionNamesBuilder, CoreProjectionCheckpointWriter, PartitionStateCache, String, ITimeProvider) Declaration public CoreProjection(ProjectionProcessingStrategy projectionProcessingStrategy, ProjectionVersion version, Guid projectionCorrelationId, IPublisher inputQueue, Guid workerId, IPrincipal runAs, IPublisher publisher, IODispatcher ioDispatcher, ReaderSubscriptionDispatcher subscriptionDispatcher, ILogger logger, ProjectionNamesBuilder namingBuilder, CoreProjectionCheckpointWriter coreProjectionCheckpointWriter, PartitionStateCache partitionStateCache, string effectiveProjectionName, ITimeProvider timeProvider) Parameters Type Name ProjectionProcessingStrategy projectionProcessingStrategy ProjectionVersion version Guid projectionCorrelationId EventStore.Core.Bus.IPublisher inputQueue Guid workerId IPrincipal runAs EventStore.Core.Bus.IPublisher publisher EventStore.Core.Helpers.IODispatcher ioDispatcher ReaderSubscriptionDispatcher subscriptionDispatcher EventStore.Common.Log.ILogger logger ProjectionNamesBuilder namingBuilder CoreProjectionCheckpointWriter coreProjectionCheckpointWriter PartitionStateCache partitionStateCache System.String effectiveProjectionName EventStore.Core.Services.TimerService.ITimeProvider timeProvider Properties LastProcessedEventPosition Declaration public CheckpointTag LastProcessedEventPosition { get; } Property Value Type CheckpointTag Methods CompletePhase() Declaration public void CompletePhase() Dispose() Declaration public void Dispose() EnsureTickPending() Declaration public void EnsureTickPending() EnsureUnsubscribed() Declaration public void EnsureUnsubscribed() Handle(CoreProjectionProcessingMessage.CheckpointCompleted) Declaration public void Handle(CoreProjectionProcessingMessage.CheckpointCompleted message) Parameters Type Name CoreProjectionProcessingMessage.CheckpointCompleted message Handle(CoreProjectionProcessingMessage.CheckpointLoaded) Declaration public void Handle(CoreProjectionProcessingMessage.CheckpointLoaded message) Parameters Type Name CoreProjectionProcessingMessage.CheckpointLoaded message Handle(CoreProjectionProcessingMessage.Failed) Declaration public void Handle(CoreProjectionProcessingMessage.Failed message) Parameters Type Name CoreProjectionProcessingMessage.Failed message Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded) Declaration public void Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded message) Parameters Type Name CoreProjectionProcessingMessage.PrerecordedEventsLoaded message Handle(CoreProjectionProcessingMessage.RestartRequested) Declaration public void Handle(CoreProjectionProcessingMessage.RestartRequested message) Parameters Type Name CoreProjectionProcessingMessage.RestartRequested message Handle(CoreProjectionManagementMessage.GetResult) Declaration public void Handle(CoreProjectionManagementMessage.GetResult message) Parameters Type Name CoreProjectionManagementMessage.GetResult message Handle(CoreProjectionManagementMessage.GetState) Declaration public void Handle(CoreProjectionManagementMessage.GetState message) Parameters Type Name CoreProjectionManagementMessage.GetState message Kill() Declaration public void Kill() LoadStopped() Declaration public void LoadStopped() SetCurrentCheckpointSuggestedWorkItem(CheckpointSuggestedWorkItem) Declaration public void SetCurrentCheckpointSuggestedWorkItem(CheckpointSuggestedWorkItem checkpointSuggestedWorkItem) Parameters Type Name CheckpointSuggestedWorkItem checkpointSuggestedWorkItem SetFaulted(Exception) Declaration public void SetFaulted(Exception ex) Parameters Type Name Exception ex SetFaulted(String) Declaration public void SetFaulted(string reason) Parameters Type Name System.String reason SetFaulting(String) Declaration public void SetFaulting(string reason) Parameters Type Name System.String reason Start() Declaration public void Start() Stop() Declaration public void Stop() Subscribed() Declaration public void Subscribed() Suspend() Declaration public bool Suspend() Returns Type Description System.Boolean Implements ICoreProjection EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T> ICoreProjectionForProcessingPhase EventStore.Core.Bus.IHandle<T> EventStore.Core.Bus.IHandle<T>"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Internal.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Internal.html",
    "title": "Class ProjectionManagementMessage.Internal | Event Store",
    "keywords": "Class ProjectionManagementMessage.Internal Inheritance System.Object ProjectionManagementMessage.Internal Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public static class Internal : object"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProjectionNamesBuilder.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.ProjectionNamesBuilder.html",
    "title": "Class ProjectionNamesBuilder | Event Store",
    "keywords": "Class ProjectionNamesBuilder Inheritance System.Object ProjectionNamesBuilder Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionNamesBuilder : object Constructors ProjectionNamesBuilder(String, IQuerySources) Declaration public ProjectionNamesBuilder(string name, IQuerySources sources) Parameters Type Name System.String name IQuerySources sources Fields _projectionsControlStream Declaration public const string _projectionsControlStream = null Field Value Type System.String _projectionsMasterStream Declaration public const string _projectionsMasterStream = null Field Value Type System.String ControlStreamMaxAge Declaration public static TimeSpan ControlStreamMaxAge Field Value Type TimeSpan CoreControlStreamMaxAge Declaration public static TimeSpan CoreControlStreamMaxAge Field Value Type TimeSpan MasterStreamMaxAge Declaration public static TimeSpan MasterStreamMaxAge Field Value Type TimeSpan ProjectionsRegistrationStream Declaration public const string ProjectionsRegistrationStream = null Field Value Type System.String ProjectionsStreamPrefix Declaration public const string ProjectionsStreamPrefix = null Field Value Type System.String SlaveProjectionControlStreamMaxAge Declaration public static TimeSpan SlaveProjectionControlStreamMaxAge Field Value Type TimeSpan Properties EffectiveProjectionName Declaration public string EffectiveProjectionName { get; } Property Value Type System.String Methods BuildControlStreamName(Guid) Declaration public static string BuildControlStreamName(Guid uniqueId) Parameters Type Name Guid uniqueId Returns Type Description System.String CreateForTest(String) Declaration public static ProjectionNamesBuilder CreateForTest(string name) Parameters Type Name System.String name Returns Type Description ProjectionNamesBuilder GetCategoryCatalogStreamName(String) Declaration public string GetCategoryCatalogStreamName(string category) Parameters Type Name System.String category Returns Type Description System.String GetEmittedStreamsCheckpointName() Declaration public string GetEmittedStreamsCheckpointName() Returns Type Description System.String GetEmittedStreamsName() Declaration public string GetEmittedStreamsName() Returns Type Description System.String GetOrderStreamName() Declaration public string GetOrderStreamName() Returns Type Description System.String GetPartitionCatalogStreamName() Declaration public string GetPartitionCatalogStreamName() Returns Type Description System.String GetPartitionResultCatalogStreamName() Declaration public string GetPartitionResultCatalogStreamName() Returns Type Description System.String GetPartitionResultStreamNamePattern() Declaration public string GetPartitionResultStreamNamePattern() Returns Type Description System.String GetResultStreamName() Declaration public string GetResultStreamName() Returns Type Description System.String MakeCheckpointStreamName() Declaration public string MakeCheckpointStreamName() Returns Type Description System.String MakeControlStreamName(Guid) Declaration public static string MakeControlStreamName(Guid guid) Parameters Type Name Guid guid Returns Type Description System.String MakeControlStreamName(String) Declaration public static string MakeControlStreamName(string guid) Parameters Type Name System.String guid Returns Type Description System.String MakePartitionCheckpointStreamName(String) Declaration public string MakePartitionCheckpointStreamName(string statePartition) Parameters Type Name System.String statePartition Returns Type Description System.String MakePartitionResultStreamName(String) Declaration public string MakePartitionResultStreamName(string statePartition) Parameters Type Name System.String statePartition Returns Type Description System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.GetStatistics.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionManagementMessage.Command.GetStatistics.html",
    "title": "Class ProjectionManagementMessage.Command.GetStatistics | Event Store",
    "keywords": "Class ProjectionManagementMessage.Command.GetStatistics Inheritance System.Object EventStore.Core.Messaging.Message ProjectionManagementMessage.Command.GetStatistics Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class GetStatistics : Message Constructors GetStatistics(IEnvelope, Nullable<ProjectionMode>, String, Boolean) Declaration public GetStatistics(IEnvelope envelope, ProjectionMode? mode, string name, bool includeDeleted) Parameters Type Name EventStore.Core.Messaging.IEnvelope envelope System.Nullable < ProjectionMode > mode System.String name System.Boolean includeDeleted Properties Envelope Declaration public IEnvelope Envelope { get; } Property Value Type EventStore.Core.Messaging.IEnvelope IncludeDeleted Declaration public bool IncludeDeleted { get; } Property Value Type System.Boolean Mode Declaration public ProjectionMode? Mode { get; } Property Value Type System.Nullable < ProjectionMode > MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId Name Declaration public string Name { get; } Property Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IReaderSubscription.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IReaderSubscription.html",
    "title": "Interface IReaderSubscription | Event Store",
    "keywords": "Interface IReaderSubscription Inherited Members EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.CommittedEventDistributed>.Handle(EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.CommittedEventDistributed) EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderIdle>.Handle(EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderIdle) EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderStarting>.Handle(EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderStarting) EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderEof>.Handle(EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderEof) EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderPartitionEof>.Handle(EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderPartitionEof) EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderPartitionDeleted>.Handle(EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderPartitionDeleted) EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderNotAuthorized>.Handle(EventStore.Projections.Core.Messages.ReaderSubscriptionMessage.EventReaderNotAuthorized) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public interface IReaderSubscription : IHandle<ReaderSubscriptionMessage.CommittedEventDistributed>, IHandle<ReaderSubscriptionMessage.EventReaderIdle>, IHandle<ReaderSubscriptionMessage.EventReaderStarting>, IHandle<ReaderSubscriptionMessage.EventReaderEof>, IHandle<ReaderSubscriptionMessage.EventReaderPartitionEof>, IHandle<ReaderSubscriptionMessage.EventReaderPartitionDeleted>, IHandle<ReaderSubscriptionMessage.EventReaderNotAuthorized> Properties SubscriptionId Declaration Guid SubscriptionId { get; } Property Value Type Guid Tag Declaration string Tag { get; } Property Value Type System.String Methods CreatePausedEventReader(IPublisher, IODispatcher, Guid) Declaration IEventReader CreatePausedEventReader(IPublisher publisher, IODispatcher ioDispatcher, Guid forkedEventReaderId) Parameters Type Name EventStore.Core.Bus.IPublisher publisher EventStore.Core.Helpers.IODispatcher ioDispatcher Guid forkedEventReaderId Returns Type Description IEventReader"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionSubsystemMessage.ComponentStarted.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionSubsystemMessage.ComponentStarted.html",
    "title": "Class ProjectionSubsystemMessage.ComponentStarted | Event Store",
    "keywords": "Class ProjectionSubsystemMessage.ComponentStarted Inheritance System.Object EventStore.Core.Messaging.Message ProjectionSubsystemMessage.ComponentStarted Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class ComponentStarted : Message Constructors ComponentStarted(String, Guid) Declaration public ComponentStarted(string componentName, Guid instanceCorrelationId) Parameters Type Name System.String componentName Guid instanceCorrelationId Properties ComponentName Declaration public string ComponentName { get; } Property Value Type System.String InstanceCorrelationId Declaration public Guid InstanceCorrelationId { get; } Property Value Type Guid MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.GetStatisticsCommand.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.Persisted.Responses.GetStatisticsCommand.html",
    "title": "Class GetStatisticsCommand | Event Store",
    "keywords": "Class GetStatisticsCommand Inheritance System.Object GetStatisticsCommand Namespace : EventStore.Projections.Core.Messages.Persisted.Responses Assembly : EventStore.Projections.Core.dll Syntax public class GetStatisticsCommand : object Fields IncludeDeleted Declaration public bool IncludeDeleted Field Value Type System.Boolean Mode Declaration public ProjectionMode? Mode Field Value Type System.Nullable < ProjectionMode > Name Declaration public string Name Field Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start.html",
    "title": "Class CoreProjectionManagementMessage.Start | Event Store",
    "keywords": "Class CoreProjectionManagementMessage.Start Inheritance System.Object EventStore.Core.Messaging.Message CoreProjectionManagementMessageBase CoreProjectionManagementControlMessage CoreProjectionManagementMessage.Start Inherited Members CoreProjectionManagementControlMessage.WorkerId CoreProjectionManagementMessageBase.ProjectionId EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class Start : CoreProjectionManagementControlMessage Constructors Start(Guid, Guid) Declaration public Start(Guid projectionId, Guid workerId) Parameters Type Name Guid projectionId Guid workerId Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides CoreProjectionManagementControlMessage.MsgTypeId"
  },
  "dotnet-api/code/EventStore.ClientAPI.Projections.ProjectionDetails.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Projections.ProjectionDetails.html",
    "title": "Class ProjectionDetails | Event Store",
    "keywords": "Class ProjectionDetails Provides the details for a projection. Inheritance System.Object ProjectionDetails Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI.Projections Assembly : EventStore.ClientAPI.dll Syntax public sealed class ProjectionDetails Constructors ProjectionDetails(Int64, Int64, Int64, String, Int32, Int32, Int32, String, String, String, String, String, Single, String, Int64, Uri, Uri, Uri, Uri, Uri, Uri, String, Int64, Int32, Int32) create a new ProjectionDetails class. Declaration public ProjectionDetails(long coreProcessingTime, long version, long epoch, string effectiveName, int writesInProgress, int readsInProgress, int partitionsCached, string status, string stateReason, string name, string mode, string position, float progress, string lastCheckpoint, long eventsProcessedAfterRestart, Uri statusUrl, Uri stateUrl, Uri resultUrl, Uri queryUrl, Uri enableCommandUrl, Uri disableCommandUrl, string checkpointStatus, long bufferedEvents, int writePendingEventsBeforeCheckpoint, int writePendingEventsAfterCheckpoint) Parameters Type Name System.Int64 coreProcessingTime System.Int64 version System.Int64 epoch System.String effectiveName System.Int32 writesInProgress System.Int32 readsInProgress System.Int32 partitionsCached System.String status System.String stateReason System.String name System.String mode System.String position System.Single progress System.String lastCheckpoint System.Int64 eventsProcessedAfterRestart System.Uri statusUrl System.Uri stateUrl System.Uri resultUrl System.Uri queryUrl System.Uri enableCommandUrl System.Uri disableCommandUrl System.String checkpointStatus System.Int64 bufferedEvents System.Int32 writePendingEventsBeforeCheckpoint System.Int32 writePendingEventsAfterCheckpoint Fields BufferedEvents The projection BufferedEvents Declaration public readonly long BufferedEvents Field Value Type System.Int64 CheckpointStatus The projection CheckpointStatus Declaration public readonly string CheckpointStatus Field Value Type System.String CoreProcessingTime The CoreProcessingTime Declaration public readonly long CoreProcessingTime Field Value Type System.Int64 DisableCommandUrl The projection DisableCommandUrl Declaration public readonly Uri DisableCommandUrl Field Value Type System.Uri EffectiveName The projection EffectiveName Declaration public readonly string EffectiveName Field Value Type System.String EnableCommandUrl The projection EnableCommandUrl Declaration public readonly Uri EnableCommandUrl Field Value Type System.Uri Epoch The Epoch Declaration public readonly long Epoch Field Value Type System.Int64 EventsProcessedAfterRestart The projection EventsProcessedAfterRestart Declaration public readonly long EventsProcessedAfterRestart Field Value Type System.Int64 LastCheckpoint LastCheckpoint Declaration public readonly string LastCheckpoint Field Value Type System.String Mode The projection Mode Declaration public readonly string Mode Field Value Type System.String Name The projection Name Declaration public readonly string Name Field Value Type System.String PartitionsCached The projection PartitionsCached Declaration public readonly int PartitionsCached Field Value Type System.Int32 Position The projection Position Declaration public readonly string Position Field Value Type System.String Progress The projection Progress Declaration public readonly float Progress Field Value Type System.Single QueryUrl The projection QueryUrl Declaration public readonly Uri QueryUrl Field Value Type System.Uri ReadsInProgress The projection ReadsInProgress Declaration public readonly int ReadsInProgress Field Value Type System.Int32 ResultUrl The projection ResultUrl Declaration public readonly Uri ResultUrl Field Value Type System.Uri StateReason The projection StateReason Declaration public readonly string StateReason Field Value Type System.String StateUrl The projection StateUrl Declaration public readonly Uri StateUrl Field Value Type System.Uri Status The projection Status Declaration public readonly string Status Field Value Type System.String StatusUrl The projection StatusUrl Declaration public readonly Uri StatusUrl Field Value Type System.Uri Version The projection version Declaration public readonly long Version Field Value Type System.Int64 WritePendingEventsAfterCheckpoint The projection WritePendingEventsAfterCheckpoint Declaration public readonly int WritePendingEventsAfterCheckpoint Field Value Type System.Int32 WritePendingEventsBeforeCheckpoint The projection WritePendingEventsBeforeCheckpoint Declaration public readonly int WritePendingEventsBeforeCheckpoint Field Value Type System.Int32 WritesInProgress The projection WritesInProgress Declaration public readonly int WritesInProgress Field Value Type System.Int32"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IEmittedStreamsDeleter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IEmittedStreamsDeleter.html",
    "title": "Interface IEmittedStreamsDeleter | Event Store",
    "keywords": "Interface IEmittedStreamsDeleter Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public interface IEmittedStreamsDeleter Methods DeleteEmittedStreams(Action) Declaration void DeleteEmittedStreams(Action onEmittedStreamsDeleted) Parameters Type Name Action onEmittedStreamsDeleted"
  },
  "dotnet-api/code/EventStore.ClientAPI.StreamMetadataBuilder.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.StreamMetadataBuilder.html",
    "title": "Class StreamMetadataBuilder | Event Store",
    "keywords": "Class StreamMetadataBuilder Builder for StreamMetadata . Inheritance System.Object StreamMetadataBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public class StreamMetadataBuilder Properties CustomPropertyKeys All existing custom property keys. Declaration public IEnumerable<string> CustomPropertyKeys { get; } Property Value Type System.Collections.Generic.IEnumerable < System.String > Remarks Returns a copy of the key list so it's safe to enumerate whilst removing custom properties. Methods Build() Builds a StreamMetadata from a StreamMetadataBuilder . Declaration public StreamMetadata Build() Returns Type Description StreamMetadata RemoveCustomProperty(String) Removes a custom property. Declaration public StreamMetadataBuilder RemoveCustomProperty(string key) Parameters Type Name System.String key Returns Type Description StreamMetadataBuilder The builder. SetCacheControl(TimeSpan) Sets the amount of time for which the stream head is cachable. Declaration public StreamMetadataBuilder SetCacheControl(TimeSpan cacheControl) Parameters Type Name System.TimeSpan cacheControl Returns Type Description StreamMetadataBuilder The builder. SetCustomProperty(String, Boolean) Sets a custom metadata property. Declaration public StreamMetadataBuilder SetCustomProperty(string key, bool value) Parameters Type Name System.String key System.Boolean value Returns Type Description StreamMetadataBuilder The builder. SetCustomProperty(String, Decimal) Sets a custom metadata property. Declaration public StreamMetadataBuilder SetCustomProperty(string key, decimal value) Parameters Type Name System.String key System.Decimal value Returns Type Description StreamMetadataBuilder The builder. SetCustomProperty(String, Double) Sets a custom metadata property. Declaration public StreamMetadataBuilder SetCustomProperty(string key, double value) Parameters Type Name System.String key System.Double value Returns Type Description StreamMetadataBuilder The builder. SetCustomProperty(String, Int32) Sets a custom metadata property. Declaration public StreamMetadataBuilder SetCustomProperty(string key, int value) Parameters Type Name System.String key System.Int32 value Returns Type Description StreamMetadataBuilder The builder. SetCustomProperty(String, Int64) Sets a custom metadata property. Declaration public StreamMetadataBuilder SetCustomProperty(string key, long value) Parameters Type Name System.String key System.Int64 value Returns Type Description StreamMetadataBuilder The builder. SetCustomProperty(String, Nullable<Boolean>) Sets a custom metadata property. Declaration public StreamMetadataBuilder SetCustomProperty(string key, bool? value) Parameters Type Name System.String key System.Nullable < System.Boolean > value Returns Type Description StreamMetadataBuilder The builder. SetCustomProperty(String, Nullable<Decimal>) Sets a custom metadata property. Declaration public StreamMetadataBuilder SetCustomProperty(string key, decimal? value) Parameters Type Name System.String key System.Nullable < System.Decimal > value Returns Type Description StreamMetadataBuilder The builder. SetCustomProperty(String, Nullable<Double>) Sets a custom metadata property. Declaration public StreamMetadataBuilder SetCustomProperty(string key, double? value) Parameters Type Name System.String key System.Nullable < System.Double > value Returns Type Description StreamMetadataBuilder The builder. SetCustomProperty(String, Nullable<Int32>) Sets a custom metadata property. Declaration public StreamMetadataBuilder SetCustomProperty(string key, int? value) Parameters Type Name System.String key System.Nullable < System.Int32 > value Returns Type Description StreamMetadataBuilder The builder. SetCustomProperty(String, Nullable<Int64>) Sets a custom metadata property. Declaration public StreamMetadataBuilder SetCustomProperty(string key, long? value) Parameters Type Name System.String key System.Nullable < System.Int64 > value Returns Type Description StreamMetadataBuilder The builder. SetCustomProperty(String, Nullable<Single>) Sets a custom metadata property. Declaration public StreamMetadataBuilder SetCustomProperty(string key, float? value) Parameters Type Name System.String key System.Nullable < System.Single > value Returns Type Description StreamMetadataBuilder The builder. SetCustomProperty(String, Single) Sets a custom metadata property. Declaration public StreamMetadataBuilder SetCustomProperty(string key, float value) Parameters Type Name System.String key System.Single value Returns Type Description StreamMetadataBuilder The builder. SetCustomProperty(String, String) Sets a custom metadata property. Declaration public StreamMetadataBuilder SetCustomProperty(string key, string value) Parameters Type Name System.String key System.String value Returns Type Description StreamMetadataBuilder The builder. SetCustomPropertyWithValueAsRawJsonString(String, String) Sets a custom metadata property to a string of raw JSON. Declaration public StreamMetadataBuilder SetCustomPropertyWithValueAsRawJsonString(string key, string rawJson) Parameters Type Name System.String key System.String rawJson Returns Type Description StreamMetadataBuilder The builder. SetDeleteRole(String) Sets a single role name with delete permission for the stream. Declaration public StreamMetadataBuilder SetDeleteRole(string role) Parameters Type Name System.String role Returns Type Description StreamMetadataBuilder The builder. SetDeleteRoles(String[]) Sets role names with delete permission for the stream. Declaration public StreamMetadataBuilder SetDeleteRoles(string[] roles) Parameters Type Name System.String [] roles Returns Type Description StreamMetadataBuilder The builder. SetMaxAge(TimeSpan) Sets the maximum age of events allowed in the stream. Declaration public StreamMetadataBuilder SetMaxAge(TimeSpan maxAge) Parameters Type Name System.TimeSpan maxAge Returns Type Description StreamMetadataBuilder The builder. SetMaxCount(Int64) Sets the maximum number of events allowed in the stream. Declaration public StreamMetadataBuilder SetMaxCount(long maxCount) Parameters Type Name System.Int64 maxCount Returns Type Description StreamMetadataBuilder The builder. SetMetadataReadRole(String) Sets a single role name with metadata read permission for the stream. Declaration public StreamMetadataBuilder SetMetadataReadRole(string role) Parameters Type Name System.String role Returns Type Description StreamMetadataBuilder The builder. SetMetadataReadRoles(String[]) Sets role names with metadata read permission for the stream. Declaration public StreamMetadataBuilder SetMetadataReadRoles(string[] roles) Parameters Type Name System.String [] roles Returns Type Description StreamMetadataBuilder The builder. SetMetadataWriteRole(String) Sets a single role name with metadata write permission for the stream. Declaration public StreamMetadataBuilder SetMetadataWriteRole(string role) Parameters Type Name System.String role Returns Type Description StreamMetadataBuilder The builder. SetMetadataWriteRoles(String[]) Sets role names with metadata write permission for the stream. Declaration public StreamMetadataBuilder SetMetadataWriteRoles(string[] roles) Parameters Type Name System.String [] roles Returns Type Description StreamMetadataBuilder The builder. SetReadRole(String) Sets a single role name with read permission for the stream. Declaration public StreamMetadataBuilder SetReadRole(string role) Parameters Type Name System.String role Returns Type Description StreamMetadataBuilder The builder. SetReadRoles(String[]) Sets role names with read permission for the stream. Declaration public StreamMetadataBuilder SetReadRoles(string[] roles) Parameters Type Name System.String [] roles Returns Type Description StreamMetadataBuilder The builder. SetTruncateBefore(Int64) Sets the event number from which previous events can be scavenged. Declaration public StreamMetadataBuilder SetTruncateBefore(long truncateBefore) Parameters Type Name System.Int64 truncateBefore Returns Type Description StreamMetadataBuilder The builder. SetWriteRole(String) Sets a single role name with write permission for the stream. Declaration public StreamMetadataBuilder SetWriteRole(string role) Parameters Type Name System.String role Returns Type Description StreamMetadataBuilder The builder. SetWriteRoles(String[]) Sets role names with write permission for the stream. Declaration public StreamMetadataBuilder SetWriteRoles(string[] roles) Parameters Type Name System.String [] roles Returns Type Description StreamMetadataBuilder The builder. Operators Implicit(StreamMetadataBuilder to StreamMetadata) Builds a StreamMetadata from a StreamMetadataBuilder . Declaration public static implicit operator StreamMetadata(StreamMetadataBuilder builder) Parameters Type Name StreamMetadataBuilder builder Returns Type Description StreamMetadata A StreamMetadata ."
  },
  "dotnet-api/code/EventStore.ClientAPI.ClientApiConstants.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ClientApiConstants.html",
    "title": "Class ClientApiConstants | Event Store",
    "keywords": "Class ClientApiConstants Various constant values that may be useful when working with the ClientAPI. Inheritance System.Object ClientApiConstants Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public static class ClientApiConstants Fields MaxReadSize The maximum number of events that can be read in a single operation. Declaration public static readonly int MaxReadSize Field Value Type System.Int32"
  },
  "dotnet-api/code/EventStore.Projections.Core.v8.Js1.ReverseCommandHandlerDelegate.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.v8.Js1.ReverseCommandHandlerDelegate.html",
    "title": "Delegate Js1.ReverseCommandHandlerDelegate | Event Store",
    "keywords": "Delegate Js1.ReverseCommandHandlerDelegate Namespace : EventStore.Projections.Core.v8 Assembly : EventStore.Projections.Core.dll Syntax public delegate void ReverseCommandHandlerDelegate(string commandName, string commandBody); Parameters Type Name Description System.String commandName System.String commandBody"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped.html",
    "title": "Class ProjectionCoreServiceMessage.SubComponentStopped | Event Store",
    "keywords": "Class ProjectionCoreServiceMessage.SubComponentStopped Inheritance System.Object EventStore.Core.Messaging.Message ProjectionCoreServiceMessage.SubComponentStopped Inherited Members EventStore.Core.Messaging.Message.NextMsgId Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public class SubComponentStopped : Message Constructors SubComponentStopped(String, Guid) Declaration public SubComponentStopped(string subComponent, Guid queueId) Parameters Type Name System.String subComponent Guid queueId Fields SubComponent Declaration public readonly string SubComponent Field Value Type System.String Properties MsgTypeId Declaration public override int MsgTypeId { get; } Property Value Type System.Int32 Overrides EventStore.Core.Messaging.Message.MsgTypeId QueueId Declaration public Guid QueueId { get; } Property Value Type Guid"
  },
  "dotnet-api/code/EventStore.ClientAPI.IEventStoreConnection.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.IEventStoreConnection.html",
    "title": "Interface IEventStoreConnection | Event Store",
    "keywords": "Interface IEventStoreConnection Maintains a full duplex connection to Event Store. Inherited Members System.IDisposable.Dispose() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public interface IEventStoreConnection : IDisposable Remarks An IEventStoreConnection operates differently than a SqlConnection. Normally when using an IEventStoreConnection you want to keep the connection open for a much longer of time than when you use a SqlConnection. If you prefer the usage pattern of using(new Connection()) .. then you would likely want to create a FlyWeight on top of the EventStoreConnection . Another difference is that with the IEventStoreConnection all operations are handled in a full async manner (even if you call the synchronous behaviors). Many threads can use an IEventStoreConnection at the same time or a single thread can make many asynchronous requests. To get the best performance out of the connection it is generally recommended to use it in this way. Properties ConnectionName Gets the name of this connection. A connection name is useful for disambiguation in log files. Declaration string ConnectionName { get; } Property Value Type System.String Settings A ConnectionSettings object is an immutable representation of the settings for an IEventStoreConnection . Declaration ConnectionSettings Settings { get; } Property Value Type ConnectionSettings Methods AppendToStreamAsync(String, Int64, EventData[]) Appends events asynchronously to a stream. Declaration Task<WriteResult> AppendToStreamAsync(string stream, long expectedVersion, params EventData[] events) Parameters Type Name System.String stream System.Int64 expectedVersion EventData [] events Returns Type Description System.Threading.Tasks.Task < WriteResult > A System.Threading.Tasks.Task<TResult> containing the results of the write operation. Remarks When appending events to a stream the ExpectedVersion choice can make a large difference in the observed behavior. For example, if no stream exists and ExpectedVersion.Any is used, a new stream will be implicitly created when appending. TODO: Link above and below? There are also differences in idempotency between different types of calls. If you specify an ExpectedVersion aside from ExpectedVersion.Any, Event Store will give you an idempotency guarantee. If using ExpectedVersion.Any, Event Store will do its best to provide idempotency but does not guarantee idempotency. AppendToStreamAsync(String, Int64, UserCredentials, EventData[]) Appends events asynchronously to a stream. Declaration Task<WriteResult> AppendToStreamAsync(string stream, long expectedVersion, UserCredentials userCredentials, params EventData[] events) Parameters Type Name System.String stream System.Int64 expectedVersion UserCredentials userCredentials EventData [] events Returns Type Description System.Threading.Tasks.Task < WriteResult > A System.Threading.Tasks.Task<TResult> containing the results of the write operation. Remarks When appending events to a stream the ExpectedVersion choice can make a large difference in the observed behavior. For example, if no stream exists and ExpectedVersion.Any is used, a new stream will be implicitly created when appending. There are also differences in idempotency between different types of calls. If you specify an ExpectedVersion aside from ExpectedVersion.Any, Event Store will give you an idempotency guarantee. If using ExpectedVersion.Any, Event Store will do its best to provide idempotency but does not guarantee idempotency. AppendToStreamAsync(String, Int64, IEnumerable<EventData>, UserCredentials) Appends events asynchronously to a stream. Declaration Task<WriteResult> AppendToStreamAsync(string stream, long expectedVersion, IEnumerable<EventData> events, UserCredentials userCredentials = null) Parameters Type Name System.String stream System.Int64 expectedVersion System.Collections.Generic.IEnumerable < EventData > events UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < WriteResult > A System.Threading.Tasks.Task<TResult> containing the results of the write operation. Remarks When appending events to a stream the ExpectedVersion choice can make a large difference in the observed behavior. For example, if no stream exists and ExpectedVersion.Any is used, a new stream will be implicitly created when appending. There are also differences in idempotency between different types of calls. If you specify an ExpectedVersion aside from ExpectedVersion.Any, Event Store will give you an idempotency guarantee. If using ExpectedVersion.Any, Event Store will do its best to provide idempotency but does not guarantee idempotency. Close() Closes this IEventStoreConnection . Declaration void Close() ConditionalAppendToStreamAsync(String, Int64, IEnumerable<EventData>, UserCredentials) Appends events asynchronously to a stream if the stream version matches the expectedVersion . Declaration Task<ConditionalWriteResult> ConditionalAppendToStreamAsync(string stream, long expectedVersion, IEnumerable<EventData> events, UserCredentials userCredentials = null) Parameters Type Name System.String stream System.Int64 expectedVersion System.Collections.Generic.IEnumerable < EventData > events UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < ConditionalWriteResult > A System.Threading.Tasks.Task<TResult> describing if the operation succeeded and, if not, the reason for failure (which can be either stream version mismatch or trying to write to a deleted stream). Remarks When appending events to a stream the ExpectedVersion choice can make a large difference in the observed behavior. For example, if no stream exists and ExpectedVersion.Any is used, a new stream will be implicitly created when appending. There are also differences in idempotency between different types of calls. If you specify an ExpectedVersion aside from ExpectedVersion.Any, Event Store will give you an idempotency guarantee. If using ExpectedVersion.Any, Event Store will do its best to provide idempotency but does not guarantee idempotency. ConnectAsync() Connects the IEventStoreConnection asynchronously to a destination. Declaration Task ConnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task to wait upon. ConnectToPersistentSubscription(String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Nullable<Int32>, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean) Subscribes to a persistent subscription (competing consumer) on an event store. Declaration EventStorePersistentSubscriptionBase ConnectToPersistentSubscription(string stream, string groupName, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, int?, Task> eventAppeared, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null, int bufferSize = 10, bool autoAck = true) Parameters Type Name System.String stream System.String groupName System.Func < EventStorePersistentSubscriptionBase , ResolvedEvent , System.Nullable < System.Int32 >, System.Threading.Tasks.Task > eventAppeared System.Action < EventStorePersistentSubscriptionBase , SubscriptionDropReason , System.Exception > subscriptionDropped UserCredentials userCredentials System.Int32 bufferSize System.Boolean autoAck Returns Type Description EventStorePersistentSubscriptionBase An EventStorePersistentSubscriptionBase representing the subscription. Remarks This will connect you to a persistent subscription group for a stream. The subscription group must first be created with CreatePersistentSubscriptionAsync. Many connections can connect to the same group and they will be treated as competing consumers within the group. If one connection dies work will be balanced across the rest of the consumers in the group. If you attempt to connect to a group that does not exist you will be given an exception. ConnectToPersistentSubscriptionAsync(String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Nullable<Int32>, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean) Asynchronously subscribes to a persistent subscription (competing consumer) on an event store. Declaration Task<EventStorePersistentSubscriptionBase> ConnectToPersistentSubscriptionAsync(string stream, string groupName, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, int?, Task> eventAppeared, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null, int bufferSize = 10, bool autoAck = true) Parameters Type Name System.String stream System.String groupName System.Func < EventStorePersistentSubscriptionBase , ResolvedEvent , System.Nullable < System.Int32 >, System.Threading.Tasks.Task > eventAppeared System.Action < EventStorePersistentSubscriptionBase , SubscriptionDropReason , System.Exception > subscriptionDropped UserCredentials userCredentials System.Int32 bufferSize System.Boolean autoAck Returns Type Description System.Threading.Tasks.Task < EventStorePersistentSubscriptionBase > An EventStorePersistentSubscriptionBase representing the subscription. Remarks This will connect you to a persistent subscription group for a stream. The subscription group must first be created with CreatePersistentSubscriptionAsync. Many connections can connect to the same group and they will be treated as competing consumers within the group. If one connection dies work will be balanced across the rest of the consumers in the group. If you attempt to connect to a group that does not exist you will be given an exception. ContinueTransaction(Int64, UserCredentials) Continues specified transaction. Declaration EventStoreTransaction ContinueTransaction(long transactionId, UserCredentials userCredentials = null) Parameters Type Name System.Int64 transactionId UserCredentials userCredentials Returns Type Description EventStoreTransaction A EventStoreTransaction representing a multi-request transaction. Remarks A EventStoreTransaction allows the calling of multiple writes with multiple round trips over long periods of time between the caller and the event store. This method is only available through the TCP interface and no equivalent exists for the RESTful interface. CreatePersistentSubscriptionAsync(String, String, PersistentSubscriptionSettings, UserCredentials) Asynchronously create a persistent subscription group on a stream. Declaration Task CreatePersistentSubscriptionAsync(string stream, string groupName, PersistentSubscriptionSettings settings, UserCredentials credentials) Parameters Type Name System.String stream System.String groupName PersistentSubscriptionSettings settings UserCredentials credentials Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that can be waited upon. DeletePersistentSubscriptionAsync(String, String, UserCredentials) Asynchronously delete a persistent subscription group on a stream. Declaration Task DeletePersistentSubscriptionAsync(string stream, string groupName, UserCredentials userCredentials = null) Parameters Type Name System.String stream System.String groupName UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that can be waited upon. DeleteStreamAsync(String, Int64, UserCredentials) Deletes a stream from Event Store asynchronously. Declaration Task<DeleteResult> DeleteStreamAsync(string stream, long expectedVersion, UserCredentials userCredentials = null) Parameters Type Name System.String stream System.Int64 expectedVersion UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < DeleteResult > A System.Threading.Tasks.Task<TResult> containing the results of the delete stream operation. DeleteStreamAsync(String, Int64, Boolean, UserCredentials) Deletes a stream from Event Store asynchronously. Declaration Task<DeleteResult> DeleteStreamAsync(string stream, long expectedVersion, bool hardDelete, UserCredentials userCredentials = null) Parameters Type Name System.String stream System.Int64 expectedVersion System.Boolean hardDelete UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < DeleteResult > A System.Threading.Tasks.Task<TResult> containing the results of the delete stream operation. FilteredReadAllEventsBackwardAsync(Position, Int32, Boolean, Filter, UserCredentials) Asynchronously reads all events in the node backwards (e.g. end to beginning). Filters events based upon the passed in filter. Declaration Task<AllEventsSlice> FilteredReadAllEventsBackwardAsync(Position position, int maxCount, bool resolveLinkTos, Filter filter, UserCredentials userCredentials = null) Parameters Type Name Position position System.Int32 maxCount System.Boolean resolveLinkTos Filter filter UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < AllEventsSlice > A System.Threading.Tasks.Task<TResult> containing the records read. FilteredReadAllEventsBackwardAsync(Position, Int32, Boolean, Filter, Int32, UserCredentials) Asynchronously reads all events in the node backwards (e.g. end to beginning). Filters events based upon the passed in filter. Declaration Task<AllEventsSlice> FilteredReadAllEventsBackwardAsync(Position position, int maxCount, bool resolveLinkTos, Filter filter, int maxSearchWindow, UserCredentials userCredentials = null) Parameters Type Name Position position System.Int32 maxCount System.Boolean resolveLinkTos Filter filter System.Int32 maxSearchWindow UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < AllEventsSlice > A System.Threading.Tasks.Task<TResult> containing the records read. FilteredReadAllEventsForwardAsync(Position, Int32, Boolean, Filter, UserCredentials) Asynchronously reads all events in the node forward (e.g. beginning to end). Filters events based upon the passed in filter. Declaration Task<AllEventsSlice> FilteredReadAllEventsForwardAsync(Position position, int maxCount, bool resolveLinkTos, Filter filter, UserCredentials userCredentials = null) Parameters Type Name Position position System.Int32 maxCount System.Boolean resolveLinkTos Filter filter UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < AllEventsSlice > A System.Threading.Tasks.Task<TResult> containing the records read. FilteredReadAllEventsForwardAsync(Position, Int32, Boolean, Filter, Int32, UserCredentials) Asynchronously reads all events in the node forward (e.g. beginning to end). Filters events based upon the passed in filter. Declaration Task<AllEventsSlice> FilteredReadAllEventsForwardAsync(Position position, int maxCount, bool resolveLinkTos, Filter filter, int maxSearchWindow, UserCredentials userCredentials = null) Parameters Type Name Position position System.Int32 maxCount System.Boolean resolveLinkTos Filter filter System.Int32 maxSearchWindow UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < AllEventsSlice > A System.Threading.Tasks.Task<TResult> containing the records read. FilteredSubscribeToAllAsync(Boolean, Filter, Func<EventStoreSubscription, ResolvedEvent, Task>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials) Asynchronously subscribes to all events in Event Store. New events written to the stream while the subscription is active will be pushed to the client. Filters events based upon the passed in filter. Declaration Task<EventStoreSubscription> FilteredSubscribeToAllAsync(bool resolveLinkTos, Filter filter, Func<EventStoreSubscription, ResolvedEvent, Task> eventAppeared, Action<EventStoreSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null) Parameters Type Name System.Boolean resolveLinkTos Filter filter System.Func < EventStoreSubscription , ResolvedEvent , System.Threading.Tasks.Task > eventAppeared System.Action < EventStoreSubscription , SubscriptionDropReason , System.Exception > subscriptionDropped UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < EventStoreSubscription > A System.Threading.Tasks.Task<TResult> representing the subscription. FilteredSubscribeToAllAsync(Boolean, Filter, Func<EventStoreSubscription, ResolvedEvent, Task>, Func<EventStoreSubscription, Position, Task>, Int32, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials) Asynchronously subscribes to all events in Event Store. New events written to the stream while the subscription is active will be pushed to the client. Filters events based upon the passed in filter. Declaration Task<EventStoreSubscription> FilteredSubscribeToAllAsync(bool resolveLinkTos, Filter filter, Func<EventStoreSubscription, ResolvedEvent, Task> eventAppeared, Func<EventStoreSubscription, Position, Task> checkpointReached, int checkpointInterval, Action<EventStoreSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null) Parameters Type Name System.Boolean resolveLinkTos Filter filter System.Func < EventStoreSubscription , ResolvedEvent , System.Threading.Tasks.Task > eventAppeared System.Func < EventStoreSubscription , Position , System.Threading.Tasks.Task > checkpointReached System.Int32 checkpointInterval System.Action < EventStoreSubscription , SubscriptionDropReason , System.Exception > subscriptionDropped UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < EventStoreSubscription > A System.Threading.Tasks.Task<TResult> representing the subscription. FilteredSubscribeToAllFrom(Nullable<Position>, Filter, CatchUpSubscriptionFilteredSettings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials) Subscribes to a all events. Existing events from lastCheckpoint onwards are read from Event Store and presented to the user of EventStoreCatchUpSubscription as if they had been pushed. Once the end of the stream is read the subscription is transparently (to the user) switched to push new events as they are written. The action liveProcessingStarted is called when the EventStoreCatchUpSubscription switches from the reading phase to the live subscription phase. Filters events based upon the passed in filter. Declaration EventStoreAllFilteredCatchUpSubscription FilteredSubscribeToAllFrom(Position? lastCheckpoint, Filter filter, CatchUpSubscriptionFilteredSettings settings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task> eventAppeared, Action<EventStoreCatchUpSubscription> liveProcessingStarted = null, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null) Parameters Type Name System.Nullable < Position > lastCheckpoint Filter filter CatchUpSubscriptionFilteredSettings settings System.Func < EventStoreCatchUpSubscription , ResolvedEvent , System.Threading.Tasks.Task > eventAppeared System.Action < EventStoreCatchUpSubscription > liveProcessingStarted System.Action < EventStoreCatchUpSubscription , SubscriptionDropReason , System.Exception > subscriptionDropped UserCredentials userCredentials Returns Type Description EventStoreAllFilteredCatchUpSubscription An EventStoreAllFilteredCatchUpSubscription representing the subscription. FilteredSubscribeToAllFrom(Nullable<Position>, Filter, CatchUpSubscriptionFilteredSettings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task>, Func<EventStoreCatchUpSubscription, Position, Task>, Int32, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials) Subscribes to a all events. Existing events from lastCheckpoint onwards are read from Event Store and presented to the user of EventStoreCatchUpSubscription as if they had been pushed. Once the end of the stream is read the subscription is transparently (to the user) switched to push new events as they are written. The action liveProcessingStarted is called when the EventStoreCatchUpSubscription switches from the reading phase to the live subscription phase. Filters events based upon the passed in filter. Declaration EventStoreAllFilteredCatchUpSubscription FilteredSubscribeToAllFrom(Position? lastCheckpoint, Filter filter, CatchUpSubscriptionFilteredSettings settings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task> eventAppeared, Func<EventStoreCatchUpSubscription, Position, Task> checkpointReached, int checkpointIntervalMultiplier, Action<EventStoreCatchUpSubscription> liveProcessingStarted = null, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null) Parameters Type Name System.Nullable < Position > lastCheckpoint Filter filter CatchUpSubscriptionFilteredSettings settings System.Func < EventStoreCatchUpSubscription , ResolvedEvent , System.Threading.Tasks.Task > eventAppeared System.Func < EventStoreCatchUpSubscription , Position , System.Threading.Tasks.Task > checkpointReached System.Int32 checkpointIntervalMultiplier System.Action < EventStoreCatchUpSubscription > liveProcessingStarted System.Action < EventStoreCatchUpSubscription , SubscriptionDropReason , System.Exception > subscriptionDropped UserCredentials userCredentials Returns Type Description EventStoreAllFilteredCatchUpSubscription An EventStoreAllFilteredCatchUpSubscription representing the subscription. GetStreamMetadataAsRawBytesAsync(String, UserCredentials) Asynchronously reads the metadata for a stream as a byte array. Declaration Task<RawStreamMetadataResult> GetStreamMetadataAsRawBytesAsync(string stream, UserCredentials userCredentials = null) Parameters Type Name System.String stream UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < RawStreamMetadataResult > A System.Threading.Tasks.Task<TResult> representing system metadata as properties and user-specified metadata as bytes. GetStreamMetadataAsync(String, UserCredentials) Asynchronously reads the metadata for a stream and converts the metadata into a StreamMetadata . Declaration Task<StreamMetadataResult> GetStreamMetadataAsync(string stream, UserCredentials userCredentials = null) Parameters Type Name System.String stream UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < StreamMetadataResult > A System.Threading.Tasks.Task<TResult> representing system and user-specified metadata as properties. ReadAllEventsBackwardAsync(Position, Int32, Boolean, UserCredentials) Asynchronously reads all events in the node backwards (e.g. end to beginning). Declaration Task<AllEventsSlice> ReadAllEventsBackwardAsync(Position position, int maxCount, bool resolveLinkTos, UserCredentials userCredentials = null) Parameters Type Name Position position System.Int32 maxCount System.Boolean resolveLinkTos UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < AllEventsSlice > A System.Threading.Tasks.Task<TResult> containing the records read. ReadAllEventsForwardAsync(Position, Int32, Boolean, UserCredentials) Asynchronously reads all events in the node forward (e.g. beginning to end). Declaration Task<AllEventsSlice> ReadAllEventsForwardAsync(Position position, int maxCount, bool resolveLinkTos, UserCredentials userCredentials = null) Parameters Type Name Position position System.Int32 maxCount System.Boolean resolveLinkTos UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < AllEventsSlice > A System.Threading.Tasks.Task<TResult> containing the records read. ReadEventAsync(String, Int64, Boolean, UserCredentials) Asynchronously reads a single event from a stream. Declaration Task<EventReadResult> ReadEventAsync(string stream, long eventNumber, bool resolveLinkTos, UserCredentials userCredentials = null) Parameters Type Name System.String stream System.Int64 eventNumber System.Boolean resolveLinkTos UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < EventReadResult > A System.Threading.Tasks.Task<TResult> containing the results of the read operation. ReadStreamEventsBackwardAsync(String, Int64, Int32, Boolean, UserCredentials) Asynchronously reads count events from an event stream backwards (e.g. newest to oldest) from position. Declaration Task<StreamEventsSlice> ReadStreamEventsBackwardAsync(string stream, long start, int count, bool resolveLinkTos, UserCredentials userCredentials = null) Parameters Type Name System.String stream System.Int64 start System.Int32 count System.Boolean resolveLinkTos UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < StreamEventsSlice > A System.Threading.Tasks.Task<TResult> containing the results of the read operation. ReadStreamEventsForwardAsync(String, Int64, Int32, Boolean, UserCredentials) Asynchronously reads count events from an event stream forwards (e.g. oldest to newest) starting from position start. Declaration Task<StreamEventsSlice> ReadStreamEventsForwardAsync(string stream, long start, int count, bool resolveLinkTos, UserCredentials userCredentials = null) Parameters Type Name System.String stream System.Int64 start System.Int32 count System.Boolean resolveLinkTos UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < StreamEventsSlice > A System.Threading.Tasks.Task<TResult> containing the results of the read operation. SetStreamMetadataAsync(String, Int64, StreamMetadata, UserCredentials) Asynchronously sets the metadata for a stream. Declaration Task<WriteResult> SetStreamMetadataAsync(string stream, long expectedMetastreamVersion, StreamMetadata metadata, UserCredentials userCredentials = null) Parameters Type Name System.String stream System.Int64 expectedMetastreamVersion StreamMetadata metadata UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < WriteResult > A System.Threading.Tasks.Task<TResult> containing the results of the write operation. SetStreamMetadataAsync(String, Int64, Byte[], UserCredentials) Asynchronously sets the metadata for a stream. Declaration Task<WriteResult> SetStreamMetadataAsync(string stream, long expectedMetastreamVersion, byte[] metadata, UserCredentials userCredentials = null) Parameters Type Name System.String stream System.Int64 expectedMetastreamVersion System.Byte [] metadata UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < WriteResult > A System.Threading.Tasks.Task<TResult> containing the results of the write operation. SetSystemSettingsAsync(SystemSettings, UserCredentials) Sets the global settings for the server or cluster to which the IEventStoreConnection is connected. Declaration Task SetSystemSettingsAsync(SystemSettings settings, UserCredentials userCredentials = null) Parameters Type Name SystemSettings settings UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that can be waited upon. StartTransactionAsync(String, Int64, UserCredentials) Starts an asynchronous transaction in Event Store on a given stream. Declaration Task<EventStoreTransaction> StartTransactionAsync(string stream, long expectedVersion, UserCredentials userCredentials = null) Parameters Type Name System.String stream System.Int64 expectedVersion UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < EventStoreTransaction > A System.Threading.Tasks.Task<TResult> representing a multi-request transaction. Remarks A EventStoreTransaction allows the calling of multiple writes with multiple round trips over long periods of time between the caller and Event Store. This method is only available through the TCP interface and no equivalent exists for the RESTful interface. SubscribeToAllAsync(Boolean, Func<EventStoreSubscription, ResolvedEvent, Task>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials) Asynchronously subscribes to all events in Event Store. New events written to the stream while the subscription is active will be pushed to the client. Declaration Task<EventStoreSubscription> SubscribeToAllAsync(bool resolveLinkTos, Func<EventStoreSubscription, ResolvedEvent, Task> eventAppeared, Action<EventStoreSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null) Parameters Type Name System.Boolean resolveLinkTos System.Func < EventStoreSubscription , ResolvedEvent , System.Threading.Tasks.Task > eventAppeared System.Action < EventStoreSubscription , SubscriptionDropReason , System.Exception > subscriptionDropped UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < EventStoreSubscription > A System.Threading.Tasks.Task<TResult> representing the subscription. SubscribeToAllFrom(Nullable<Position>, CatchUpSubscriptionSettings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials) Subscribes to a all events. Existing events from lastCheckpoint onwards are read from Event Store and presented to the user of EventStoreCatchUpSubscription as if they had been pushed. Once the end of the stream is read the subscription is transparently (to the user) switched to push new events as they are written. The action liveProcessingStarted is called when the EventStoreCatchUpSubscription switches from the reading phase to the live subscription phase. Declaration EventStoreAllCatchUpSubscription SubscribeToAllFrom(Position? lastCheckpoint, CatchUpSubscriptionSettings settings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task> eventAppeared, Action<EventStoreCatchUpSubscription> liveProcessingStarted = null, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null) Parameters Type Name System.Nullable < Position > lastCheckpoint CatchUpSubscriptionSettings settings System.Func < EventStoreCatchUpSubscription , ResolvedEvent , System.Threading.Tasks.Task > eventAppeared System.Action < EventStoreCatchUpSubscription > liveProcessingStarted System.Action < EventStoreCatchUpSubscription , SubscriptionDropReason , System.Exception > subscriptionDropped UserCredentials userCredentials Returns Type Description EventStoreAllCatchUpSubscription An EventStoreAllCatchUpSubscription representing the subscription. SubscribeToStreamAsync(String, Boolean, Func<EventStoreSubscription, ResolvedEvent, Task>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials) Asynchronously subscribes to a single event stream. New events written to the stream while the subscription is active will be pushed to the client. Declaration Task<EventStoreSubscription> SubscribeToStreamAsync(string stream, bool resolveLinkTos, Func<EventStoreSubscription, ResolvedEvent, Task> eventAppeared, Action<EventStoreSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null) Parameters Type Name System.String stream System.Boolean resolveLinkTos System.Func < EventStoreSubscription , ResolvedEvent , System.Threading.Tasks.Task > eventAppeared System.Action < EventStoreSubscription , SubscriptionDropReason , System.Exception > subscriptionDropped UserCredentials userCredentials Returns Type Description System.Threading.Tasks.Task < EventStoreSubscription > A System.Threading.Tasks.Task<TResult> representing the subscription. SubscribeToStreamFrom(String, Nullable<Int64>, CatchUpSubscriptionSettings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials) Subscribes to a single event stream. Existing events from lastCheckpoint onwards are read from the stream and presented to the user of EventStoreCatchUpSubscription as if they had been pushed. Once the end of the stream is read the subscription is transparently (to the user) switched to push new events as they are written. The action liveProcessingStarted is called when the EventStoreCatchUpSubscription switches from the reading phase to the live subscription phase. Declaration EventStoreStreamCatchUpSubscription SubscribeToStreamFrom(string stream, long? lastCheckpoint, CatchUpSubscriptionSettings settings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task> eventAppeared, Action<EventStoreCatchUpSubscription> liveProcessingStarted = null, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null) Parameters Type Name System.String stream System.Nullable < System.Int64 > lastCheckpoint CatchUpSubscriptionSettings settings System.Func < EventStoreCatchUpSubscription , ResolvedEvent , System.Threading.Tasks.Task > eventAppeared System.Action < EventStoreCatchUpSubscription > liveProcessingStarted System.Action < EventStoreCatchUpSubscription , SubscriptionDropReason , System.Exception > subscriptionDropped UserCredentials userCredentials Returns Type Description EventStoreStreamCatchUpSubscription An EventStoreStreamCatchUpSubscription representing the subscription. UpdatePersistentSubscriptionAsync(String, String, PersistentSubscriptionSettings, UserCredentials) Asynchronously update a persistent subscription group on a stream. Declaration Task UpdatePersistentSubscriptionAsync(string stream, string groupName, PersistentSubscriptionSettings settings, UserCredentials credentials) Parameters Type Name System.String stream System.String groupName PersistentSubscriptionSettings settings UserCredentials credentials Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that can be waited upon. Events AuthenticationFailed Fired when a client fails to authenticate to an Event Store server. Declaration event EventHandler<ClientAuthenticationFailedEventArgs> AuthenticationFailed Event Type Type System.EventHandler < ClientAuthenticationFailedEventArgs > Closed Fired when an IEventStoreConnection is closed either using the Close() method, or when reconnection limits are reached without a successful connection being established. Declaration event EventHandler<ClientClosedEventArgs> Closed Event Type Type System.EventHandler < ClientClosedEventArgs > Connected Fired when an IEventStoreConnection connects to an Event Store server. Declaration event EventHandler<ClientConnectionEventArgs> Connected Event Type Type System.EventHandler < ClientConnectionEventArgs > Disconnected Fired when an IEventStoreConnection is disconnected from an Event Store server by some means other than by calling the Close() method. Declaration event EventHandler<ClientConnectionEventArgs> Disconnected Event Type Type System.EventHandler < ClientConnectionEventArgs > ErrorOccurred Fired when an error is thrown on an IEventStoreConnection . Declaration event EventHandler<ClientErrorEventArgs> ErrorOccurred Event Type Type System.EventHandler < ClientErrorEventArgs > Reconnecting Fired when an IEventStoreConnection is attempting to reconnect to an Event Store server following a disconnection. Declaration event EventHandler<ClientReconnectingEventArgs> Reconnecting Event Type Type System.EventHandler < ClientReconnectingEventArgs > Extension Methods IEventStoreConnectionExtensions.SubscribeToStreamAsync(IEventStoreConnection, String, Boolean, Action<EventStoreSubscription, ResolvedEvent>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials) IEventStoreConnectionExtensions.SubscribeToStreamFrom(IEventStoreConnection, String, Nullable<Int64>, CatchUpSubscriptionSettings, Action<EventStoreCatchUpSubscription, ResolvedEvent>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials) IEventStoreConnectionExtensions.SubscribeToAllAsync(IEventStoreConnection, Boolean, Action<EventStoreSubscription, ResolvedEvent>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials) IEventStoreConnectionExtensions.ConnectToPersistentSubscription(IEventStoreConnection, String, String, Action<EventStorePersistentSubscriptionBase, ResolvedEvent>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean) IEventStoreConnectionExtensions.ConnectToPersistentSubscription(IEventStoreConnection, String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean) IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Action<EventStorePersistentSubscriptionBase, ResolvedEvent>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean) IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean) IEventStoreConnectionExtensions.SubscribeToAllFrom(IEventStoreConnection, Nullable<Position>, CatchUpSubscriptionSettings, Action<EventStoreCatchUpSubscription, ResolvedEvent>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedStream.WriterConfiguration.StreamMetadata.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.EmittedStream.WriterConfiguration.StreamMetadata.html",
    "title": "Class EmittedStream.WriterConfiguration.StreamMetadata | Event Store",
    "keywords": "Class EmittedStream.WriterConfiguration.StreamMetadata Inheritance System.Object EmittedStream.WriterConfiguration.StreamMetadata Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class StreamMetadata : object Constructors StreamMetadata(Nullable<Int32>, Nullable<TimeSpan>) Declaration public StreamMetadata(int? maxCount = null, TimeSpan? maxAge = null) Parameters Type Name System.Nullable < System.Int32 > maxCount System.Nullable < TimeSpan > maxAge Properties MaxAge Declaration public TimeSpan? MaxAge { get; } Property Value Type System.Nullable < TimeSpan > MaxCount Declaration public int? MaxCount { get; } Property Value Type System.Nullable < System.Int32 >"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IProjectionProcessingPhase.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IProjectionProcessingPhase.html",
    "title": "Interface IProjectionProcessingPhase | Event Store",
    "keywords": "Interface IProjectionProcessingPhase Inherited Members EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState>.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState) EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult>.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult) EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.PrerecordedEventsLoaded>.Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded) Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public interface IProjectionProcessingPhase : IDisposable, IHandle<CoreProjectionManagementMessage.GetState>, IHandle<CoreProjectionManagementMessage.GetResult>, IHandle<CoreProjectionProcessingMessage.PrerecordedEventsLoaded> Properties CheckpointManager Declaration ICoreProjectionCheckpointManager CheckpointManager { get; } Property Value Type ICoreProjectionCheckpointManager EmittedStreamsTracker Declaration IEmittedStreamsTracker EmittedStreamsTracker { get; } Property Value Type IEmittedStreamsTracker Methods AdjustTag(CheckpointTag) Declaration CheckpointTag AdjustTag(CheckpointTag tag) Parameters Type Name CheckpointTag tag Returns Type Description CheckpointTag EnsureUnsubscribed() Declaration void EnsureUnsubscribed() GetStatistics(ProjectionStatistics) Declaration void GetStatistics(ProjectionStatistics info) Parameters Type Name ProjectionStatistics info InitializeFromCheckpoint(CheckpointTag) Declaration void InitializeFromCheckpoint(CheckpointTag checkpointTag) Parameters Type Name CheckpointTag checkpointTag MakeZeroCheckpointTag() Declaration CheckpointTag MakeZeroCheckpointTag() Returns Type Description CheckpointTag ProcessEvent() Declaration void ProcessEvent() SetProjectionState(PhaseState) Declaration void SetProjectionState(PhaseState state) Parameters Type Name PhaseState state Subscribe(CheckpointTag, Boolean) Declaration void Subscribe(CheckpointTag from, bool fromCheckpoint) Parameters Type Name CheckpointTag from System.Boolean fromCheckpoint"
  },
  "dotnet-api/code/EventStore.ClientAPI.ConnectionSettings.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.ConnectionSettings.html",
    "title": "Class ConnectionSettings | Event Store",
    "keywords": "Class ConnectionSettings A ConnectionSettings object is an immutable representation of the settings for an IEventStoreConnection . You can build a ConnectionSettings object using a ConnectionSettingsBuilder , either via the Create() method, or via the constructor of ConnectionSettingsBuilder . Inheritance System.Object ConnectionSettings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : EventStore.ClientAPI Assembly : EventStore.ClientAPI.dll Syntax public sealed class ConnectionSettings Fields ClientConnectionTimeout The interval after which a client will time out during connection. Declaration public readonly TimeSpan ClientConnectionTimeout Field Value Type System.TimeSpan ClusterDns The DNS name to use for discovering endpoints. Declaration public readonly string ClusterDns Field Value Type System.String DefaultUserCredentials The UserCredentials to use for operations where other UserCredentials are not explicitly supplied. Declaration public readonly UserCredentials DefaultUserCredentials Field Value Type UserCredentials ExternalGossipPort The well-known endpoint on which cluster managers are running. Declaration public readonly int ExternalGossipPort Field Value Type System.Int32 FailOnNoServerResponse Whether to raise an error if no response is received from the server for an operation. Declaration public readonly bool FailOnNoServerResponse Field Value Type System.Boolean GossipSeeds Endpoints for seeding gossip if not using DNS. Declaration public readonly GossipSeed[] GossipSeeds Field Value Type GossipSeed [] GossipTimeout Timeout for cluster gossip. Declaration public readonly TimeSpan GossipTimeout Field Value Type System.TimeSpan HeartbeatInterval The interval at which to send heartbeat messages. Declaration public readonly TimeSpan HeartbeatInterval Field Value Type System.TimeSpan HeartbeatTimeout The interval after which an unacknowledged heartbeat will cause the connection to be considered faulted and disconnect. Declaration public readonly TimeSpan HeartbeatTimeout Field Value Type System.TimeSpan Log The ILogger that this connection will use. Declaration public readonly ILogger Log Field Value Type ILogger MaxConcurrentItems The maximum number of allowed asynchronous operations to be in process. Declaration public readonly int MaxConcurrentItems Field Value Type System.Int32 MaxDiscoverAttempts The maximum number of attempts for discovering endpoints. Declaration public readonly int MaxDiscoverAttempts Field Value Type System.Int32 MaxQueueSize The maximum number of outstanding items allowed in the queue. Declaration public readonly int MaxQueueSize Field Value Type System.Int32 MaxReconnections The maximum number of times to allow for reconnection. Declaration public readonly int MaxReconnections Field Value Type System.Int32 MaxRetries The maximum number of retry attempts. Declaration public readonly int MaxRetries Field Value Type System.Int32 NodePreference Whether to randomly choose a node that's alive from the known nodes. Declaration public readonly NodePreference NodePreference Field Value Type NodePreference OperationTimeout The amount of time before an operation is considered to have timed out. Declaration public readonly TimeSpan OperationTimeout Field Value Type System.TimeSpan OperationTimeoutCheckPeriod The amount of time that timeouts are checked in the system. Declaration public readonly TimeSpan OperationTimeoutCheckPeriod Field Value Type System.TimeSpan QueueTimeout The amount of time a request for an operation is permitted to be queued awaiting transmission to the server. Declaration public readonly TimeSpan QueueTimeout Field Value Type System.TimeSpan ReconnectionDelay The amount of time to delay before attempting to reconnect. Declaration public readonly TimeSpan ReconnectionDelay Field Value Type System.TimeSpan RequireMaster Whether to require EventStore to refuse serving read or write request if it is not master. Declaration public readonly bool RequireMaster Field Value Type System.Boolean TargetHost The host name of the server expected on the SSL certificate. Declaration public readonly string TargetHost Field Value Type System.String UseSslConnection Whether the connection is encrypted using SSL. Declaration public readonly bool UseSslConnection Field Value Type System.Boolean ValidateServer Whether to validate the server SSL certificate. Declaration public readonly bool ValidateServer Field Value Type System.Boolean VerboseLogging Whether to use excessive logging of EventStoreConnection internal logic. Declaration public readonly bool VerboseLogging Field Value Type System.Boolean Properties CustomHttpClient Allows overriding the HTTPClient IHttpClient Declaration public IHttpClient CustomHttpClient { get; set; } Property Value Type IHttpClient Default The default ConnectionSettings . Declaration public static ConnectionSettings Default { get; } Property Value Type ConnectionSettings Methods Create() Creates a new set of ConnectionSettings . Declaration public static ConnectionSettingsBuilder Create() Returns Type Description ConnectionSettingsBuilder A ConnectionSettingsBuilder you can use to build up a ConnectionSettings"
  },
  "dotnet-api/code/EventStore.Projections.Core.ProjectionWorkerNode.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.ProjectionWorkerNode.html",
    "title": "Class ProjectionWorkerNode | Event Store",
    "keywords": "Class ProjectionWorkerNode Inheritance System.Object ProjectionWorkerNode Namespace : EventStore.Projections.Core Assembly : EventStore.Projections.Core.dll Syntax public class ProjectionWorkerNode : object Constructors ProjectionWorkerNode(Guid, TFChunkDb, IQueuedHandler, ITimeProvider, ISingletonTimeoutScheduler, ProjectionType, Boolean) Declaration public ProjectionWorkerNode(Guid workerId, TFChunkDb db, IQueuedHandler inputQueue, ITimeProvider timeProvider, ISingletonTimeoutScheduler timeoutScheduler, ProjectionType runProjections, bool faultOutOfOrderProjections) Parameters Type Name Guid workerId EventStore.Core.TransactionLog.Chunks.TFChunkDb db EventStore.Core.Bus.IQueuedHandler inputQueue EventStore.Core.Services.TimerService.ITimeProvider timeProvider ISingletonTimeoutScheduler timeoutScheduler EventStore.Common.Options.ProjectionType runProjections System.Boolean faultOutOfOrderProjections Properties CoreOutput Declaration public InMemoryBus CoreOutput { get; } Property Value Type EventStore.Core.Bus.InMemoryBus Methods SetupMessaging(IBus) Declaration public void SetupMessaging(IBus coreInputBus) Parameters Type Name EventStore.Core.Bus.IBus coreInputBus"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CoreProjectionCheckpointWriter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.CoreProjectionCheckpointWriter.html",
    "title": "Class CoreProjectionCheckpointWriter | Event Store",
    "keywords": "Class CoreProjectionCheckpointWriter Inheritance System.Object CoreProjectionCheckpointWriter Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class CoreProjectionCheckpointWriter : object Constructors CoreProjectionCheckpointWriter(String, IODispatcher, ProjectionVersion, String) Declaration public CoreProjectionCheckpointWriter(string projectionCheckpointStreamId, IODispatcher ioDispatcher, ProjectionVersion projectionVersion, string name) Parameters Type Name System.String projectionCheckpointStreamId EventStore.Core.Helpers.IODispatcher ioDispatcher ProjectionVersion projectionVersion System.String name Methods BeginWriteCheckpoint(IEnvelope, CheckpointTag, String) Declaration public void BeginWriteCheckpoint(IEnvelope envelope, CheckpointTag requestedCheckpointPosition, string requestedCheckpointState) Parameters Type Name EventStore.Core.Messaging.IEnvelope envelope CheckpointTag requestedCheckpointPosition System.String requestedCheckpointState GetStatistics(ProjectionStatistics) Declaration public void GetStatistics(ProjectionStatistics info) Parameters Type Name ProjectionStatistics info Initialize() Declaration public void Initialize() StartFrom(CheckpointTag, Int64) Declaration public void StartFrom(CheckpointTag checkpointTag, long checkpointEventNumber) Parameters Type Name CheckpointTag checkpointTag System.Int64 checkpointEventNumber"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.ProjectionEventTypes.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.ProjectionEventTypes.html",
    "title": "Class ProjectionEventTypes | Event Store",
    "keywords": "Class ProjectionEventTypes Inheritance System.Object ProjectionEventTypes Namespace : EventStore.Projections.Core.Services Assembly : EventStore.Projections.Core.dll Syntax public static class ProjectionEventTypes : object Fields PartitionCheckpoint Declaration public const string PartitionCheckpoint = null Field Value Type System.String ProjectionCheckpoint Declaration public const string ProjectionCheckpoint = null Field Value Type System.String ProjectionCreated Declaration public const string ProjectionCreated = null Field Value Type System.String ProjectionDeleted Declaration public const string ProjectionDeleted = null Field Value Type System.String ProjectionsInitialized Declaration public const string ProjectionsInitialized = null Field Value Type System.String ProjectionUpdated Declaration public const string ProjectionUpdated = null Field Value Type System.String StreamTracked Declaration public const string StreamTracked = null Field Value Type System.String"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.HeadingEventReader.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.HeadingEventReader.html",
    "title": "Class HeadingEventReader | Event Store",
    "keywords": "Class HeadingEventReader Inheritance System.Object HeadingEventReader Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public class HeadingEventReader : object Constructors HeadingEventReader(Int32, IPublisher) Declaration public HeadingEventReader(int eventCacheSize, IPublisher publisher) Parameters Type Name System.Int32 eventCacheSize EventStore.Core.Bus.IPublisher publisher Methods Handle(ReaderSubscriptionMessage.CommittedEventDistributed) Declaration public bool Handle(ReaderSubscriptionMessage.CommittedEventDistributed message) Parameters Type Name ReaderSubscriptionMessage.CommittedEventDistributed message Returns Type Description System.Boolean Handle(ReaderSubscriptionMessage.EventReaderIdle) Declaration public bool Handle(ReaderSubscriptionMessage.EventReaderIdle message) Parameters Type Name ReaderSubscriptionMessage.EventReaderIdle message Returns Type Description System.Boolean Handle(ReaderSubscriptionMessage.EventReaderPartitionDeleted) Declaration public bool Handle(ReaderSubscriptionMessage.EventReaderPartitionDeleted message) Parameters Type Name ReaderSubscriptionMessage.EventReaderPartitionDeleted message Returns Type Description System.Boolean Start(Guid, IEventReader) Declaration public void Start(Guid eventReaderId, IEventReader eventReader) Parameters Type Name Guid eventReaderId IEventReader eventReader Stop() Declaration public void Stop() TrySubscribe(Guid, IReaderSubscription, Int64) Declaration public bool TrySubscribe(Guid projectionId, IReaderSubscription readerSubscription, long fromTransactionFilePosition) Parameters Type Name Guid projectionId IReaderSubscription readerSubscription System.Int64 fromTransactionFilePosition Returns Type Description System.Boolean Unsubscribe(Guid) Declaration public void Unsubscribe(Guid projectionId) Parameters Type Name Guid projectionId"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IEmittedEventWriter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IEmittedEventWriter.html",
    "title": "Interface IEmittedEventWriter | Event Store",
    "keywords": "Interface IEmittedEventWriter Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public interface IEmittedEventWriter Methods EventsEmitted(EmittedEventEnvelope[], Guid, String) Declaration void EventsEmitted(EmittedEventEnvelope[] scheduledWrites, Guid causedBy, string correlationId) Parameters Type Name EmittedEventEnvelope [] scheduledWrites Guid causedBy System.String correlationId"
  },
  "dotnet-api/code/EventStore.ClientAPI.Exceptions.UserCommandFailedException.html": {
    "href": "dotnet-api/code/EventStore.ClientAPI.Exceptions.UserCommandFailedException.html",
    "title": "Class UserCommandFailedException | Event Store",
    "keywords": "Class UserCommandFailedException Exception thrown if a projection command fails. Inheritance System.Object System.Exception EventStoreConnectionException UserCommandFailedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : EventStore.ClientAPI.Exceptions Assembly : EventStore.ClientAPI.dll Syntax public class UserCommandFailedException : EventStoreConnectionException, ISerializable Constructors UserCommandFailedException() Constructs a new UserCommandFailedException . Declaration public UserCommandFailedException() UserCommandFailedException(Int32, String) Constructs a new UserCommandFailedException . Declaration public UserCommandFailedException(int httpStatusCode, string message) Parameters Type Name System.Int32 httpStatusCode System.String message UserCommandFailedException(SerializationInfo, StreamingContext) Constructs a new UserCommandFailedException . Declaration protected UserCommandFailedException(SerializationInfo info, StreamingContext context) Parameters Type Name System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context UserCommandFailedException(String, Exception) Constructs a new UserCommandFailedException . Declaration public UserCommandFailedException(string message, Exception innerException) Parameters Type Name System.String message System.Exception innerException Properties HttpStatusCode The Http status code returned for the operation Declaration public int HttpStatusCode { get; } Property Value Type System.Int32 Implements System.Runtime.Serialization.ISerializable"
  },
  "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IResultEventEmitter.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Services.Processing.IResultEventEmitter.html",
    "title": "Interface IResultEventEmitter | Event Store",
    "keywords": "Interface IResultEventEmitter Namespace : EventStore.Projections.Core.Services.Processing Assembly : EventStore.Projections.Core.dll Syntax public interface IResultEventEmitter Methods ResultUpdated(String, String, CheckpointTag) Declaration EmittedEventEnvelope[] ResultUpdated(string partition, string result, CheckpointTag at) Parameters Type Name System.String partition System.String result CheckpointTag at Returns Type Description EmittedEventEnvelope []"
  },
  "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.html": {
    "href": "dotnet-api/code/EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.html",
    "title": "Class CoreProjectionStatusMessage | Event Store",
    "keywords": "Class CoreProjectionStatusMessage Inheritance System.Object CoreProjectionStatusMessage Namespace : EventStore.Projections.Core.Messages Assembly : EventStore.Projections.Core.dll Syntax public static class CoreProjectionStatusMessage : object"
  }
}