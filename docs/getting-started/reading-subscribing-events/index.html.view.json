{"conceptual":"\n<p sourcefile=\"~/getting-started/_intro.md\" sourcestartlinenumber=\"1\" sourceendlinenumber=\"1\">This getting started guide shows you how to get started with Event Store using the Atom publishing protocol as the primary interface. </p>\n<div class=\"NOTE\" sourcefile=\"~/getting-started/_intro.md\" sourcestartlinenumber=\"3\" sourceendlinenumber=\"3\"><h5>Note</h5><p sourcefile=\"~/getting-started/_intro.md\" sourcestartlinenumber=\"4\" sourceendlinenumber=\"4\">The described is for development and evaluation of Event Store. It does not describe a production setup. The HTTP examples use cURL, but you can read Atom feeds with a wide variety of applications and languages.</p>\n</div>\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"9\" sourceendlinenumber=\"9\">This second step covers reading events from a stream and subscribing to changes to events in a stream.</p>\n<h2 id=\"read-a-stream-of-events\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"11\" sourceendlinenumber=\"11\">Read a Stream of Events</h2>\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"13\" sourceendlinenumber=\"13\">Event Store exposes all streams as <a href=\"http://tools.ietf.org/html/rfc4287\" data-raw-source=\"[atom feeds](http://tools.ietf.org/html/rfc4287)\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"13\" sourceendlinenumber=\"13\">atom feeds</a>, and you can read data from the stream by navigating to the <em>head URI</em> of the stream <a href=\"http://127.0.0.1:2113/streams/&lt;STREAM_ID\" data-raw-source=\"&lt;http://127.0.0.1:2113/streams/&lt;STREAM_ID&gt;\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"13\" sourceendlinenumber=\"13\">http://127.0.0.1:2113/streams/&lt;STREAM_ID</a>&gt; with cURL, or click the <em>Stream Browser</em> tab in the Admin UI and you see the stream you created in step 1.</p>\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\"><img src=\"~/images/es-web-admin-stream-browser.png\" alt=\"The Admin UI Dashboard\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\"></p>\n<div class=\"tabGroup\" id=\"tabgroup_ewz4UtAAbO\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"17\" sourceendlinenumber=\"28\">\n<ul role=\"tablist\">\n<li role=\"presentation\">\n<a href=\"#tabpanel_ewz4UtAAbO_tabid-6\" role=\"tab\" aria-controls=\"tabpanel_ewz4UtAAbO_tabid-6\" data-tab=\"tabid-6\" tabindex=\"0\" aria-selected=\"true\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"17\" sourceendlinenumber=\"17\">Request</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_ewz4UtAAbO_tabid-7\" role=\"tab\" aria-controls=\"tabpanel_ewz4UtAAbO_tabid-7\" data-tab=\"tabid-7\" tabindex=\"-1\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"24\" sourceendlinenumber=\"24\">Response</a>\n</li>\n</ul>\n<section id=\"tabpanel_ewz4UtAAbO_tabid-6\" role=\"tabpanel\" data-tab=\"tabid-6\">\n<pre sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"19\" sourceendlinenumber=\"19\"><code class=\"lang-bash\" name=\"getting-started-read-stream-request\">curl -i -H &quot;Accept:application/vnd.eventstore.atom+json&quot; &quot;http://127.0.0.1:2113/streams/newstream&quot;\n</code></pre><div class=\"NOTE\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"21\" sourceendlinenumber=\"21\"><h5>Note</h5><p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"22\" sourceendlinenumber=\"22\">This returns the feed in JSON format, you can also use <code>Accept:application/atom+xml</code> if you prefer XML.</p>\n</div>\n</section>\n<section id=\"tabpanel_ewz4UtAAbO_tabid-7\" role=\"tabpanel\" data-tab=\"tabid-7\" aria-hidden=\"true\" hidden=\"hidden\">\n<pre sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"26\" sourceendlinenumber=\"26\"><code class=\"lang-http\" name=\"getting-started-read-stream-response\">HTTP/1.1 200 OK\nAccess-Control-Allow-Methods: POST, DELETE, GET, OPTIONS\nAccess-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos\nAccess-Control-Allow-Origin: *\nAccess-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion\nCache-Control: max-age=0, no-cache, must-revalidate\nVary: Accept\nETag: &quot;0;-2060438500&quot;\nContent-Type: application/vnd.eventstore.atom+json; charset=utf-8\nServer: Mono-HTTPAPI/1.0\nDate: Fri, 15 Dec 2017 12:23:23 GMT\nContent-Length: 1262\nKeep-Alive: timeout=15,max=100\n\n{\n  &quot;title&quot;: &quot;Event stream &#39;newstream&#39;&quot;,\n  &quot;id&quot;: &quot;http://127.0.0.1:2113/streams/newstream&quot;,\n  &quot;updated&quot;: &quot;2017-12-15T12:19:32.021776Z&quot;,\n  &quot;streamId&quot;: &quot;newstream&quot;,\n  &quot;author&quot;: {\n    &quot;name&quot;: &quot;EventStore&quot;\n  },\n  &quot;headOfStream&quot;: true,\n  &quot;selfUrl&quot;: &quot;http://127.0.0.1:2113/streams/newstream&quot;,\n  &quot;eTag&quot;: &quot;0;-2060438500&quot;,\n  &quot;links&quot;: [\n    {\n      &quot;uri&quot;: &quot;http://127.0.0.1:2113/streams/newstream&quot;,\n      &quot;relation&quot;: &quot;self&quot;\n    },\n    {\n      &quot;uri&quot;: &quot;http://127.0.0.1:2113/streams/newstream/head/backward/20&quot;,\n      &quot;relation&quot;: &quot;first&quot;\n    },\n    {\n      &quot;uri&quot;: &quot;http://127.0.0.1:2113/streams/newstream/1/forward/20&quot;,\n      &quot;relation&quot;: &quot;previous&quot;\n    },\n    {\n      &quot;uri&quot;: &quot;http://127.0.0.1:2113/streams/newstream/metadata&quot;,\n      &quot;relation&quot;: &quot;metadata&quot;\n    }\n  ],\n  &quot;entries&quot;: [\n    {\n      &quot;title&quot;: &quot;0@newstream&quot;,\n      &quot;id&quot;: &quot;http://127.0.0.1:2113/streams/newstream/0&quot;,\n      &quot;updated&quot;: &quot;2017-12-15T12:19:32.021776Z&quot;,\n      &quot;author&quot;: {\n        &quot;name&quot;: &quot;EventStore&quot;\n      },\n      &quot;summary&quot;: &quot;event-type&quot;,\n      &quot;links&quot;: [\n        {\n          &quot;uri&quot;: &quot;http://127.0.0.1:2113/streams/newstream/0&quot;,\n          &quot;relation&quot;: &quot;edit&quot;\n        },\n        {\n          &quot;uri&quot;: &quot;http://127.0.0.1:2113/streams/newstream/0&quot;,\n          &quot;relation&quot;: &quot;alternate&quot;\n        }\n      ]\n    }\n  ]\n}\n</code></pre></section>\n</div>\n<div class=\"tabGroup\" id=\"tabgroup_ewz4UtAAbO-1\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"30\" sourceendlinenumber=\"45\">\n<ul role=\"tablist\">\n<li role=\"presentation\">\n<a href=\"#tabpanel_ewz4UtAAbO-1_tabid-dotnet-client\" role=\"tab\" aria-controls=\"tabpanel_ewz4UtAAbO-1_tabid-dotnet-client\" data-tab=\"tabid-dotnet-client\" tabindex=\"0\" aria-selected=\"true\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"30\" sourceendlinenumber=\"30\">.NET Client API</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_ewz4UtAAbO-1_tabid-jvm-client\" role=\"tab\" aria-controls=\"tabpanel_ewz4UtAAbO-1_tabid-jvm-client\" data-tab=\"tabid-jvm-client\" tabindex=\"-1\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"39\" sourceendlinenumber=\"39\">JVM Client</a>\n</li>\n</ul>\n<section id=\"tabpanel_ewz4UtAAbO-1_tabid-dotnet-client\" role=\"tabpanel\" data-tab=\"tabid-dotnet-client\">\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"32\" sourceendlinenumber=\"32\">To use the .NET API, use the following method passing the stream name, the start point in the stream, the number of events to read and whether to follow links to the event data:</p>\n<pre sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\"><code class=\"lang-csharp\" name=\"getting-started-read-stream-request\">var readEvents = conn.ReadStreamEventsForwardAsync(streamName, 0, 10, true).Result;\nforeach (var evt in readEvents.Events)\n    Console.WriteLine(Encoding.UTF8.GetString(evt.Event.Data));\n</code></pre><div class=\"NEXT\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\"><h5>Next Steps</h5><p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\"><a href=\"~/dotnet-api/reading-events.md\" data-raw-source=\"[Read this guide](~/dotnet-api/reading-events.md)\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">Read this guide</a> for more information on how to read events with the .NET API.</p>\n</div>\n</section>\n<section id=\"tabpanel_ewz4UtAAbO-1_tabid-jvm-client\" role=\"tabpanel\" data-tab=\"tabid-jvm-client\" aria-hidden=\"true\" hidden=\"hidden\">\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"41\" sourceendlinenumber=\"41\">To use the JVM client, use the following method passing the stream name, the start point in the stream, and whether to follow links to the event data:</p>\n<pre sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"43\" sourceendlinenumber=\"43\"><code class=\"lang-java\" name=\"getting-started-read\">        final ActorRef readResult = system.actorOf(Props.create(ReadResult.class));\n\n//TODO: How to read ten events?\n        final ReadEvent readEvent = new ReadEventBuilder(&quot;newstream&quot;)\n                .first()\n                .resolveLinkTos(false)\n                .build();\n\n        connection.tell(readEvent, readResult);\n</code></pre></section>\n</div>\n<h2 id=\"read-a-single-event\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"47\" sourceendlinenumber=\"47\">Read a Single Event</h2>\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"49\" sourceendlinenumber=\"49\">The feed has a single item inside of it, the one you posted in <a href=\"~/getting-started/index.md\" data-raw-source=\"[part 1](~/getting-started/index.md)\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"49\" sourceendlinenumber=\"49\">part 1</a>. You can see details of the event in the <em>Stream Browser</em> tab in the Admin UI by clicking a stream to see its events, and then clicking an event. Or with cURL, issue a <code>GET</code> to the <code>alternate</code> URI value from the response above.</p>\n<div class=\"tabGroup\" id=\"tabgroup_ewz4UtAAbO-2\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"51\" sourceendlinenumber=\"62\">\n<ul role=\"tablist\">\n<li role=\"presentation\">\n<a href=\"#tabpanel_ewz4UtAAbO-2_tabid-8\" role=\"tab\" aria-controls=\"tabpanel_ewz4UtAAbO-2_tabid-8\" data-tab=\"tabid-8\" tabindex=\"0\" aria-selected=\"true\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"51\" sourceendlinenumber=\"51\">Request</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_ewz4UtAAbO-2_tabid-9\" role=\"tab\" aria-controls=\"tabpanel_ewz4UtAAbO-2_tabid-9\" data-tab=\"tabid-9\" tabindex=\"-1\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"58\" sourceendlinenumber=\"58\">Response</a>\n</li>\n</ul>\n<section id=\"tabpanel_ewz4UtAAbO-2_tabid-8\" role=\"tabpanel\" data-tab=\"tabid-8\">\n<pre sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"53\" sourceendlinenumber=\"53\"><code class=\"lang-bash\" name=\"getting-started-read-event-request\">curl -i http://127.0.0.1:2113/streams/newstream/0 -H &quot;Accept: application/json&quot;\n</code></pre><div class=\"NOTE\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"55\" sourceendlinenumber=\"55\"><h5>Note</h5><p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"56\" sourceendlinenumber=\"56\">You can also use <code>Accept: text/xml</code> if you prefer XML.</p>\n</div>\n</section>\n<section id=\"tabpanel_ewz4UtAAbO-2_tabid-9\" role=\"tabpanel\" data-tab=\"tabid-9\" aria-hidden=\"true\" hidden=\"hidden\">\n<pre sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"60\" sourceendlinenumber=\"60\"><code class=\"lang-http\" name=\"getting-started-read-event-response\">HTTP/1.1 200 OK\nAccess-Control-Allow-Methods: GET, OPTIONS\nAccess-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER\nAccess-Control-Allow-Origin: *\nCache-Control: max-age=31536000, public\nVary: Accept\nContent-Type: application/json; charset: utf-8\nServer: Mono-HTTPAPI/1.0\nDate: Wed, 03 Jul 2013 11:09:12 GMT\nContent-Length: 14\nKeep-Alive: timeout=15,max=100\n\n{\n  &quot;a&quot;: &quot;1&quot;\n}\n</code></pre></section>\n</div>\n<div class=\"tabGroup\" id=\"tabgroup_ewz4UtAAbO-3\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"64\" sourceendlinenumber=\"76\">\n<ul role=\"tablist\">\n<li role=\"presentation\">\n<a href=\"#tabpanel_ewz4UtAAbO-3_tabid-dotnet-read-event\" role=\"tab\" aria-controls=\"tabpanel_ewz4UtAAbO-3_tabid-dotnet-read-event\" data-tab=\"tabid-dotnet-read-event\" tabindex=\"0\" aria-selected=\"true\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"64\" sourceendlinenumber=\"64\">.NET Client API</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_ewz4UtAAbO-3_tabid-jvm-read-event\" role=\"tab\" aria-controls=\"tabpanel_ewz4UtAAbO-3_tabid-jvm-read-event\" data-tab=\"tabid-jvm-read-event\" tabindex=\"-1\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"70\" sourceendlinenumber=\"70\">JVM Client</a>\n</li>\n</ul>\n<section id=\"tabpanel_ewz4UtAAbO-3_tabid-dotnet-read-event\" role=\"tabpanel\" data-tab=\"tabid-dotnet-read-event\">\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"66\" sourceendlinenumber=\"66\">To use the .NET API, use the following method passing the stream name, the event you want to read and wether to return the event data:</p>\n<pre sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"68\" sourceendlinenumber=\"68\"><code class=\"lang-csharp\" name=\"getting-started-read-stream-request\">var readResult = conn.ReadEventAsync(streamName, 0, true).Result;\nConsole.WriteLine(Encoding.UTF8.GetString(readResult.Event.Value.Event.Data));\n</code></pre></section>\n<section id=\"tabpanel_ewz4UtAAbO-3_tabid-jvm-read-event\" role=\"tabpanel\" data-tab=\"tabid-jvm-read-event\" aria-hidden=\"true\" hidden=\"hidden\">\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"72\" sourceendlinenumber=\"72\">To use the Java client, use the following method passing the stream name, the event you want to read and if you want to also return the event data:</p>\n<pre sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"74\" sourceendlinenumber=\"74\"><code class=\"lang-java\" name=\"getting-started-read\">        final ActorRef readResult = system.actorOf(Props.create(ReadResult.class));\n\n//TODO: How to read ten events?\n        final ReadEvent readEvent = new ReadEventBuilder(&quot;newstream&quot;)\n                .first()\n                .resolveLinkTos(false)\n                .build();\n\n        connection.tell(readEvent, readResult);\n</code></pre></section>\n</div>\n<h2 id=\"paginating-through-events\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"78\" sourceendlinenumber=\"78\">Paginating through Events</h2>\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"80\" sourceendlinenumber=\"80\">For longer feeds of events than this example, you need to paginate through the feed, reading a certain number of events at a time.</p>\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"82\" sourceendlinenumber=\"82\">You can use the HTTP API <a href=\"~/http-api/reading-streams.md#feed-paging\" data-raw-source=\"[to paginate](~/http-api/reading-streams.md#feed-paging)\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"82\" sourceendlinenumber=\"82\">to paginate</a> through the feed using <em>previous</em> and <em>next</em> links within the stream. Or you can <a href=\"~/dotnet-api/reading-events.md#example-read-an-entire-stream-forwards-from-start-to-end\" data-raw-source=\"[use a read method](~/dotnet-api/reading-events.md#example-read-an-entire-stream-forwards-from-start-to-end)\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"82\" sourceendlinenumber=\"82\">use a read method</a> of the .NET API (and JVM client), to loop through events a certain number at a time.</p>\n<h2 id=\"subscribing-to-receive-stream-updates\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"84\" sourceendlinenumber=\"84\">Subscribing to Receive Stream Updates</h2>\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"86\" sourceendlinenumber=\"86\">A common operation is to subscribe to a stream and receive notifications for changes. As new events arrive, you continue following them.</p>\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"88\" sourceendlinenumber=\"88\">You can create subscriptions and watch events as they arrive under the <em>Persistent Subscriptions</em> tab, or use an API method:</p>\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"90\" sourceendlinenumber=\"90\"><img src=\"~/images/getting-started-subscriptions.png\" alt=\"Subscriptions in the Admin UI\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"90\" sourceendlinenumber=\"90\"></p>\n<div class=\"tabGroup\" id=\"tabgroup_ewz4UtAAbO-4\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"92\" sourceendlinenumber=\"107\">\n<ul role=\"tablist\">\n<li role=\"presentation\">\n<a href=\"#tabpanel_ewz4UtAAbO-4_tabid-create-sub-http\" role=\"tab\" aria-controls=\"tabpanel_ewz4UtAAbO-4_tabid-create-sub-http\" data-tab=\"tabid-create-sub-http\" tabindex=\"0\" aria-selected=\"true\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"92\" sourceendlinenumber=\"92\">HTTP API</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_ewz4UtAAbO-4_tabid-create-sub-dotnet\" role=\"tab\" aria-controls=\"tabpanel_ewz4UtAAbO-4_tabid-create-sub-dotnet\" data-tab=\"tabid-create-sub-dotnet\" tabindex=\"-1\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"96\" sourceendlinenumber=\"96\">.NET API</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_ewz4UtAAbO-4_tabid-create-sub-java\" role=\"tab\" aria-controls=\"tabpanel_ewz4UtAAbO-4_tabid-create-sub-java\" data-tab=\"tabid-create-sub-java\" tabindex=\"-1\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"103\" sourceendlinenumber=\"103\">JVM Client API</a>\n</li>\n</ul>\n<section id=\"tabpanel_ewz4UtAAbO-4_tabid-create-sub-http\" role=\"tabpanel\" data-tab=\"tabid-create-sub-http\">\n<pre sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"94\" sourceendlinenumber=\"94\"><code class=\"lang-bash\" name=\"getting-started-create-subscription\">curl -i -X PUT -d $&#39;{&quot;startFrom&quot;: 0,&quot;resolveLinktos&quot;: false}&#39; http://localhost:2113/subscriptions/newstream/examplegroup -u admin:changeit -H &quot;Content-Type: application/json&quot;\n</code></pre></section>\n<section id=\"tabpanel_ewz4UtAAbO-4_tabid-create-sub-dotnet\" role=\"tabpanel\" data-tab=\"tabid-create-sub-dotnet\" aria-hidden=\"true\" hidden=\"hidden\">\n<pre sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"98\" sourceendlinenumber=\"98\"><code class=\"lang-csharp\" name=\"getting-started-read-stream-request\">PersistentSubscriptionSettings settings = PersistentSubscriptionSettings.Create()\n    .DoNotResolveLinkTos()\n    .StartFromCurrent();\n\nconn.CreatePersistentSubscriptionAsync(streamName, &quot;examplegroup&quot;, settings, adminCredentials).Wait();\n\nconn.ConnectToPersistentSubscription(streamName, &quot;examplegroup&quot;, (_, x) =&gt;\n{\n    var data = Encoding.ASCII.GetString(x.Event.Data);\n    Console.WriteLine(&quot;Received: &quot; + x.Event.EventStreamId + &quot;:&quot; + x.Event.EventNumber);\n    Console.WriteLine(data);\n}, (sub, reason, ex) =&gt; { }, adminCredentials);\n\nConsole.WriteLine(&quot;waiting for events. press enter to exit&quot;);\nConsole.ReadLine();\n</code></pre><div class=\"NEXT\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"100\" sourceendlinenumber=\"100\"><h5>Next Steps</h5><p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"101\" sourceendlinenumber=\"101\">Find more details on the parameters used in the example above, read the API documentation for <a href=\"xref:EventStore.ClientAPI.PersistentSubscriptionSettings\" data-raw-source=\"[`PersistentSubscriptionSettings`](xref:EventStore.ClientAPI.PersistentSubscriptionSettings)\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"101\" sourceendlinenumber=\"101\"><code>PersistentSubscriptionSettings</code></a>, <a href=\"xref:EventStore.ClientAPI.IEventStoreConnection.CreatePersistentSubscriptionAsync*\" data-raw-source=\"[`CreatePersistentSubscriptionAsync`](xref:EventStore.ClientAPI.IEventStoreConnection.CreatePersistentSubscriptionAsync*)\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"101\" sourceendlinenumber=\"101\"><code>CreatePersistentSubscriptionAsync</code></a> and <a href=\"xref:EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscriptionAsync*\" data-raw-source=\"[`ConnectToPersistentSubscription`](xref:EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscriptionAsync*)\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"101\" sourceendlinenumber=\"101\"><code>ConnectToPersistentSubscription</code></a></p>\n</div>\n</section>\n<section id=\"tabpanel_ewz4UtAAbO-4_tabid-create-sub-java\" role=\"tabpanel\" data-tab=\"tabid-create-sub-java\" aria-hidden=\"true\" hidden=\"hidden\">\n<pre sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"105\" sourceendlinenumber=\"105\"><code class=\"lang-java\" name=\"getting-started-read\">final Closeable closeable = connection.subscribeToStream(&quot;newstream&quot;, new SubscriptionObserver&lt;Event&gt;() {\n    @Override\n    public void onLiveProcessingStart(Closeable subscription) {\n        system.log().info(&quot;live processing started&quot;);\n    }\n\n    @Override\n    public void onEvent(Event event, Closeable subscription) {\n        system.log().info(event.toString());\n    }\n\n    @Override\n    public void onError(Throwable e) {\n        system.log().error(e.toString());\n    }\n\n    @Override\n    public void onClose() {\n        system.log().error(&quot;subscription closed&quot;);\n    }\n}, false, null);\n</code></pre></section>\n</div>\n<!-- TODO: The dotnet example has reading events as they are added to subscription, HTTP does not, expand? -->\n<!-- TODO: And write more events, then what etc -->\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"113\" sourceendlinenumber=\"113\">There are three types of subscription patterns, useful in different situations.</p>\n<h3 id=\"volatile-subscriptions\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"115\" sourceendlinenumber=\"115\">Volatile Subscriptions</h3>\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"117\" sourceendlinenumber=\"117\">This subscription calls a given function for events written after establishing the subscription. They are useful when you need notification of new events with minimal latency, but where it&#39;s not necessary to process every event.</p>\n<!-- TODO: Example needed? -->\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"121\" sourceendlinenumber=\"121\">For example, if a stream has 100 events in it when a subscriber connects, the subscriber can expect to see event number 101 onwards until the time the subscription is closed or dropped.</p>\n<h3 id=\"catch-up-subscriptions\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"123\" sourceendlinenumber=\"123\">Catch-Up Subscriptions</h3>\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"125\" sourceendlinenumber=\"125\">This subscription specifies a starting point, in the form of an event number or transaction file position. You call the function for events from the starting point until the end of the stream, and then for subsequently written events.</p>\n<!-- TODO: Example needed? -->\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"129\" sourceendlinenumber=\"129\">For example, if you specify a starting point of 50 when a stream has 100 events, the subscriber can expect to see events 51 through 100, and then any events are subsequently written until you drop or close the subscription.</p>\n<h3 id=\"persistent-subscriptions\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"131\" sourceendlinenumber=\"131\">Persistent Subscriptions</h3>\n<div class=\"NOTE\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"133\" sourceendlinenumber=\"133\"><h5>Note</h5><p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"134\" sourceendlinenumber=\"134\">Persistent subscriptions exist in version 3.2.0 and above of Event Store.</p>\n</div>\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"136\" sourceendlinenumber=\"136\">This subscription supports the &quot;<a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/competing-consumers\" data-raw-source=\"[competing consumers](https://docs.microsoft.com/en-us/azure/architecture/patterns/competing-consumers)\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"136\" sourceendlinenumber=\"136\">competing consumers</a>&quot; messaging pattern and are useful when you need to distribute messages to many workers. Event Store saves the subscription state server-side and allows for at-least-once delivery guarantees across multiple consumers on the same stream. It is possible to have many groups of consumers compete on the same stream, with each group getting an at-least-once guarantee.</p>\n<!-- TODO: Example needed? -->\n<h2 id=\"next-step\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"140\" sourceendlinenumber=\"140\">Next Step</h2>\n<p sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"142\" sourceendlinenumber=\"142\">In this second part of our getting started guide you learned how to read events from a stream and subscribe to changes. The next part covers projections, used to give you continuous queries of your data.</p>\n<ul sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"144\" sourceendlinenumber=\"144\">\n<li sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"144\" sourceendlinenumber=\"144\"><a href=\"~/getting-started/projections.md\" data-raw-source=\"[Step 3 - Projections](~/getting-started/projections.md)\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"144\" sourceendlinenumber=\"144\">Step 3 - Projections</a></li>\n</ul>\n","type":"Conceptual","source":{"remote":{"path":"getting-started/reading-subscribing-events.md","branch":"feature/stats-REST","repo":"git@github.com:EventStore/docs.geteventstore.com.git"},"startLine":0.0,"endLine":0.0,"isExternal":false},"path":"getting-started/reading-subscribing-events.md","documentation":{"remote":{"path":"getting-started/reading-subscribing-events.md","branch":"feature/stats-REST","repo":"git@github.com:EventStore/docs.geteventstore.com.git"},"startLine":0.0,"endLine":0.0,"isExternal":false},"_docfxVersion":"2.43.3.0","_disableBreadcrumb":true,"_enableSearch":true,"_gitContribute":{"branch":"master"},"_appFaviconPath":"assets/favicon.ico","_appTitle":"Event Store","_appFooter":"&copy; 2019 Event Store Limited","_disableNavbar":false,"_disableToc":true,"_systemKeys":["conceptual","type","source","path","documentation","title","rawTitle","wordCount"],"title":"Step 2 - Read events from a stream and subscribe to changes","rawTitle":"<h1 id=\"step-2---read-events-from-a-stream-and-subscribe-to-changes\" sourcefile=\"getting-started/reading-subscribing-events.md\" sourcestartlinenumber=\"5\" sourceendlinenumber=\"5\">Step 2 - Read events from a stream and subscribe to changes</h1>","outputFileName":"index.html","wordCount":1189.0,"_lang":"csharp","_tocPath":"toc.html","_navPath":"toc.html","_rel":"../../","_path":"getting-started/reading-subscribing-events/index.html","_key":"getting-started/reading-subscribing-events.md","_navRel":"../../toc.html","_tocRel":"../../toc.html","_navKey":"~/toc.yml","_tocKey":"~/toc.yml","__global":{"classesInSubtitle":"Classes","structsInSubtitle":"Structs","interfacesInSubtitle":"Interfaces","enumsInSubtitle":"Enums","delegatesInSubtitle":"Delegates","constructorsInSubtitle":"Constructors","fieldsInSubtitle":"Fields","propertiesInSubtitle":"Properties","methodsInSubtitle":"Methods","eventsInSubtitle":"Events","operatorsInSubtitle":"Operators","eiisInSubtitle":"Explicit Interface Implementations","functionsInSubtitle":"Functions","membersInSubtitle":"Members","improveThisDoc":"Improve this Doc","viewSource":"View Source","inheritance":"Inheritance","inheritedMembers":"Inherited Members","namespace":"Namespace","assembly":"Assembly","syntax":"Syntax","overrides":"Overrides","implements":"Implements","remarks":"Remarks","examples":"Examples","seealso":"See Also","declaration":"Declaration","parameters":"Parameters","typeParameters":"Type Parameters","type":"Type","name":"Name","description":"Description","returns":"Returns","fieldValue":"Field Value","propertyValue":"Property Value","eventType":"Event Type","exceptions":"Exceptions","condition":"Condition","extensionMethods":"Extension Methods","note":"<h5>Note</h5>","warning":"<h5>Warning</h5>","tip":"<h5>Tip</h5>","important":"<h5>Important</h5>","caution":"<h5>Caution</h5>","next":"<h5>Next Steps</h5>","_shared":{}},"docurl":"https://github.com/EventStore/docs.geteventstore.com/blob/master/getting-started/reading-subscribing-events.md/#L1"}